/*
 * imr2y3.h
 *
*@Copyright (C) 2010-2020 上海网用软件有限公司
*@date                :2020-09-05
*@author              :gonghaotian
*@brief               :sns 索喜rtos
*@rely                :klib
*@function
*sns 索喜rtos，采用ETK-C语言编写
*设计的主要功能:
*1、
*2、
*@version
*1.0.0 2020年06月开始开发
*/

#ifndef __IM_R2Y3_H__
#define __IM_R2Y3_H__

#include <klib.h>
#include "imr2yutils.h"

#define IM_TYPE_R2Y3			(im_r2y3_get_type())
#define IM_R2Y3(obj)			(K_TYPE_CHECK_INSTANCE_CAST(obj, ImR2y3))
#define IM_IS_R2Y3(obj)		(K_TYPE_CHECK_INSTANCE_TYPE(obj, IM_TYPE_R2Y3))




typedef struct 				_ImR2y3 ImR2y3;
typedef struct 				_ImR2y3Private ImR2y3Private;

struct _ImR2y3 {
	KObject parent;
};


KConstType 		    im_r2y3_get_type(void);
ImR2y3*		        im_r2y3_new(void);

/**
@weakgroup im_r2y_iq
@{

<hr>

@section im_r2y_iq_sample Sample code

@section im_r2y_iq_sample_section1	Sample code of data setting for White Balance Gain.
	The precondition of the this sample is as follows.<br>
	@code
	R2yRgbColor r2y_wb;
	FLGPTN flgptn;

	r2y_wb.R = 400;
	r2y_wb.G = 256;
	r2y_wb.B = 480;

	im_r2y_ctrl2_set_wb_gain( ImR2yCtrl_PIPE1, &r2y_wb );

	r2y_wb.R = 0xFFF;
	r2y_wb.G = 0xFFF;
	r2y_wb.B = 0xFFF;

	im_r2y_ctrl2_set_wb_clip_level( ImR2yCtrl_PIPE1, &r2y_wb );

	im_r2y_proc_start(im_r2y_proc_new(),  ImR2yCtrl_PIPE1 );
	im_r2y_proc_waitend(im_r2y_proc_new(),  &flgptn, (ImR2yCtrl_INT_STATE_YYW0_END1 | ImR2yCtrl_INT_STATE_YYW_ERR1), 1000 );
	@endcode
	<br><br>

@section im_r2y_iq_sample_section2	Sample code of data setting for imaging.
	@code

	ImR2yCtrlOfs r2y_ctrl_ofs;
	CtrlMultiAxis r2y_ctrl_multi_axis;
	TImR2yTcof r2y_ctrl_btc_offset;
	TImR2yTct r2y_ctrl_btc_tct;
	TImR2yTchs r2y_ctrl_btc_tchs;
	ImR2yCtrlTone r2y_ctrl_tone;
	ImR2yCtrlGamma r2y_ctrl_gamma;
	R2yCtrlYnr r2y_ctrl_ynr;
	CtrlEdgeCmn r2y_ctrl_edge_cmn;
	R2yCtrlHedge r2y_ctrl_high_edge;
	R2yCtrlMedge r2y_ctrl_medium_edge;
	R2yCtrlLedge r2y_ctrl_low_edge;
	CtrlEdgeDotNoise r2y_ctrl_edge_dot_noise;
	R2yCtrlMapScl r2y_ctrl_mapscl;
	CtrlEdgeBlend r2y_ctrl_edge_blend;
	CtrlCrefEdgeTexture r2y_ctrl_edge_texture;
	CtrlCrefEdgeAdj r2y_ctrl_edge_adj;
	CtrlCrefYbBlend r2y_ctrl_yb_blend;
	R2yCtrlClpf r2y_ctrl_clpf;
	R2yCtrlCs r2y_ctrl_cs;

	UINT32	loop_cnt, loop_cnt2;

	const kuint16 gTone_Tbl[ImR2yCtrl_TABLE_MAX_TONE] = {
		 279,  292,  305,  318,  331,  344,  357,  370,  383,  396,  409,  423,  436,  450,  463,  477,
		 491,  506,  520,  534,  548,  563,  577,  591,  605,  619,  633,  646,  659,  672,  685,  697,
		 709,  720,  731,  742,  751,  761,  770,  778,  786,  794,  801,  808,  814,  820,  826,  832,
		 837,  842,  846,  851,  855,  859,  863,  866,  870,  873,  876,  880,  883,  886,  889,  892,
		 896,  899,  902,  905,  909,  912,  915,  919,  922,  925,  929,  932,  936,  939,  943,  946,
		 950,  953,  957,  960,  963,  967,  970,  973,  977,  980,  983,  986,  989,  992,  995,  998,
		1001, 1004, 1007, 1009, 1012, 1014, 1017, 1019, 1021, 1024, 1026, 1028, 1029, 1031, 1033, 1034,
		1036, 1037, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1047, 1048, 1049, 1049, 1050,
		1050, 1050, 1050, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1050, 1050, 1050, 1050, 1049,
		1049, 1048, 1048, 1048, 1047, 1047, 1046, 1045, 1045, 1044, 1044, 1043, 1042, 1042, 1041, 1040,
		1040, 1039, 1038, 1037, 1037, 1036, 1035, 1035, 1034, 1033, 1032, 1032, 1031, 1030, 1030, 1029,
		1028, 1028, 1027, 1026, 1025, 1025, 1024, 1023, 1023, 1022, 1022, 1021, 1020, 1020, 1019, 1018,
		1018, 1017, 1016, 1016, 1015, 1015, 1014, 1013, 1013, 1012, 1012, 1011, 1011, 1010, 1010, 1009,
		1008, 1008, 1007, 1007, 1006, 1006, 1005, 1005, 1005, 1004, 1004, 1003, 1003, 1002, 1002, 1002,
		1001, 1001, 1000, 1000, 1000,  999,  999,  999,  998,  998,  998,  997,  997,  997,  997,  996,
		 996,  996,  996,  995,  995,  995,  995,  995,  994,  994,  994,  994,  994,  994,  993,  993,
		 993,  993,  993,  993,  993,  993,  993,  992,  992,  992,  992,  992,  992,  992,  992,  992,
		 992,  992,  992,  991,  991,  991,  991,  991,  991,  991,  991,  991,  991,  991,  990,  990,
		 990,  990,  990,  990,  990,  990,  990,  989,  989,  989,  989,  989,  989,  989,  988,  988,
		 988,  988,  988,  987,  987,  987,  987,  987,  986,  986,  986,  986,  985,  985,  985,  984,
		 984,  984,  984,  983,  983,  983,  982,  982,  982,  981,  981,  981,  980,  980,  980,  979,
		 979,  979,  978,  978,  978,  977,  977,  976,  976,  976,  975,  975,  975,  974,  974,  973,
		 973,  973,  972,  972,  972,  971,  971,  970,  970,  970,  969,  969,  969,  968,  968,  967,
		 967,  967,  966,  966,  966,  965,  965,  965,  964,  964,  964,  963,  963,  963,  962,  962,
		 962,  961,  961,  961,  960,  960,  960,  959,  959,  959,  959,  958,  958,  958,  957,  957,
		 957,  957,  956,  956,  956,  956,  956,  955,  955,  955,  955,  955,  954,  954,  954,  954,
		 954,  954,  953,  953,  953,  953,  953,  953,  953,  953,  953,  952,  952,  952,  952,  952,
		 952,  952,  952,  952,  952,  952,  952,  952,  952,  952,  952,  952,  952,  952,  952,  953,
		 953,  953,  953,  953,  953,  953,  953,  954,  954,  954,  954,  954,  955,  955,  955,  955,
		 956,  956,  956,  956,  957,  957,  957,  957,  958,  958,  958,  959,  959,  959,  960,  960,
		 960,  961,  961,  961,  962,  962,  963,  963,  963,  964,  964,  965,  965,  965,  966,  966,
		 967,  967,  968,  968,  968,  969,  969,  970,  970,  971,  971,  972,  972,  972,  973,  973,
		 974,  974,  975,  975,  976,  976,  977,  977,  978,  978,  978,  979,  979,  980,  980,  981,
		 981,  982,  982,  983,  983,  984,  984,  984,  985,  985,  986,  986,  987,  987,  988,  988,
		 988,  989,  989,  990,  990,  991,  991,  991,  992,  992,  993,  993,  994,  994,  994,  995,
		 995,  996,  996,  996,  997,  997,  997,  998,  998,  999,  999,  999, 1000, 1000, 1000, 1001,
		1001, 1002, 1002, 1002, 1003, 1003, 1003, 1004, 1004, 1004, 1005, 1005, 1005, 1006, 1006, 1006,
		1007, 1007, 1007, 1008, 1008, 1008, 1009, 1009, 1009, 1010, 1010, 1010, 1011, 1011, 1011, 1011,
		1012, 1012, 1012, 1013, 1013, 1013, 1014, 1014, 1014, 1014, 1015, 1015, 1015, 1016, 1016, 1016,
		1016, 1017, 1017, 1017, 1017, 1018, 1018, 1018, 1018, 1019, 1019, 1019, 1019, 1020, 1020, 1020,
		1020, 1021, 1021, 1021, 1021, 1022, 1022, 1022, 1022, 1022, 1023, 1023, 1023, 1023, 1024, 1024,
		1024, 1024, 1024, 1025, 1025, 1025, 1025, 1025, 1026, 1026, 1026, 1026, 1026, 1027, 1027, 1027,
		1027, 1027, 1027, 1028, 1028, 1028, 1028, 1028, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1030,
		1030, 1030, 1030, 1030, 1030, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1032, 1032, 1032, 1032,
		1032, 1032, 1032, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1034, 1034, 1034, 1034,
		1034, 1034, 1034, 1034, 1034, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1036,
		1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1037, 1037, 1037, 1037, 1037,
		1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1038, 1038, 1038, 1038,
		1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,
		1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
		1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
		1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1038, 1038,
		1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038,
		1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1037, 1037, 1037,
		1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
		1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
		1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1034, 1034,
		1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1033, 1033, 1033, 1033, 1033, 1033,
		1033, 1033, 1033, 1033, 1033, 1033, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
		1032, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1030, 1030, 1030, 1030,
		1030, 1030, 1030, 1030, 1030, 1030, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
		1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1027, 1027, 1027, 1027, 1027, 1027,
		1027, 1027, 1027, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1025, 1025, 1025,
		1025, 1025, 1025, 1025, 1025, 1025, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
	};

	const kuint16 gGamma_Tbl[ImR2yCtrl_TABLE_MAX_GAMMA] = {
		  0,   1,   3,   4,   5,   7,   8,   9,  10,  12,  13,  14,  15,  16,  17,  18,
		 20,  21,  21,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,
		 36,  37,  38,  38,  39,  40,  41,  42,  43,  44,  45,  46,  46,  47,  48,  49,
		 50,  51,  51,  52,  53,  54,  54,  55,  56,  57,  57,  58,  59,  60,  61,  61,
		 62,  63,  63,  64,  65,  66,  66,  67,  68,  68,  69,  70,  70,  71,  72,  73,
		 73,  74,  74,  75,  76,  76,  77,  77,  78,  79,  79,  80,  81,  81,  82,  82,
		 83,  84,  84,  85,  85,  86,  87,  87,  88,  88,  89,  89,  90,  91,  91,  92,
		 92,  93,  93,  94,  94,  95,  95,  96,  97,  97,  98,  98,  99,  99, 100, 100,
		101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 108, 108,
		109, 109, 110, 110, 111, 111, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116,
		116, 116, 117, 117, 118, 118, 119, 119, 120, 120, 120, 121, 121, 122, 122, 122,
		123, 123, 124, 124, 125, 125, 125, 126, 126, 127, 127, 127, 128, 128, 129, 129,
		129, 130, 130, 131, 131, 131, 132, 132, 132, 133, 133, 134, 134, 134, 135, 135,
		135, 136, 136, 137, 137, 137, 138, 138, 138, 139, 139, 139, 140, 140, 141, 141,
		141, 142, 142, 142, 143, 143, 143, 144, 144, 144, 145, 145, 145, 146, 146, 146,
		147, 147, 147, 148, 148, 148, 149, 149, 149, 150, 150, 150, 151, 151, 151, 152,
		152, 152, 153, 153, 153, 154, 154, 154, 154, 155, 155, 155, 156, 156, 156, 157,
		157, 157, 157, 158, 158, 158, 159, 159, 159, 160, 160, 160, 160, 161, 161, 161,
		162, 162, 162, 162, 163, 163, 163, 164, 164, 164, 164, 165, 165, 165, 166, 166,
		166, 166, 167, 167, 167, 167, 168, 168, 168, 168, 169, 169, 169, 170, 170, 170,
		170, 171, 171, 171, 171, 172, 172, 172, 172, 173, 173, 173, 173, 174, 174, 174,
		174, 175, 175, 175, 175, 176, 176, 176, 176, 177, 177, 177, 177, 178, 178, 178,
		178, 179, 179, 179, 179, 180, 180, 180, 180, 180, 181, 181, 181, 181, 182, 182,
		182, 182, 183, 183, 183, 183, 184, 184, 184, 184, 184, 185, 185, 185, 185, 186,
		186, 186, 186, 186, 187, 187, 187, 187, 188, 188, 188, 188, 188, 189, 189, 189,
		189, 189, 190, 190, 190, 190, 190, 191, 191, 191, 191, 191, 192, 192, 192, 192,
		192, 193, 193, 193, 193, 194, 194, 194, 194, 194, 194, 195, 195, 195, 195, 195,
		196, 196, 196, 196, 196, 197, 197, 197, 197, 197, 198, 198, 198, 198, 198, 199,
		199, 199, 199, 199, 199, 200, 200, 200, 200, 200, 201, 201, 201, 201, 201, 201,
		202, 202, 202, 202, 202, 203, 203, 203, 203, 203, 203, 204, 204, 204, 204, 204,
		204, 205, 205, 205, 205, 205, 206, 206, 206, 206, 206, 206, 207, 207, 207, 207,
		207, 207, 208, 208, 208, 208, 208, 208, 209, 209, 209, 209, 209, 209, 209, 210,
		210, 210, 210, 210, 210, 211, 211, 211, 211, 211, 211, 211, 212, 212, 212, 212,
		212, 212, 213, 213, 213, 213, 213, 213, 213, 214, 214, 214, 214, 214, 214, 215,
		215, 215, 215, 215, 215, 215, 216, 216, 216, 216, 216, 216, 216, 217, 217, 217,
		217, 217, 217, 217, 218, 218, 218, 218, 218, 218, 218, 219, 219, 219, 219, 219,
		219, 219, 219, 220, 220, 220, 220, 220, 220, 220, 221, 221, 221, 221, 221, 221,
		221, 222, 222, 222, 222, 222, 222, 222, 222, 223, 223, 223, 223, 223, 223, 223,
		223, 224, 224, 224, 224, 224, 224, 224, 224, 225, 225, 225, 225, 225, 225, 225,
		225, 226, 226, 226, 226, 226, 226, 226, 226, 226, 227, 227, 227, 227, 227, 227,
		227, 227, 228, 228, 228, 228, 228, 228, 228, 228, 228, 229, 229, 229, 229, 229,
		229, 229, 229, 229, 230, 230, 230, 230, 230, 230, 230, 230, 230, 231, 231, 231,
		231, 231, 231, 231, 231, 231, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
		233, 233, 233, 233, 233, 233, 233, 233, 233, 234, 234, 234, 234, 234, 234, 234,
		234, 234, 234, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 236, 236, 236,
		236, 236, 236, 236, 236, 236, 236, 236, 237, 237, 237, 237, 237, 237, 237, 237,
		237, 237, 237, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 239, 239,
		239, 239, 239, 239, 239, 239, 239, 239, 239, 240, 240, 240, 240, 240, 240, 240,
		240, 240, 240, 240, 240, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
		241, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 243, 243,
		243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 244, 244, 244, 244, 244,
		244, 244, 244, 244, 244, 244, 244, 244, 245, 245, 245, 245, 245, 245, 245, 245,
		245, 245, 245, 245, 245, 245, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
		246, 246, 246, 246, 246, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
		247, 247, 247, 247, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
		248, 248, 248, 248, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
		249, 249, 249, 249, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
		250, 250, 250, 250, 250, 250, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
		251, 251, 251, 251, 251, 251, 251, 251, 251, 252, 252, 252, 252, 252, 252, 252,
		252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 253, 253, 253, 253,
		253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253,
		253, 253, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
		254, 254, 254, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255,
		255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	};

	const ULLONG gGamma_Diff_Tbl[ImR2yCtrl_TABLE_MAX_GAMMA] = {
		  0,   1,   3,   4,   5,   7,   8,   9,  10,  12,  13,  14,  15,  16,  17,  18,
		 20,  21,  21,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,
		 36,  37,  38,  38,  39,  40,  41,  42,  43,  44,  45,  46,  46,  47,  48,  49,
		 50,  51,  51,  52,  53,  54,  54,  55,  56,  57,  57,  58,  59,  60,  61,  61,
		 62,  63,  63,  64,  65,  66,  66,  67,  68,  68,  69,  70,  70,  71,  72,  73,
		 73,  74,  74,  75,  76,  76,  77,  77,  78,  79,  79,  80,  81,  81,  82,  82,
		 83,  84,  84,  85,  85,  86,  87,  87,  88,  88,  89,  89,  90,  91,  91,  92,
		 92,  93,  93,  94,  94,  95,  95,  96,  97,  97,  98,  98,  99,  99, 100, 100,
		101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 108, 108,
		109, 109, 110, 110, 111, 111, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116,
		116, 116, 117, 117, 118, 118, 119, 119, 120, 120, 120, 121, 121, 122, 122, 122,
		123, 123, 124, 124, 125, 125, 125, 126, 126, 127, 127, 127, 128, 128, 129, 129,
		129, 130, 130, 131, 131, 131, 132, 132, 132, 133, 133, 134, 134, 134, 135, 135,
		135, 136, 136, 137, 137, 137, 138, 138, 138, 139, 139, 139, 140, 140, 141, 141,
		141, 142, 142, 142, 143, 143, 143, 144, 144, 144, 145, 145, 145, 146, 146, 146,
		147, 147, 147, 148, 148, 148, 149, 149, 149, 150, 150, 150, 151, 151, 151, 152,
		152, 152, 153, 153, 153, 154, 154, 154, 154, 155, 155, 155, 156, 156, 156, 157,
		157, 157, 157, 158, 158, 158, 159, 159, 159, 160, 160, 160, 160, 161, 161, 161,
		162, 162, 162, 162, 163, 163, 163, 164, 164, 164, 164, 165, 165, 165, 166, 166,
		166, 166, 167, 167, 167, 167, 168, 168, 168, 168, 169, 169, 169, 170, 170, 170,
		170, 171, 171, 171, 171, 172, 172, 172, 172, 173, 173, 173, 173, 174, 174, 174,
		174, 175, 175, 175, 175, 176, 176, 176, 176, 177, 177, 177, 177, 178, 178, 178,
		178, 179, 179, 179, 179, 180, 180, 180, 180, 180, 181, 181, 181, 181, 182, 182,
		182, 182, 183, 183, 183, 183, 184, 184, 184, 184, 184, 185, 185, 185, 185, 186,
		186, 186, 186, 186, 187, 187, 187, 187, 188, 188, 188, 188, 188, 189, 189, 189,
		189, 189, 190, 190, 190, 190, 190, 191, 191, 191, 191, 191, 192, 192, 192, 192,
		192, 193, 193, 193, 193, 194, 194, 194, 194, 194, 194, 195, 195, 195, 195, 195,
		196, 196, 196, 196, 196, 197, 197, 197, 197, 197, 198, 198, 198, 198, 198, 199,
		199, 199, 199, 199, 199, 200, 200, 200, 200, 200, 201, 201, 201, 201, 201, 201,
		202, 202, 202, 202, 202, 203, 203, 203, 203, 203, 203, 204, 204, 204, 204, 204,
		204, 205, 205, 205, 205, 205, 206, 206, 206, 206, 206, 206, 207, 207, 207, 207,
		207, 207, 208, 208, 208, 208, 208, 208, 209, 209, 209, 209, 209, 209, 209, 210,
		210, 210, 210, 210, 210, 211, 211, 211, 211, 211, 211, 211, 212, 212, 212, 212,
		212, 212, 213, 213, 213, 213, 213, 213, 213, 214, 214, 214, 214, 214, 214, 215,
		215, 215, 215, 215, 215, 215, 216, 216, 216, 216, 216, 216, 216, 217, 217, 217,
		217, 217, 217, 217, 218, 218, 218, 218, 218, 218, 218, 219, 219, 219, 219, 219,
		219, 219, 219, 220, 220, 220, 220, 220, 220, 220, 221, 221, 221, 221, 221, 221,
		221, 222, 222, 222, 222, 222, 222, 222, 222, 223, 223, 223, 223, 223, 223, 223,
		223, 224, 224, 224, 224, 224, 224, 224, 224, 225, 225, 225, 225, 225, 225, 225,
		225, 226, 226, 226, 226, 226, 226, 226, 226, 226, 227, 227, 227, 227, 227, 227,
		227, 227, 228, 228, 228, 228, 228, 228, 228, 228, 228, 229, 229, 229, 229, 229,
		229, 229, 229, 229, 230, 230, 230, 230, 230, 230, 230, 230, 230, 231, 231, 231,
		231, 231, 231, 231, 231, 231, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
		233, 233, 233, 233, 233, 233, 233, 233, 233, 234, 234, 234, 234, 234, 234, 234,
		234, 234, 234, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 236, 236, 236,
		236, 236, 236, 236, 236, 236, 236, 236, 237, 237, 237, 237, 237, 237, 237, 237,
		237, 237, 237, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 239, 239,
		239, 239, 239, 239, 239, 239, 239, 239, 239, 240, 240, 240, 240, 240, 240, 240,
		240, 240, 240, 240, 240, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
		241, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 243, 243,
		243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 244, 244, 244, 244, 244,
		244, 244, 244, 244, 244, 244, 244, 244, 245, 245, 245, 245, 245, 245, 245, 245,
		245, 245, 245, 245, 245, 245, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
		246, 246, 246, 246, 246, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
		247, 247, 247, 247, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248,
		248, 248, 248, 248, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
		249, 249, 249, 249, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
		250, 250, 250, 250, 250, 250, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
		251, 251, 251, 251, 251, 251, 251, 251, 251, 252, 252, 252, 252, 252, 252, 252,
		252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 253, 253, 253, 253,
		253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253,
		253, 253, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254,
		254, 254, 254, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255,
		255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	}

	static const kuint16 gHE_SCL_Tbl[ImR2yCtrl_TABLE_MAX_EDGE_SCALE_HI] = {
	// Plus
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
		 206, 206, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 204, 204,
		 204, 204, 204, 204, 204, 204, 204, 204, 204, 203, 203, 203, 203, 203, 203, 203,
		 203, 202, 202, 202, 202, 202, 202, 202, 202, 201, 201, 201, 201, 201, 201, 201,
		 200, 200, 200, 200, 200, 200, 199, 199, 199, 199, 199, 198, 198, 198, 198, 198,
		 198, 197, 197, 197, 197, 197, 196, 196, 196, 196, 195, 195, 195, 195, 195, 194,
		 194, 194, 194, 193, 193, 193, 193, 192, 192, 192, 191, 191, 191, 191, 190, 190,
		 190, 189, 189, 189, 188, 188, 188, 188, 187, 187, 186, 186, 186, 185, 185, 185,
		 184, 184, 184, 183, 183, 182, 182, 182, 181, 181, 180, 180, 179, 179, 179, 178,
		 178, 177, 177, 176, 176, 175, 175, 174, 174, 173, 173, 172, 172, 171, 170, 170,
		 169, 169, 168, 167, 167, 166, 165, 165, 164, 163, 163, 162, 161, 160, 160, 159,
		 158, 157, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144,

	// Minus
		 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
		 142, 143, 144, 145, 145, 146, 147, 148, 148, 149, 150, 150, 151, 152, 152, 153,
		 153, 154, 155, 155, 156, 156, 157, 157, 158, 159, 159, 160, 160, 161, 161, 162,
		 162, 162, 163, 163, 164, 164, 165, 165, 166, 166, 166, 167, 167, 168, 168, 168,
		 169, 169, 170, 170, 170, 171, 171, 171, 172, 172, 172, 173, 173, 173, 174, 174,
		 174, 175, 175, 175, 175, 176, 176, 176, 177, 177, 177, 177, 178, 178, 178, 178,
		 179, 179, 179, 179, 180, 180, 180, 180, 181, 181, 181, 181, 181, 182, 182, 182,
		 182, 182, 183, 183, 183, 183, 183, 184, 184, 184, 184, 184, 184, 185, 185, 185,
		 185, 185, 185, 186, 186, 186, 186, 186, 186, 186, 187, 187, 187, 187, 187, 187,
		 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 189, 189, 189, 189, 189, 189,
		 189, 189, 189, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
		 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
		 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
		 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
		 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
		 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	};

	static const kuint16 gHE_STEP_Tbl[ImR2yCtrl_TABLE_MAX_EDGE_TC_HI] = {
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
		 206, 206, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 204, 204,
		 204, 204, 204, 204, 204, 204, 204, 204, 204, 203, 203, 203, 203, 203, 203, 203,
		 203, 202, 202, 202, 202, 202, 202, 202, 202, 201, 201, 201, 201, 201, 201, 201,
		 200, 200, 200, 200, 200, 200, 199, 199, 199, 199, 199, 198, 198, 198, 198, 198,
		 198, 197, 197, 197, 197, 197, 196, 196, 196, 196, 195, 195, 195, 195, 195, 194,
		 194, 194, 194, 193, 193, 193, 193, 192, 192, 192, 191, 191, 191, 191, 190, 190,
		 190, 189, 189, 189, 188, 188, 188, 188, 187, 187, 186, 186, 186, 185, 185, 185,
		 184, 184, 184, 183, 183, 182, 182, 182, 181, 181, 180, 180, 179, 179, 179, 178,
		 178, 177, 177, 176, 176, 175, 175, 174, 174, 173, 173, 172, 172, 171, 170, 170,
		 169, 169, 168, 167, 167, 166, 165, 165, 164, 163, 163, 162, 161, 160, 160, 159,
		 158, 157, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144,
	};

	static const kuint16 gME_SCL_Tbl[ImR2yCtrl_TABLE_MAX_EDGE_SCALE_MEDIUM] = {
	// Plus
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
		 206, 206, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 204, 204,
		 204, 204, 204, 204, 204, 204, 204, 204, 204, 203, 203, 203, 203, 203, 203, 203,
		 203, 202, 202, 202, 202, 202, 202, 202, 202, 201, 201, 201, 201, 201, 201, 201,
		 200, 200, 200, 200, 200, 200, 199, 199, 199, 199, 199, 198, 198, 198, 198, 198,
		 198, 197, 197, 197, 197, 197, 196, 196, 196, 196, 195, 195, 195, 195, 195, 194,
		 194, 194, 194, 193, 193, 193, 193, 192, 192, 192, 191, 191, 191, 191, 190, 190,
		 190, 189, 189, 189, 188, 188, 188, 188, 187, 187, 186, 186, 186, 185, 185, 185,
		 184, 184, 184, 183, 183, 182, 182, 182, 181, 181, 180, 180, 179, 179, 179, 178,
		 178, 177, 177, 176, 176, 175, 175, 174, 174, 173, 173, 172, 172, 171, 170, 170,
		 169, 169, 168, 167, 167, 166, 165, 165, 164, 163, 163, 162, 161, 160, 160, 159,
		 158, 157, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144,

	// Minus
		 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
		 142, 143, 144, 145, 145, 146, 147, 148, 148, 149, 150, 150, 151, 152, 152, 153,
		 153, 154, 155, 155, 156, 156, 157, 157, 158, 159, 159, 160, 160, 161, 161, 162,
		 162, 162, 163, 163, 164, 164, 165, 165, 166, 166, 166, 167, 167, 168, 168, 168,
		 169, 169, 170, 170, 170, 171, 171, 171, 172, 172, 172, 173, 173, 173, 174, 174,
		 174, 175, 175, 175, 175, 176, 176, 176, 177, 177, 177, 177, 178, 178, 178, 178,
		 179, 179, 179, 179, 180, 180, 180, 180, 181, 181, 181, 181, 181, 182, 182, 182,
		 182, 182, 183, 183, 183, 183, 183, 184, 184, 184, 184, 184, 184, 185, 185, 185,
		 185, 185, 185, 186, 186, 186, 186, 186, 186, 186, 187, 187, 187, 187, 187, 187,
		 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 189, 189, 189, 189, 189, 189,
		 189, 189, 189, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
		 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
		 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
		 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
		 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
		 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	};

	static const kuint16 gME_STEP_Tbl[ImR2yCtrl_TABLE_MAX_EDGE_TC_MEDIUM] = {
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
		 206, 206, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 204, 204,
		 204, 204, 204, 204, 204, 204, 204, 204, 204, 203, 203, 203, 203, 203, 203, 203,
		 203, 202, 202, 202, 202, 202, 202, 202, 202, 201, 201, 201, 201, 201, 201, 201,
		 200, 200, 200, 200, 200, 200, 199, 199, 199, 199, 199, 198, 198, 198, 198, 198,
		 198, 197, 197, 197, 197, 197, 196, 196, 196, 196, 195, 195, 195, 195, 195, 194,
		 194, 194, 194, 193, 193, 193, 193, 192, 192, 192, 191, 191, 191, 191, 190, 190,
		 190, 189, 189, 189, 188, 188, 188, 188, 187, 187, 186, 186, 186, 185, 185, 185,
		 184, 184, 184, 183, 183, 182, 182, 182, 181, 181, 180, 180, 179, 179, 179, 178,
		 178, 177, 177, 176, 176, 175, 175, 174, 174, 173, 173, 172, 172, 171, 170, 170,
		 169, 169, 168, 167, 167, 166, 165, 165, 164, 163, 163, 162, 161, 160, 160, 159,
		 158, 157, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144,
	};

	static const kuint16 gLE_SCL_Tbl[ImR2yCtrl_TABLE_MAX_EDGE_SCALE_LO] = {
	// Plus
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
		 206, 206, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 204, 204,
		 204, 204, 204, 204, 204, 204, 204, 204, 204, 203, 203, 203, 203, 203, 203, 203,
		 203, 202, 202, 202, 202, 202, 202, 202, 202, 201, 201, 201, 201, 201, 201, 201,
		 200, 200, 200, 200, 200, 200, 199, 199, 199, 199, 199, 198, 198, 198, 198, 198,
		 198, 197, 197, 197, 197, 197, 196, 196, 196, 196, 195, 195, 195, 195, 195, 194,
		 194, 194, 194, 193, 193, 193, 193, 192, 192, 192, 191, 191, 191, 191, 190, 190,
		 190, 189, 189, 189, 188, 188, 188, 188, 187, 187, 186, 186, 186, 185, 185, 185,
		 184, 184, 184, 183, 183, 182, 182, 182, 181, 181, 180, 180, 179, 179, 179, 178,
		 178, 177, 177, 176, 176, 175, 175, 174, 174, 173, 173, 172, 172, 171, 170, 170,
		 169, 169, 168, 167, 167, 166, 165, 165, 164, 163, 163, 162, 161, 160, 160, 159,
		 158, 157, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144,

	// Minus
		 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
		 142, 143, 144, 145, 145, 146, 147, 148, 148, 149, 150, 150, 151, 152, 152, 153,
		 153, 154, 155, 155, 156, 156, 157, 157, 158, 159, 159, 160, 160, 161, 161, 162,
		 162, 162, 163, 163, 164, 164, 165, 165, 166, 166, 166, 167, 167, 168, 168, 168,
		 169, 169, 170, 170, 170, 171, 171, 171, 172, 172, 172, 173, 173, 173, 174, 174,
		 174, 175, 175, 175, 175, 176, 176, 176, 177, 177, 177, 177, 178, 178, 178, 178,
		 179, 179, 179, 179, 180, 180, 180, 180, 181, 181, 181, 181, 181, 182, 182, 182,
		 182, 182, 183, 183, 183, 183, 183, 184, 184, 184, 184, 184, 184, 185, 185, 185,
		 185, 185, 185, 186, 186, 186, 186, 186, 186, 186, 187, 187, 187, 187, 187, 187,
		 187, 188, 188, 188, 188, 188, 188, 188, 188, 188, 189, 189, 189, 189, 189, 189,
		 189, 189, 189, 189, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190,
		 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191,
		 191, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
		 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
		 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
		 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	};

	static const kuint16 gLE_STEP_Tbl[ImR2yCtrl_TABLE_MAX_EDGE_TC_LO] = {
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
		 207, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
		 206, 206, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 204, 204,
		 204, 204, 204, 204, 204, 204, 204, 204, 204, 203, 203, 203, 203, 203, 203, 203,
		 203, 202, 202, 202, 202, 202, 202, 202, 202, 201, 201, 201, 201, 201, 201, 201,
		 200, 200, 200, 200, 200, 200, 199, 199, 199, 199, 199, 198, 198, 198, 198, 198,
		 198, 197, 197, 197, 197, 197, 196, 196, 196, 196, 195, 195, 195, 195, 195, 194,
		 194, 194, 194, 193, 193, 193, 193, 192, 192, 192, 191, 191, 191, 191, 190, 190,
		 190, 189, 189, 189, 188, 188, 188, 188, 187, 187, 186, 186, 186, 185, 185, 185,
		 184, 184, 184, 183, 183, 182, 182, 182, 181, 181, 180, 180, 179, 179, 179, 178,
		 178, 177, 177, 176, 176, 175, 175, 174, 174, 173, 173, 172, 172, 171, 170, 170,
		 169, 169, 168, 167, 167, 166, 165, 165, 164, 163, 163, 162, 161, 160, 160, 159,
		 158, 157, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144,
	};

	static const kuint16 gMAP_SCL_Tbl[12][16] = {
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },
		{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },
	};

	r2y_ctrl_ofs.R = 0;
	r2y_ctrl_ofs.G = 0;
	r2y_ctrl_ofs.B = 0;

	im_r2y_set_offset( ImR2yCtrl_PIPE1, &r2y_ctrl_ofs );

	// MCYC00~MCYC22
	r2y_ctrl_multi_axis.cycCoeff[0] = 0x4D;
	r2y_ctrl_multi_axis.cycCoeff[1] = 0x96;
	r2y_ctrl_multi_axis.cycCoeff[2] = 0x1D;
	r2y_ctrl_multi_axis.cycCoeff[3] = 0x1D5;
	r2y_ctrl_multi_axis.cycCoeff[4] = 0x1AB;
	r2y_ctrl_multi_axis.cycCoeff[5] = 0x80;
	r2y_ctrl_multi_axis.cycCoeff[6] = 0x80;
	r2y_ctrl_multi_axis.cycCoeff[7] = 0x195;
	r2y_ctrl_multi_axis.cycCoeff[8] = 0x1EB;

	// MCB1A~MCB4D
	memset( r2y_ctrl_multi_axis.boundary, 0, 32 );

	// MCID1A~MCID4E
	for (loop_cnt = 0; loop_cnt < 4; loop_cnt++) {
		for (loop_cnt2 = 0; loop_cnt2 < 5; loop_cnt2++) {
			r2y_ctrl_multi_axis.areaIndex[loop_cnt][loop_cnt2] = 0;
		}
	}

	// MCKA_0_00~MCKA_4_22
	r2y_ctrl_multi_axis.areaAK[0][0][0] = 1024;
	r2y_ctrl_multi_axis.areaAK[0][0][1] = 0;
	r2y_ctrl_multi_axis.areaAK[0][0][2] = 0;
	r2y_ctrl_multi_axis.areaAK[0][1][0] = 1024;
	r2y_ctrl_multi_axis.areaAK[0][1][1] = 0;
	r2y_ctrl_multi_axis.areaAK[0][1][2] = 0;
	r2y_ctrl_multi_axis.areaAK[0][2][0] = 1024;
	r2y_ctrl_multi_axis.areaAK[0][2][1] = 0;
	r2y_ctrl_multi_axis.areaAK[0][2][2] = 0;
	r2y_ctrl_multi_axis.areaAK[1][0][0] = 1024;
	r2y_ctrl_multi_axis.areaAK[1][0][1] = 0;
	r2y_ctrl_multi_axis.areaAK[1][0][2] = 0;
	r2y_ctrl_multi_axis.areaAK[1][1][0] = 1024;
	r2y_ctrl_multi_axis.areaAK[1][1][1] = 0;
	r2y_ctrl_multi_axis.areaAK[1][1][2] = 0;
	r2y_ctrl_multi_axis.areaAK[1][2][0] = 1024;
	r2y_ctrl_multi_axis.areaAK[1][2][1] = 0;
	r2y_ctrl_multi_axis.areaAK[1][2][2] = 0;
	r2y_ctrl_multi_axis.areaAK[2][0][0] = 1024;
	r2y_ctrl_multi_axis.areaAK[2][0][1] = 0;
	r2y_ctrl_multi_axis.areaAK[2][0][2] = 0;
	r2y_ctrl_multi_axis.areaAK[2][1][0] = 1024;
	r2y_ctrl_multi_axis.areaAK[2][1][1] = 0;
	r2y_ctrl_multi_axis.areaAK[2][1][2] = 0;
	r2y_ctrl_multi_axis.areaAK[2][2][0] = 1024;
	r2y_ctrl_multi_axis.areaAK[2][2][1] = 0;
	r2y_ctrl_multi_axis.areaAK[2][2][2] = 0;
	r2y_ctrl_multi_axis.areaAK[3][0][0] = 1024;
	r2y_ctrl_multi_axis.areaAK[3][0][1] = 0;
	r2y_ctrl_multi_axis.areaAK[3][0][2] = 0;
	r2y_ctrl_multi_axis.areaAK[3][1][0] = 1024;
	r2y_ctrl_multi_axis.areaAK[3][1][1] = 0;
	r2y_ctrl_multi_axis.areaAK[3][1][2] = 0;
	r2y_ctrl_multi_axis.areaAK[3][2][0] = 1024;
	r2y_ctrl_multi_axis.areaAK[3][2][1] = 0;
	r2y_ctrl_multi_axis.areaAK[3][2][2] = 0;
	r2y_ctrl_multi_axis.areaAK[4][0][0] = 1024;
	r2y_ctrl_multi_axis.areaAK[4][0][1] = 0;
	r2y_ctrl_multi_axis.areaAK[4][0][2] = 0;
	r2y_ctrl_multi_axis.areaAK[4][1][0] = 1024;
	r2y_ctrl_multi_axis.areaAK[4][1][1] = 0;
	r2y_ctrl_multi_axis.areaAK[4][1][2] = 0;
	r2y_ctrl_multi_axis.areaAK[4][2][0] = 1024;
	r2y_ctrl_multi_axis.areaAK[4][2][1] = 0;
	r2y_ctrl_multi_axis.areaAK[4][2][2] = 0;

	// MCLA_0_00~MCLA_4_21
	r2y_ctrl_multi_axis.areaAL[0][0][0] = 1024;
	r2y_ctrl_multi_axis.areaAL[0][0][1] = 1024;
	r2y_ctrl_multi_axis.areaAL[0][1][0] = 1024;
	r2y_ctrl_multi_axis.areaAL[0][1][1] = 1024;
	r2y_ctrl_multi_axis.areaAL[0][2][0] = 1024;
	r2y_ctrl_multi_axis.areaAL[0][2][1] = 1024;
	r2y_ctrl_multi_axis.areaAL[1][0][0] = 1024;
	r2y_ctrl_multi_axis.areaAL[1][0][1] = 1024;
	r2y_ctrl_multi_axis.areaAL[1][1][0] = 1024;
	r2y_ctrl_multi_axis.areaAL[1][1][1] = 1024;
	r2y_ctrl_multi_axis.areaAL[1][2][0] = 1024;
	r2y_ctrl_multi_axis.areaAL[1][2][1] = 1024;
	r2y_ctrl_multi_axis.areaAL[2][0][0] = 1024;
	r2y_ctrl_multi_axis.areaAL[2][0][1] = 1024;
	r2y_ctrl_multi_axis.areaAL[2][1][0] = 1024;
	r2y_ctrl_multi_axis.areaAL[2][1][1] = 1024;
	r2y_ctrl_multi_axis.areaAL[2][2][0] = 1024;
	r2y_ctrl_multi_axis.areaAL[2][2][1] = 1024;
	r2y_ctrl_multi_axis.areaAL[3][0][0] = 1024;
	r2y_ctrl_multi_axis.areaAL[3][0][1] = 1024;
	r2y_ctrl_multi_axis.areaAL[3][1][0] = 1024;
	r2y_ctrl_multi_axis.areaAL[3][1][1] = 1024;
	r2y_ctrl_multi_axis.areaAL[3][2][0] = 1024;
	r2y_ctrl_multi_axis.areaAL[3][2][1] = 1024;
	r2y_ctrl_multi_axis.areaAL[4][0][0] = 1024;
	r2y_ctrl_multi_axis.areaAL[4][0][1] = 1024;
	r2y_ctrl_multi_axis.areaAL[4][1][0] = 1024;
	r2y_ctrl_multi_axis.areaAL[4][1][1] = 1024;
	r2y_ctrl_multi_axis.areaAL[4][2][0] = 1024;
	r2y_ctrl_multi_axis.areaAL[4][2][1] = 1024;

	// MCKB_0_00~MCKB_4_22, MCLB_0_00~MCKB_4_21
	memcpy( r2y_ctrl_multi_axis.areaBK, r2y_ctrl_multi_axis.areaAK, sizeof(r2y_ctrl_multi_axis.areaAK) );
	memcpy( r2y_ctrl_multi_axis.areaBL, r2y_ctrl_multi_axis.areaAL, sizeof(r2y_ctrl_multi_axis.areaAL) );

	// MCKC_0_00~MCKC_4_22, MCLC_0_00~MCKC_4_21
	memcpy( r2y_ctrl_multi_axis.areaCK, r2y_ctrl_multi_axis.areaAK, sizeof(r2y_ctrl_multi_axis.areaAK) );
	memcpy( r2y_ctrl_multi_axis.areaCL, r2y_ctrl_multi_axis.areaAL, sizeof(r2y_ctrl_multi_axis.areaAL) );

	// MCKD_0_00~MCKD_4_22, MCLD_0_00~MCKD_4_21
	memcpy( r2y_ctrl_multi_axis.areaDK, r2y_ctrl_multi_axis.areaAK, sizeof(r2y_ctrl_multi_axis.areaAK) );
	memcpy( r2y_ctrl_multi_axis.areaDL, r2y_ctrl_multi_axis.areaAL, sizeof(r2y_ctrl_multi_axis.areaAL) );

	// MCKE_0_00~MCKE_4_22, MCLE_0_00~MCKE_4_21
	memcpy( r2y_ctrl_multi_axis.areaEK, r2y_ctrl_multi_axis.areaAK, sizeof(r2y_ctrl_multi_axis.areaAK) );
	memcpy( r2y_ctrl_multi_axis.areaEL, r2y_ctrl_multi_axis.areaAL, sizeof(r2y_ctrl_multi_axis.areaAL) );

	// MCKF_0_00~MCKF_4_22, MCLF_0_00~MCKF_4_21
	memcpy( r2y_ctrl_multi_axis.areaFK, r2y_ctrl_multi_axis.areaAK, sizeof(r2y_ctrl_multi_axis.areaAK) );
	memcpy( r2y_ctrl_multi_axis.areaFL, r2y_ctrl_multi_axis.areaAL, sizeof(r2y_ctrl_multi_axis.areaAL) );

	// MCKG_0_00~MCKG_4_22, MCLG_0_00~MCKG_4_21
	memcpy( r2y_ctrl_multi_axis.areaGK, r2y_ctrl_multi_axis.areaAK, sizeof(r2y_ctrl_multi_axis.areaAK) );
	memcpy( r2y_ctrl_multi_axis.areaGL, r2y_ctrl_multi_axis.areaAL, sizeof(r2y_ctrl_multi_axis.areaAL) );

	// MCKH_0_00~22, MCLH_0_00~21
	memcpy( r2y_ctrl_multi_axis.areaHK, r2y_ctrl_multi_axis.areaAK, sizeof(r2y_ctrl_multi_axis.areaAK) );
	memcpy( r2y_ctrl_multi_axis.areaHL, r2y_ctrl_multi_axis.areaAL, sizeof(r2y_ctrl_multi_axis.areaAL) );

	// MCKI_0_00~22, MCLI_0_00~21
	memcpy( r2y_ctrl_multi_axis.areaIK, r2y_ctrl_multi_axis.areaAK, sizeof(r2y_ctrl_multi_axis.areaAK) );
	memcpy( r2y_ctrl_multi_axis.areaIL, r2y_ctrl_multi_axis.areaAL, sizeof(r2y_ctrl_multi_axis.areaAL) );

	// MCKJ_0_00~22, MCLJ_0_00~21
	memcpy( r2y_ctrl_multi_axis.areaJK, r2y_ctrl_multi_axis.areaAK, sizeof(r2y_ctrl_multi_axis.areaAK) );
	memcpy( r2y_ctrl_multi_axis.areaJL, r2y_ctrl_multi_axis.areaAL, sizeof(r2y_ctrl_multi_axis.areaAL) );

	// MCKK_0_00~22, MCLK_0_00~21
	memcpy( r2y_ctrl_multi_axis.areaKK, r2y_ctrl_multi_axis.areaAK, sizeof(r2y_ctrl_multi_axis.areaAK) );
	memcpy( r2y_ctrl_multi_axis.areaKL, r2y_ctrl_multi_axis.areaAL, sizeof(r2y_ctrl_multi_axis.areaAL) );

	// MCKL_0_00~22, MCLL_0_00~21
	memcpy( r2y_ctrl_multi_axis.areaLK, r2y_ctrl_multi_axis.areaAK, sizeof(r2y_ctrl_multi_axis.areaAK) );
	memcpy( r2y_ctrl_multi_axis.areaLL, r2y_ctrl_multi_axis.areaAL, sizeof(r2y_ctrl_multi_axis.areaAL) );

	// MCYCBALP.MCYCBALP
	r2y_ctrl_multi_axis.cycAlphaBlend = 0;

	// MCYCBOF
	r2y_ctrl_multi_axis.cyc_blend_offset[0] = 0;
	r2y_ctrl_multi_axis.cyc_blend_offset[1] = 0;
	r2y_ctrl_multi_axis.cyc_blend_offset[2] = 0;

	// MCYCBGA
	r2y_ctrl_multi_axis.cycBlendGain[0] = 0;
	r2y_ctrl_multi_axis.cycBlendGain[1] = 0;
	r2y_ctrl_multi_axis.cycBlendGain[2] = 0;

	// MCYCBGA
	r2y_ctrl_multi_axis.cycBlendBorder[0] = 0;
	r2y_ctrl_multi_axis.cycBlendBorder[1] = 0;

	im_r2y_ctrl4_multi_axis( ImR2yCtrl_PIPE1, &r2y_ctrl_multi_axis );

	// BTC
	r2y_ctrl_btc_offset.R = 0;
	r2y_ctrl_btc_offset.G = 0;
	r2y_ctrl_btc_offset.B = 0;
	r2y_ctrl_btc_offset.Yb = 0;
	r2y_ctrl_btc_tct.tctEnable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_btc_tct.startX = 0;
	r2y_ctrl_btc_tct.startY = 0;
	r2y_ctrl_btc_tct.blockHsiz = 8;
	r2y_ctrl_btc_tct.blockVsiz = 8;
	r2y_ctrl_btc_tct.blockHnum = 2;
	r2y_ctrl_btc_tct.blockVnum = 2;
	r2y_ctrl_btc_tchs.histEnable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_btc_tchs.samplingHcyc = ImR2yCtrl_HIST_HCYC_4;
	r2y_ctrl_btc_tchs.samplingVcyc = ImR2yCtrl_HIST_VCYC_1;
	r2y_ctrl_btc_tchs.histogramMode = ImR2yCtrl_HIST_BIT_WIDTH_7_0;
	r2y_ctrl_btc_tchs.histMinusMode = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_btc_tchs.tchsWindow.imgTop = 0;
	r2y_ctrl_btc_tchs.tchsWindow.imgLeft = 0;
	r2y_ctrl_btc_tchs.tchsWindow.imgWidth = 2;
	r2y_ctrl_btc_tchs.tchsWindow.imgLines = 1;

	im_r2y_ctrl2_before_tone_offset( ImR2yCtrl_PIPE1, &r2y_ctrl_btc_offset );
	im_r2y_ctrl2_before_tone_tct( ImR2yCtrl_PIPE1, &r2y_ctrl_btc_tct );
	im_r2y_ctrl2_before_tone_tchs( ImR2yCtrl_PIPE1, &r2y_ctrl_btc_tchs );

	r2y_ctrl_tone.tone_enable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_tone.tone_y_enable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_tone.table_blend_enable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_tone.table_resol = ImR2yCtrl_TC_RESOLUTION_1024;
	r2y_ctrl_tone.table_select = 0;
	r2y_ctrl_tone.ytc_out = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_tone.int_bit = 0;
	r2y_ctrl_tone.table_blend_ratio = 0;
	r2y_ctrl_tone.yc_matrix[0] = 77;
	r2y_ctrl_tone.yc_matrix[1] = 150;
	r2y_ctrl_tone.yc_matrix[2] = 29;
	r2y_ctrl_tone.table_endp[0] = 0;
	r2y_ctrl_tone.table_endp[1] = 0;
	r2y_ctrl_tone.table_endp[2] = 0;
	r2y_ctrl_tone.table_endp[3] = 0;
	r2y_ctrl_tone.clipPR = 0xFFF;
	r2y_ctrl_tone.clipMR = 0xFFF;
	r2y_ctrl_tone.clipPG = 0xFFF;
	r2y_ctrl_tone.clipMG = 0xFFF;
	r2y_ctrl_tone.clipPB = 0xFFF;
	r2y_ctrl_tone.clipMB = 0xFFF;

	im_r2y_ctrl_tone( ImR2yCtrl_PIPE1, &r2y_ctrl_tone );

	r2y_ctrl_gamma.gammaEnable = ImR2yCtrl_ENABLE_ON;
	r2y_ctrl_gamma.gammaMode = ImR2yCtrl_GAMMA_MODE_12;
	r2y_ctrl_gamma.gammaYbTblSimul = ImR2yCtrl_ENABLE_OFF;

	im_r2y_ctrl2_gamma(im_r2y_ctrl2_new(),  ImR2yCtrl_PIPE1, &r2y_ctrl_gamma );

	r2y_ctrl_ynr.nrMode = 1;
	r2y_ctrl_ynr.blendRatio = 0;
	r2y_ctrl_ynr.offset[0] = 0;
	r2y_ctrl_ynr.offset[1] = 0;
	r2y_ctrl_ynr.offset[2] = 0;
	r2y_ctrl_ynr.offset[3] = 0;
	r2y_ctrl_ynr.gain[0] = 0;
	r2y_ctrl_ynr.gain[1] = 0;
	r2y_ctrl_ynr.gain[2] = 0;
	r2y_ctrl_ynr.gain[3] = 0;
	r2y_ctrl_ynr.border[0] = 0;
	r2y_ctrl_ynr.border[1] = 0;
	r2y_ctrl_ynr.border[2] = 0;

	im_r2y_ctrl2_ynr(im_r2y_ctrl2_new(),  ImR2yCtrl_PIPE1, &r2y_ctrl_ynr );

	r2y_ctrl_edge_cmn.reductionMode = ImR2yCtrl_EGSMT_VERSION1;
	r2y_ctrl_edge_cmn.threshold = 0x10;
	r2y_ctrl_edge_cmn.texture_priority = 0x10;

	im_r2y_edge_noise_reduction(im_r2y_edge_new(),  ImR2yCtrl_PIPE1, &r2y_ctrl_edge_cmn );

	r2y_ctrl_high_edge.edgeEnable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_high_edge.scaleEnable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_high_edge.tableClipSelect = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_high_edge.scaleTableResol = 0;
	r2y_ctrl_high_edge.scaleTableSelect = 0;
	r2y_ctrl_high_edge.gradationTableResol = 0;
	r2y_ctrl_high_edge.gradationTableSelect = 0;
	r2y_ctrl_high_edge.nrLevel = 0;
	r2y_ctrl_high_edge.hpfK[0] = 0x100;
	r2y_ctrl_high_edge.hpfK[1] = 0xC0;
	r2y_ctrl_high_edge.hpfK[2] = 0;
	r2y_ctrl_high_edge.hpfK[3] = 0;
	r2y_ctrl_high_edge.hpfK[4] = 0;
	r2y_ctrl_high_edge.hpfK[5] = 0;
	r2y_ctrl_high_edge.corpOffset[0] = 0;
	r2y_ctrl_high_edge.corpOffset[1] = 0;
	r2y_ctrl_high_edge.corpOffset[2] = 0;
	r2y_ctrl_high_edge.corpOffset[3] = 0;
	r2y_ctrl_high_edge.corpGain[0] = 0;
	r2y_ctrl_high_edge.corpGain[1] = 0;
	r2y_ctrl_high_edge.corpGain[2] = 0;
	r2y_ctrl_high_edge.corpGain[3] = 0;
	r2y_ctrl_high_edge.corpBorder[0] = 0;
	r2y_ctrl_high_edge.corpBorder[1] = 0;
	r2y_ctrl_high_edge.corpBorder[2] = 0;
	r2y_ctrl_high_edge.cormOffset[0] = 0;
	r2y_ctrl_high_edge.cormOffset[1] = 0;
	r2y_ctrl_high_edge.cormOffset[2] = 0;
	r2y_ctrl_high_edge.cormOffset[3] = 0;
	r2y_ctrl_high_edge.cormGain[0] = 0;
	r2y_ctrl_high_edge.cormGain[1] = 0;
	r2y_ctrl_high_edge.cormGain[2] = 0;
	r2y_ctrl_high_edge.cormGain[3] = 0;
	r2y_ctrl_high_edge.cormBorder[0] = 0;
	r2y_ctrl_high_edge.cormBorder[1] = 0;
	r2y_ctrl_high_edge.cormBorder[2] = 0;
	r2y_ctrl_high_edge.supScl = 0x10;
	r2y_ctrl_high_edge.levelClipPOffset[0] = 0;
	r2y_ctrl_high_edge.levelClipPOffset[1] = 0;
	r2y_ctrl_high_edge.levelClipPOffset[2] = 0x1FF;
	r2y_ctrl_high_edge.levelClipPGain[0] = 0;
	r2y_ctrl_high_edge.levelClipPGain[1] = 0;
	r2y_ctrl_high_edge.levelClipPGain[2] = 0;
	r2y_ctrl_high_edge.levelClipPBorder[0] = 0;
	r2y_ctrl_high_edge.levelClipPBorder[1] = 0;
	r2y_ctrl_high_edge.levelClipMOffset[0] = 0;
	r2y_ctrl_high_edge.levelClipMOffset[1] = 0;
	r2y_ctrl_high_edge.levelClipMOffset[2] = 0x1FF;
	r2y_ctrl_high_edge.levelClipMGain[0] = 0;
	r2y_ctrl_high_edge.levelClipMGain[1] = 0;
	r2y_ctrl_high_edge.levelClipMGain[2] = 0;
	r2y_ctrl_high_edge.levelClipMBorder[0] = 0;
	r2y_ctrl_high_edge.levelClipMBorder[1] = 0;

	im_r2y_edge_high_edge(im_r2y_edge_new(),  ImR2yCtrl_PIPE1, &r2y_ctrl_high_edge );

	r2y_ctrl_medium_edge.edgeEnable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_medium_edge.scaleEnable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_medium_edge.tableClipSelect = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_medium_edge.scaleTableResol = 0;
	r2y_ctrl_medium_edge.scaleTableSelect = 0;
	r2y_ctrl_medium_edge.gradationTableResol = 0;
	r2y_ctrl_medium_edge.gradationTableSelect = 0;
	r2y_ctrl_medium_edge.nrLevel = 0;
	r2y_ctrl_medium_edge.hpfK[0] = 0x100;
	r2y_ctrl_medium_edge.hpfK[1] = 0xC0;
	r2y_ctrl_medium_edge.hpfK[2] = 0;
	r2y_ctrl_medium_edge.hpfK[3] = 0;
	r2y_ctrl_medium_edge.hpfK[4] = 0;
	r2y_ctrl_medium_edge.hpfK[5] = 0;
	r2y_ctrl_medium_edge.corpOffset[0] = 0;
	r2y_ctrl_medium_edge.corpOffset[1] = 0;
	r2y_ctrl_medium_edge.corpOffset[2] = 0;
	r2y_ctrl_medium_edge.corpOffset[3] = 0;
	r2y_ctrl_medium_edge.corpGain[0] = 0;
	r2y_ctrl_medium_edge.corpGain[1] = 0;
	r2y_ctrl_medium_edge.corpGain[2] = 0;
	r2y_ctrl_medium_edge.corpGain[3] = 0;
	r2y_ctrl_medium_edge.corpBorder[0] = 0;
	r2y_ctrl_medium_edge.corpBorder[1] = 0;
	r2y_ctrl_medium_edge.corpBorder[2] = 0;
	r2y_ctrl_medium_edge.cormOffset[0] = 0;
	r2y_ctrl_medium_edge.cormOffset[1] = 0;
	r2y_ctrl_medium_edge.cormOffset[2] = 0;
	r2y_ctrl_medium_edge.cormOffset[3] = 0;
	r2y_ctrl_medium_edge.cormGain[0] = 0;
	r2y_ctrl_medium_edge.cormGain[1] = 0;
	r2y_ctrl_medium_edge.cormGain[2] = 0;
	r2y_ctrl_medium_edge.cormGain[3] = 0;
	r2y_ctrl_medium_edge.cormBorder[0] = 0;
	r2y_ctrl_medium_edge.cormBorder[1] = 0;
	r2y_ctrl_medium_edge.cormBorder[2] = 0;
	r2y_ctrl_medium_edge.supScl = 0x10;
	r2y_ctrl_medium_edge.levelClipPOffset[0] = 0;
	r2y_ctrl_medium_edge.levelClipPOffset[1] = 0;
	r2y_ctrl_medium_edge.levelClipPOffset[2] = 0x1FF;
	r2y_ctrl_medium_edge.levelClipPGain[0] = 0;
	r2y_ctrl_medium_edge.levelClipPGain[1] = 0;
	r2y_ctrl_medium_edge.levelClipPGain[2] = 0;
	r2y_ctrl_medium_edge.levelClipPBorder[0] = 0;
	r2y_ctrl_medium_edge.levelClipPBorder[1] = 0;
	r2y_ctrl_medium_edge.levelClipMOffset[0] = 0;
	r2y_ctrl_medium_edge.levelClipMOffset[1] = 0;
	r2y_ctrl_medium_edge.levelClipMOffset[2] = 0x1FF;
	r2y_ctrl_medium_edge.levelClipMGain[0] = 0;
	r2y_ctrl_medium_edge.levelClipMGain[1] = 0;
	r2y_ctrl_medium_edge.levelClipMGain[2] = 0;
	r2y_ctrl_medium_edge.levelClipMBorder[0] = 0;
	r2y_ctrl_medium_edge.levelClipMBorder[1] = 0;

	im_r2y_edge_medium_edge(im_r2y_edge_new(),  ImR2yCtrl_PIPE1, &r2y_ctrl_medium_edge );

	r2y_ctrl_low_edge.edgeEnable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_low_edge.scaleEnable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_low_edge.tableClipSelect = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_low_edge.scaleTableResol = 0;
	r2y_ctrl_low_edge.scaleTableSelect = 0;
	r2y_ctrl_low_edge.gradationTableResol = 0;
	r2y_ctrl_low_edge.gradationTableSelect = 0;
	r2y_ctrl_low_edge.hpfK[0] = 0x100;
	r2y_ctrl_low_edge.hpfK[1] = 0xC0;
	r2y_ctrl_low_edge.hpfK[2] = 0;
	r2y_ctrl_low_edge.hpfK[3] = 0;
	r2y_ctrl_low_edge.hpfK[4] = 0;
	r2y_ctrl_low_edge.hpfK[5] = 0;
	r2y_ctrl_low_edge.hpfK[6] = 0;
	r2y_ctrl_low_edge.hpfK[7] = 0;
	r2y_ctrl_low_edge.hpfK[8] = 0;
	r2y_ctrl_low_edge.hpfK[9] = 0;
	r2y_ctrl_low_edge.corpOffset[0] = 0;
	r2y_ctrl_low_edge.corpOffset[1] = 0;
	r2y_ctrl_low_edge.corpOffset[2] = 0;
	r2y_ctrl_low_edge.corpOffset[3] = 0;
	r2y_ctrl_low_edge.corpGain[0] = 0;
	r2y_ctrl_low_edge.corpGain[1] = 0;
	r2y_ctrl_low_edge.corpGain[2] = 0;
	r2y_ctrl_low_edge.corpGain[3] = 0;
	r2y_ctrl_low_edge.corpBorder[0] = 0;
	r2y_ctrl_low_edge.corpBorder[1] = 0;
	r2y_ctrl_low_edge.corpBorder[2] = 0;
	r2y_ctrl_low_edge.cormOffset[0] = 0;
	r2y_ctrl_low_edge.cormOffset[1] = 0;
	r2y_ctrl_low_edge.cormOffset[2] = 0;
	r2y_ctrl_low_edge.cormOffset[3] = 0;
	r2y_ctrl_low_edge.cormGain[0] = 0;
	r2y_ctrl_low_edge.cormGain[1] = 0;
	r2y_ctrl_low_edge.cormGain[2] = 0;
	r2y_ctrl_low_edge.cormGain[3] = 0;
	r2y_ctrl_low_edge.cormBorder[0] = 0;
	r2y_ctrl_low_edge.cormBorder[1] = 0;
	r2y_ctrl_low_edge.cormBorder[2] = 0;
	r2y_ctrl_low_edge.supScl = 0x10;
	r2y_ctrl_low_edge.levelClipPOffset[0] = 0;
	r2y_ctrl_low_edge.levelClipPOffset[1] = 0;
	r2y_ctrl_low_edge.levelClipPOffset[2] = 0x1FF;
	r2y_ctrl_low_edge.levelClipPGain[0] = 0;
	r2y_ctrl_low_edge.levelClipPGain[1] = 0;
	r2y_ctrl_low_edge.levelClipPGain[2] = 0;
	r2y_ctrl_low_edge.levelClipPBorder[0] = 0;
	r2y_ctrl_low_edge.levelClipPBorder[1] = 0;
	r2y_ctrl_low_edge.levelClipMOffset[0] = 0;
	r2y_ctrl_low_edge.levelClipMOffset[1] = 0;
	r2y_ctrl_low_edge.levelClipMOffset[2] = 0x1FF;
	r2y_ctrl_low_edge.levelClipMGain[0] = 0;
	r2y_ctrl_low_edge.levelClipMGain[1] = 0;
	r2y_ctrl_low_edge.levelClipMGain[2] = 0;
	r2y_ctrl_low_edge.levelClipMBorder[0] = 0;
	r2y_ctrl_low_edge.levelClipMBorder[1] = 0;

	im_r2y_edge_ctrl_low_edge(im_r2y_edge_new(),  ImR2yCtrl_PIPE1, &r2y_ctrl_low_edge );

	r2y_ctrl_edge_dot_noise.hfEnable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_edge_dot_noise.mfEnable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_edge_dot_noise.hfPThreshold = 0;
	r2y_ctrl_edge_dot_noise.hfMThreshold = 0;
	r2y_ctrl_edge_dot_noise.hfPCoef = 0;
	r2y_ctrl_edge_dot_noise.hfMCoef = 0;
	r2y_ctrl_edge_dot_noise.mfPThreshold = 0;
	r2y_ctrl_edge_dot_noise.mfMThreshold = 0;
	r2y_ctrl_edge_dot_noise.mfPCoef = 0;
	r2y_ctrl_edge_dot_noise.mfMCoef = 0;

	im_r2y_edge_ctrl_dot_noise( ImR2yCtrl_PIPE1, &r2y_ctrl_edge_dot_noise );

	r2y_ctrl_mapscl.blockSizeH = 0x10;
	r2y_ctrl_mapscl.blockSizeV = 0x10;
	r2y_ctrl_mapscl.recipMultipliH = 0;
	r2y_ctrl_mapscl.recipMultipliShiftH = 0;
	r2y_ctrl_mapscl.recipMultipliV = 0;
	r2y_ctrl_mapscl.recipMultipliShiftV = 0;
	r2y_ctrl_mapscl.blockStartH = 0;
	r2y_ctrl_mapscl.blockStartCoordH = 0;
	r2y_ctrl_mapscl.blockStartV = 0;
	r2y_ctrl_mapscl.blockStartCoordV = 0;

	im_r2y_ctrl3_map_scl(im_r2y_ctrl3_new(),  ImR2yCtrl_PIPE1, &r2y_ctrl_mapscl );

	memset( &r2y_ctrl_edge_blend, 0x00, sizeof(CtrlEdgeBlend) );
	r2y_ctrl_edge_blend.blendType = 0;
	r2y_ctrl_edge_blend.border[0] = 0;
	r2y_ctrl_edge_blend.border[1] = 0;
	r2y_ctrl_edge_blend.border[2] = 0;
	r2y_ctrl_edge_blend.alphaOffset[0] = 0;
	r2y_ctrl_edge_blend.alphaOffset[1] = 0;
	r2y_ctrl_edge_blend.alphaOffset[2] = 0;
	r2y_ctrl_edge_blend.alphaOffset[3] = 0;
	r2y_ctrl_edge_blend.alphaGain[0] = 0;
	r2y_ctrl_edge_blend.alphaGain[1] = 0;
	r2y_ctrl_edge_blend.alphaGain[2] = 0;
	r2y_ctrl_edge_blend.alphaGain[3] = 0;
	r2y_ctrl_edge_blend.betaOffset[0] = 0;
	r2y_ctrl_edge_blend.betaOffset[1] = 0;
	r2y_ctrl_edge_blend.betaOffset[2] = 0;
	r2y_ctrl_edge_blend.betaOffset[3] = 0;
	r2y_ctrl_edge_blend.betaGain[0] = 0;
	r2y_ctrl_edge_blend.betaGain[1] = 0;
	r2y_ctrl_edge_blend.betaGain[2] = 0;
	r2y_ctrl_edge_blend.betaGain[3] = 0;
	r2y_ctrl_edge_blend.levelClipP = 0x1FF;
	r2y_ctrl_edge_blend.levelClipM = 0x1FF;

	im_r2y_edge_ctrl_blend( ImR2yCtrl_PIPE1, &r2y_ctrl_edge_blend );

	r2y_ctrl_edge_texture.cbAFocus1Pos = 0;
	r2y_ctrl_edge_texture.crAFocus1Pos = 0;
	r2y_ctrl_edge_texture.cbAFocus2Pos = 0;
	r2y_ctrl_edge_texture.crAFocus2Pos = 0;
	r2y_ctrl_edge_texture.cbBFocus1Pos = 0;
	r2y_ctrl_edge_texture.crBFocus1Pos = 0;
	r2y_ctrl_edge_texture.cbBFocus2Pos = 0;
	r2y_ctrl_edge_texture.crBFocus2Pos = 0;

	im_r2y_ctrl3_cref_edge_texture_adj_common(im_r2y_ctrl3_new(),  ImR2yCtrl_PIPE1, &r2y_ctrl_edge_texture );

	r2y_ctrl_edge_adj.areaAEnable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_edge_adj.areaBEnable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_edge_adj.mergeMethod = 0;
	r2y_ctrl_edge_adj.areaAScaleOffset = 0x80;
	r2y_ctrl_edge_adj.areaAScaleGain[0] = 0;
	r2y_ctrl_edge_adj.areaAScaleGain[1] = 0;
	r2y_ctrl_edge_adj.areaAScaleBorder = 0;
	r2y_ctrl_edge_adj.areaAScaleClipLo = 0;
	r2y_ctrl_edge_adj.areaAScaleClipHi = 0xFF;
	r2y_ctrl_edge_adj.areaAYScaleGainP = 0;
	r2y_ctrl_edge_adj.areaAYScaleGainM = 0;
	r2y_ctrl_edge_adj.areaAYScaleBorder[0] = 0;
	r2y_ctrl_edge_adj.areaAYScaleBorder[1] = 0;
	r2y_ctrl_edge_adj.areaAYScaleClipLo = 0;
	r2y_ctrl_edge_adj.areaAYScaleClipHi = 0x100;
	r2y_ctrl_edge_adj.areaBScaleOffset = 0x80;
	r2y_ctrl_edge_adj.areaBScaleGain[0] = 0;
	r2y_ctrl_edge_adj.areaBScaleGain[1] = 0;
	r2y_ctrl_edge_adj.areaBScaleBoarder = 0;
	r2y_ctrl_edge_adj.areaBScaleClipLo = 0;
	r2y_ctrl_edge_adj.areaBScaleClipHi = 0xFF;
	r2y_ctrl_edge_adj.areaBYScaleGainP = 0;
	r2y_ctrl_edge_adj.areaBYScaleGainM = 0;
	r2y_ctrl_edge_adj.areaBYScaleBorder[0] = 0;
	r2y_ctrl_edge_adj.areaBYScaleBorder[1] = 0;
	r2y_ctrl_edge_adj.areaBYScaleClipLo = 0;
	r2y_ctrl_edge_adj.areaBYScaleClipHi = 0x100;
	r2y_ctrl_edge_adj.levelClipP = 0x1FF;
	r2y_ctrl_edge_adj.levelClipM = 0x1FF;

	im_r2y_ctrl3_cref_edge_adj(im_r2y_ctrl3_new(),  ImR2yCtrl_PIPE1, &r2y_ctrl_edge_adj );

	r2y_ctrl_yb_blend.areaAEnable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_yb_blend.areaBEnable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_yb_blend.areaAOffset = 0;
	r2y_ctrl_yb_blend.areaAGain[0] = 0;
	r2y_ctrl_yb_blend.areaAGain[1] = 0;
	r2y_ctrl_yb_blend.areaABoarder = 0;
	r2y_ctrl_yb_blend.areaAScaleClipLo = 0;
	r2y_ctrl_yb_blend.areaAScaleClipHi = 0x80;
	r2y_ctrl_yb_blend.areaACorrectGainP = 0;
	r2y_ctrl_yb_blend.areaACorrectGainM = 0;
	r2y_ctrl_yb_blend.areaACorrectBorder[0] = 0;
	r2y_ctrl_yb_blend.areaACorrectBorder[1] = 0;
	r2y_ctrl_yb_blend.areaACorrectClipLo = 0;
	r2y_ctrl_yb_blend.areaACorrectClipHi = 0x80;
	r2y_ctrl_yb_blend.areaBOffset = 0;
	r2y_ctrl_yb_blend.areaBGain[0] = 0;
	r2y_ctrl_yb_blend.areaBGain[1] = 0;
	r2y_ctrl_yb_blend.areaBBoarder = 0;
	r2y_ctrl_yb_blend.areaBScaleClipLo = 0;
	r2y_ctrl_yb_blend.areaBScaleClipHi = 0x80;
	r2y_ctrl_yb_blend.areaBCorrectGainP = 0;
	r2y_ctrl_yb_blend.areaBCorrectGainM = 0;
	r2y_ctrl_yb_blend.areaBCorrectBoarder[0] = 0;
	r2y_ctrl_yb_blend.areaBCorrectBoarder[1] = 0;
	r2y_ctrl_yb_blend.areaBCorrectClipLo = 0;
	r2y_ctrl_yb_blend.areaBCorrectClipHi = 0x80;

	im_r2y_ctrl3_cref_yb_blend(im_r2y_ctrl3_new(),  ImR2yCtrl_PIPE1, &r2y_ctrl_yb_blend );

	r2y_ctrl_clpf.clpfEnable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_clpf.interlockBlendEnable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_clpf.lpfK[0] = 0;
	r2y_ctrl_clpf.lpfK[1] = 0;
	r2y_ctrl_clpf.lpfK[2] = 0;
	r2y_ctrl_clpf.lpfK[3] = 0;
	r2y_ctrl_clpf.lpfK[4] = 0;
	r2y_ctrl_clpf.lpfK[5] = 0;
	r2y_ctrl_clpf.lpfK[6] = 0;
	r2y_ctrl_clpf.lpfK[7] = 0;
	r2y_ctrl_clpf.lpfK[8] = 0;
	r2y_ctrl_clpf.lpfIbOffset[0] = 0;
	r2y_ctrl_clpf.lpfIbOffset[1] = 0;
	r2y_ctrl_clpf.lpfIbOffset[2] = 0;
	r2y_ctrl_clpf.lpfIbOffset[3] = 0;
	r2y_ctrl_clpf.lpfIbGain[0] = 0;
	r2y_ctrl_clpf.lpfIbGain[1] = 0;
	r2y_ctrl_clpf.lpfIbGain[2] = 0;
	r2y_ctrl_clpf.lpfIbGain[3] = 0;
	r2y_ctrl_clpf.lpfIbBorder[0] = 0;
	r2y_ctrl_clpf.lpfIbBorder[1] = 0;
	r2y_ctrl_clpf.lpfIbBorder[2] = 0;

	im_r2y_ctrl3_color_nr(im_r2y_ctrl3_new(),  ImR2yCtrl_PIPE1, &r2y_ctrl_clpf );

	r2y_ctrl_cs.csyEnable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_cs.csy_mix_ratio = 8;
	r2y_ctrl_cs.csy_select_table = 0;
	r2y_ctrl_cs.csy_offset[0] = 0;
	r2y_ctrl_cs.csy_offset[1] = 0;
	r2y_ctrl_cs.csy_offset[2] = 0;
	r2y_ctrl_cs.csy_offset[3] = 0;
	r2y_ctrl_cs.csy_gain[0] = 0;
	r2y_ctrl_cs.csy_gain[1] = 0;
	r2y_ctrl_cs.csy_gain[2] = 0;
	r2y_ctrl_cs.csy_gain[3] = 0;
	r2y_ctrl_cs.csy_border[0] = 0;
	r2y_ctrl_cs.csy_border[1] = 0;
	r2y_ctrl_cs.csy_border[2] = 0;
	r2y_ctrl_cs.y_rev_enable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_cs.c_rev_enable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_cs.c_fixed_enable = ImR2yCtrl_ENABLE_OFF;
	r2y_ctrl_cs.cb_fixed = 0;
	r2y_ctrl_cs.cr_fixed = 0;
	r2y_ctrl_cs.y_offset = 0;
	r2y_ctrl_cs.cb_offset = 0;
	r2y_ctrl_cs.cr_offset = 0;

	im_r2y_ctrl3_chroma_suppress(im_r2y_ctrl3_new(),  ImR2yCtrl_PIPE1, &r2y_ctrl_cs );


	im_r2y_ctrl3_set_tone_control_table(im_r2y_ctrl3_new(),  ImR2yCtrl_PIPE1, &gTone_Tbl, 0, ImR2yCtrl_TABLE_MAX_TONE );

	im_r2y_set_gamma_table(im_r2y_set_new(),  ImR2yCtrl_PIPE1, 0, &gGamma_Tbl, &gGamma_Diff_Tbl );
	im_r2y_set_gamma_table(im_r2y_set_new(),  ImR2yCtrl_PIPE1, 1, &gGamma_Tbl, &gGamma_Diff_Tbl );
	im_r2y_set_gamma_table(im_r2y_set_new(),  ImR2yCtrl_PIPE1, 2, &gGamma_Tbl, &gGamma_Diff_Tbl );
	im_r2y_set_gamma_table(im_r2y_set_new(),  ImR2yCtrl_PIPE1, 3, &gGamma_Tbl, &gGamma_Diff_Tbl );
	im_r2y_set_gamma_table(im_r2y_set_new(),  ImR2yCtrl_PIPE1, 4, &gGamma_Tbl, &gGamma_Diff_Tbl );

	im_r2y_set_high_edge_scale_table(im_r2y_set_new(),  ImR2yCtrl_PIPE1, &gHE_SCL_Tbl, 0, ImR2yCtrl_TABLE_MAX_EDGE_SCALE_HI );
	im_r2y_set_high_edge_step_table(im_r2y_set_new(),  ImR2yCtrl_PIPE1, &gHE_STEP_Tbl, 0, ImR2yCtrl_TABLE_MAX_EDGE_TC_HI );

	im_r2y_set_medium_edge_scale_table(im_r2y_set_new(),  ImR2yCtrl_PIPE1, &gME_SCL_Tbl, 0, ImR2yCtrl_TABLE_MAX_EDGE_SCALE_MEDIUM );
	im_r2y_set_medium_edge_step_table(im_r2y_set_new(),  ImR2yCtrl_PIPE1, &gME_STEP_Tbl, 0, ImR2yCtrl_TABLE_MAX_EDGE_TC_MEDIUM );

	im_r2y_set_low_edge_scale_table(im_r2y_set_new(),  ImR2yCtrl_PIPE1, &gLE_SCL_Tbl, 0, ImR2yCtrl_TABLE_MAX_EDGE_SCALE_LO );
	im_r2y_set_low_edge_step_table(im_r2y_set_new(),  ImR2yCtrl_PIPE1, &gLE_STEP_Tbl, 0, ImR2yCtrl_TABLE_MAX_EDGE_TC_LO );

	im_r2y_set_map_scl_table(im_r2y_set_new(),  ImR2yCtrl_PIPE1, &gMAP_SCL_Tbl, 0, ImR2yCtrl_TABLE_MAX_MAPSCL );

	@endcode
	<br><br>


@section im_r2y_iq_sample_section3	Sample code of data setting for YC Matrix.
	@code
	R2yCtrlYcc r2y_ctrl_ycc;

	r2y_ctrl_ycc.ycCoeff[0][0] = 77;
	r2y_ctrl_ycc.ycCoeff[0][1] = 150;
	r2y_ctrl_ycc.ycCoeff[0][2] = 29;
	r2y_ctrl_ycc.ycCoeff[1][0] = -43;
	r2y_ctrl_ycc.ycCoeff[1][1] = -85;
	r2y_ctrl_ycc.ycCoeff[1][2] = 128;
	r2y_ctrl_ycc.ycCoeff[2][0] = 128;
	r2y_ctrl_ycc.ycCoeff[2][1] = -107;
	r2y_ctrl_ycc.ycCoeff[2][2] = -21;
	r2y_ctrl_ycc.yBlendRatio = 0;
	r2y_ctrl_ycc.ybBlendRatio = 0;

	im_r2y_ctrl2_yc_convert(im_r2y_ctrl2_new(),  ImR2yCtrl_PIPE1, &r2y_ctrl_ycc );
	@endcode
	<br><br>

@section im_r2y_iq_sample_section4	Sample code of data setting for CC Matrix.
	@code
	R2yCtrlCc0 t_r2y_ctrl_cc0;
	R2yCtrlCc1 t_r2y_ctrl_cc1;

	t_r2y_ctrl_cc0.posiDec = 0;
	t_r2y_ctrl_cc0.ccMatrix[0][0] = 512;
	t_r2y_ctrl_cc0.ccMatrix[0][1] = 0;
	t_r2y_ctrl_cc0.ccMatrix[0][2] = 0;
	t_r2y_ctrl_cc0.ccMatrix[1][0] = 0;
	t_r2y_ctrl_cc0.ccMatrix[1][1] = 512;
	t_r2y_ctrl_cc0.ccMatrix[1][2] = 0;
	t_r2y_ctrl_cc0.ccMatrix[2][0] = 0;
	t_r2y_ctrl_cc0.ccMatrix[2][1] = 0;
	t_r2y_ctrl_cc0.ccMatrix[2][2] = 512;
	t_r2y_ctrl_cc0.cybof[0] = 0;
	t_r2y_ctrl_cc0.cybof[1] = 0;
	t_r2y_ctrl_cc0.cybof[2] = 0x400;
	t_r2y_ctrl_cc0.cybga[0] = 0;
	t_r2y_ctrl_cc0.cybga[1] = 0;
	t_r2y_ctrl_cc0.cybga[2] = 0;
	t_r2y_ctrl_cc0.cybbd[0] = 0;
	t_r2y_ctrl_cc0.cybbd[1] = 0;
	t_r2y_ctrl_cc0.cyc[0] = 77;
	t_r2y_ctrl_cc0.cyc[1] = 150;
	t_r2y_ctrl_cc0.cyc[2] = 29;

	im_r2y_ctrl2_cc0_matrix( ImR2yCtrl_PIPE1, &t_r2y_ctrl_cc0 );

	t_r2y_ctrl_cc1.posiDec = 0;
	t_r2y_ctrl_cc1.ccMatrix[0][0] = 512;
	t_r2y_ctrl_cc1.ccMatrix[0][1] = 0;
	t_r2y_ctrl_cc1.ccMatrix[0][2] = 0;
	t_r2y_ctrl_cc1.ccMatrix[1][0] = 0;
	t_r2y_ctrl_cc1.ccMatrix[1][1] = 512;
	t_r2y_ctrl_cc1.ccMatrix[1][2] = 0;
	t_r2y_ctrl_cc1.ccMatrix[2][0] = 0;
	t_r2y_ctrl_cc1.ccMatrix[2][1] = 0;
	t_r2y_ctrl_cc1.ccMatrix[2][2] = 512;
	t_r2y_ctrl_cc1.clipPR = 0xFFF;
	t_r2y_ctrl_cc1.clipMR = 0xFFF;
	t_r2y_ctrl_cc1.clipPG = 0xFFF;
	t_r2y_ctrl_cc1.clipMG = 0xFFF;
	t_r2y_ctrl_cc1.clipPB = 0xFFF;
	t_r2y_ctrl_cc1.clipMB = 0xFFF;

	im_r2y_ctrl2_cc1_matrix(im_r2y_ctrl2_new(),  ImR2yCtrl_PIPE1, &t_r2y_ctrl_cc1 );
	@endcode
	<br><br>

@} */	// weakgroup im_r2y_iq

/**
Set bank index value
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2/pipe12).
@param[in]		yywNo					: YYW number
@param[in]		bankIndex				: Output bank index.
@retval			D_DDIM_OK				: success.
@retval			ImR2yUtils_PARAM_ERROR	: parameter error.
*/
INT32 im_r2y3_set_outbank_index(ImR2y3 *self, kuint16 pipeNo, kuint16 yywNo, kuint16 bankIndex );

/**
Increment bank index value
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2/pipe12).
@param[in]		yywNo					: YYW number
@retval			D_DDIM_OK				: success.
@retval			ImR2yUtils_PARAM_ERROR	: parameter error.
*/
INT32 im_r2y3_inc_outbank_index(ImR2y3 *self, kuint16 pipeNo, kuint16 yywNo );

/**
R2Y Control (B2R/LTM direct control mode control)
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2/pipe12).
@param[in]		r2y_ctrl_direct			: Control information.
@retval			D_DDIM_OK				: success.
@retval			ImR2yUtils_PARAM_ERROR	: parameter error.
@retval			ImR2yUtils_MACRO_BUSY		: Macro busy error.
*/
INT32 im_r2y3_ctrl_mode_direct(ImR2y3 *self, kuint16 pipeNo, const R2CtrlDirect* const r2y_ctrl_direct );

/**
Set YYW Right side offset(for video format).
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2).
@param[in]		yywNo					: YYW number.
@param[in]		offsetByte				: Offset byte information.
@retval			D_DDIM_OK				: success.
@retval			ImR2yUtils_PARAM_ERROR	: parameter error.
*/
INT32 im_r2y3_set_right_side_offset(ImR2y3 *self, kuint16 pipeNo, kuint16 yywNo, R2yRightsideOffset* offsetByte );

/**
Get Next Address information
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2).
@param[in]		yywNo					: YYW number.
@param[out]		r2yAddr				: Pointer of Output address information.
@retval			D_DDIM_OK				: success.
@retval			ImR2yUtils_PARAM_ERROR	: parameter error.
*/
INT32 im_r2y3_get_next_outaddr(ImR2y3 *self, kuint16 pipeNo, const UINT32 yywNo, R2yOutaddrInfo* const r2yAddr );

/**
Get Latest Address information
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2).
@param[in]		yywNo					: YYW number.
@param[out]		latestBankIdx			: Pointer of Output address information.
@param[out]		latestAddr				: Pointer of Output address information.
@retval			D_DDIM_OK				: success.
@retval			ImR2yUtils_PARAM_ERROR	: parameter error.
*/
INT32 im_r2y3_get_latest_outaddr(ImR2y3 *self, kuint16 pipeNo, UINT32 yywNo, kuint16* const latestBankIdx, R2yOutaddrInfo* const latestAddr );

/**
Set YYW0 External I/F output.
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2/pipe12).
@param[in]		output_onoff_ipu		: 0:disable External I/F(B) output 1:enable External I/F(B) output
@param[in]		output_onoff_cnr		: 0:disable External I/F(C) output 1:enable External I/F(C) output
@retval			D_DDIM_OK				: success.
@retval			ImR2yUtils_PARAM_ERROR	: parameter error.
*/
INT32 im_r2y3_set_external_if_output(ImR2y3 *self, kuint16 pipeNo, kuint16 output_onoff_ipu, kuint16 output_onoff_cnr );

/**
Get YYW0 External I/F output status.
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2).
@param[out]		output_onoff_ipu		: 0:disable External I/F(B) output 1:enable External I/F(B) output
@param[out]		output_onoff_cnr		: 0:disable External I/F(C) output 1:enable External I/F(C) output
@retval			D_DDIM_OK				: success.
@retval			ImR2yUtils_PARAM_ERROR	: parameter error.
*/
INT32 im_r2y3_get_external_if_output(ImR2y3 *self, kuint16 pipeNo, kuint16* const output_onoff_ipu, kuint16* const output_onoff_cnr );

/**
Set Frame stop
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2/pipe12).
@param[in]		onoff					: 0:Frame stop disable 1:Frame stop enable
@retval			D_DDIM_OK				: success.
@retval			ImR2yUtils_PARAM_ERROR	: parameter error.
*/
INT32 im_r2y3_set_frame_stop(ImR2y3 *self, kuint16 pipeNo, kuint16 onoff );

/**
Get YYRch busy status.
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2).
@param[out]		busy_status				: TRUE : YYR is running. (YYRTRG is on). / FALSE : YYR is not running. (YYRTRG is off).
@retval			D_DDIM_OK				: success.
@retval			ImR2yUtils_PARAM_ERROR	: parameter error.
*/
INT32 im_r2y3_get_yyr_busy(ImR2y3 *self, kuint16 pipeNo, BOOL* const busy_status );

/**
Get Horizontal ring pixel padding number
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2).
@param[out]		ringPixs				: Ring pixel padding number.
@retval			D_DDIM_OK				: success.
@retval			ImR2yUtils_PARAM_ERROR	: parameter error.
*/
INT32 im_r2y3_get_h_ring_pixs(ImR2y3 *self, kuint16 pipeNo, kuint16* const ringPixs );

/**
Trimming control
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2/pipe12).
@param[in]		yywNo					: YYW number.
@param[in]		r2y_ctrl_trimming		: pointer of trimming control parameters.
@retval			D_DDIM_OK				: success.
@retval			ImR2yUtils_PARAM_ERROR	: parameter error.
*/
INT32 im_r2y3_ctrl_trimming(ImR2y3 *self, kuint16 pipeNo, kuint16 yywNo, const R2yCtrlTrimming* const r2y_ctrl_trimming );

/**
Trimming control(for external I/F)
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2/pipe12).
@param[in]		r2y_ctrl_trimming		: pointer of trimming control parameters.
@retval			D_DDIM_OK				: success.
@retval			ImR2yUtils_PARAM_ERROR	: parameter error.
*/
INT32 im_r2y3_ctrl_trimming_external(ImR2y3 *self, kuint16 pipeNo, const CtrlTrimmingExt* const r2y_ctrl_trimming );

/**
Histogram control register
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2/pipe12).
@param[in]		r2y_ctrl_hist			: Histogram control register value.
@retval			D_DDIM_OK				: Success
@retval			ImR2yUtils_PARAM_ERROR	: Parameter error.
@retval			ImR2yUtils_MACRO_BUSY		: Macro is running. only "r2y_ctrl_hist->enable" is reflected.
*/
INT32 im_r2y3_ctrl_histogram(ImR2y3 *self, kuint16 pipeNo, const R2yCtrlHistogram* const r2y_ctrl_hist );

/**
Get Histogram value
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2).
@param[out]		status					: histogram status.
@param[out]		dst_addr				: Histogram value return buffer address. Array number is ImR2yCtrl_TABLE_MAX_HISTOGRAM.
@retval			D_DDIM_OK				: Success
@retval			ImR2yUtils_PARAM_ERROR	: Parameter error.
@retval			ImR2yUtils_MACRO_BUSY		: Macro is running. Do not update "dst_addr".
*/
INT32 im_r2y3_get_histogram(ImR2y3 *self, kuint16 pipeNo, R2yHistogramStat* const status, R2yHistogramAddr* const dst_addr );

/**
Set Histogram ram access enable
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2/pipe12).
@param[in]		histEnable				: ImR2yCtrl_ENABLE_OFF : Access disable. / ImR2yCtrl_ENABLE_ON : Access enable.
@param[in]		wait_enable				: ImR2yCtrl_WAIT_OFF : Turn off wait. / ImR2yCtrl_WAIT_ON : Wait 1usec if needed.
@retval			D_DDIM_OK				: success.
@retval			ImR2yUtils_PARAM_ERROR	: Parameter error.
@retval			ImR2yUtils_MACRO_BUSY		: Macro busy error.
*/
INT32 im_r2y3_set_histogram_access_enable(ImR2y3 *self, kuint16 pipeNo, kuint16 histEnable, kuint16 wait_enable );

/**
Set a partial color extraction
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2/pipe12).
@param[in]		r2y_color_extract		: pointer of color extraction parameter.
@retval			D_DDIM_OK				: success.
@retval			ImR2yUtils_PARAM_ERROR	: parameter error or R2Y is active.
*/
INT32 im_r2y3_set_color_extract(ImR2y3 *self, kuint16 pipeNo, const R2yColorExtract* const r2y_color_extract );

/**
Set chroma scale value
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2/pipe12).
@param[in]		r2y_chroma_scale		: pointer of chroma scale parameter.
@retval			D_DDIM_OK				: success.
@retval			ImR2yUtils_PARAM_ERROR	: parameter error.
*/
INT32 im_r2y3_set_chroma(ImR2y3 *self, kuint16 pipeNo, const R2yChRomaScale* const r2y_chroma_scale );

/**
Set hue scale value
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2/pipe12).
@param[in]		r2y_hue_scale			: pointer of hue scale parameter.
@retval			D_DDIM_OK				: success.
@retval			ImR2yUtils_PARAM_ERROR	: parameter error.
*/
INT32 im_r2y3_set_hue(ImR2y3 *self, kuint16 pipeNo, const R2yHueScale* const r2y_hue_scale );

/** Set RGB Deknee table.
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2/pipe12).
@param[in]		tbl_type				: Table type (R, G, B).
@param[in]		src_tbl					: Pointer of Table data (Type of kuint16, Maximum array number is ImR2yCtrl_TABLE_MAX_RGB_DEKNEE)
@retval			D_DDIM_OK				: success.
@retval			ImR2yUtils_PARAM_ERROR	: parameter error.
@retval			ImR2yUtils_MACRO_BUSY		: Macro busy error.
*/
INT32 im_r2y3_set_rgb_deknee_table(ImR2y3 *self, kuint16 pipeNo, ER2yDknRgbtbl tbl_type, const kuint16* const src_tbl );

/**
Set RGB Deknee access enable
@param[in]		pipeNo					: Image pipe no(pipe1/pipe2/pipe12).
@param[in]		access_enable			: set enable/disable Deknee table access control parameters.
@param[in]		wait_enable				: ImR2yCtrl_WAIT_OFF : Turn off wait. / ImR2yCtrl_WAIT_ON : Wait 1usec if needed.
@retval			D_DDIM_OK				: success.
@retval			ImR2yUtils_PARAM_ERROR	: parameter error.
@retval			ImR2yUtils_MACRO_BUSY		: Macro busy error.
*/
INT32 im_r2y3_set_rgb_deknee_access_enable(ImR2y3 *self, kuint16 pipeNo, kuint16 access_enable, kuint16 wait_enable );


#endif /* __IM_R2Y3_H__ */
