im_mipi.c\im_mipi.h删除创建新类immipi.c\immipi.h
 
公有函数修改：
extern	VOID Im_MIPI_Init(E_IM_MIPI_ACTIVE_DATA_LANE lane);
VOID im_mipi_init(ImMipi*self,E_IM_MIPI_ACTIVE_DATA_LANE lane);


extern	VOID Im_MIPI_Lpclk_Ctrl(UCHAR lpclk);
VOID im_mipi_lpclk_ctrl(ImMipi*self,UCHAR lpclk);


extern	VOID Im_MIPI_Power_Ctrl(E_IM_MIPI_PHY_SHUTDOWNZ power, E_IM_MIPI_SHUTDOWNZ reset);
VOID im_mipi_power_ctrl(ImMipi*self,E_IM_MIPI_PHY_SHUTDOWNZ power, E_IM_MIPI_SHUTDOWNZ reset);


extern	INT32 Im_MIPI_Enter_Ulps(VOID);
INT32 im_mipi_enter_ulps(ImMipi*self);


extern	INT32 Im_MIPI_Exit_Ulps(VOID);
INT32 im_mipi_exit_ulps(ImMipi*self);


extern	INT32 Im_MIPI_Set_Lane_Info(T_IM_MIPI_DPI_LANE_INFO const *const lane_info);
INT32 im_mipi_set_lane_info(T_IM_MIPI_DPI_LANE_INFO const *const lane_info);


extern	INT32 Im_MIPI_Get_Lane_Info(T_IM_MIPI_DPI_LANE_INFO *const lane_info);
INT32 im_mipi_get_lane_info(T_IM_MIPI_DPI_LANE_INFO *const lane_info);


extern	INT32 Im_MIPI_Set_DPI_Resolution(T_IM_MIPI_DPI_RESOLUTION const *const dpi);
INT32 im_mipi_set_dpi_resolution(T_IM_MIPI_DPI_RESOLUTION const *const dpi);


extern	INT32 Im_MIPI_Get_DPI_Resolution(T_IM_MIPI_DPI_RESOLUTION *const dpi);
INT32 im_mipi_get_dpi_resolution(T_IM_MIPI_DPI_RESOLUTION *const dpi);


extern	INT32 Im_MIPI_Update_Dpi(VOID);
INT32 im_mipi_update_dpi(VOID);



extern	INT32 Im_MIPI_Set_Transmission_Configuration(T_IM_MIPI_TRANS_CONFIG const *const config);
INT32 im_mipi_set_transmission_configutation(T_IM_MIPI_TRANS_CONFIG const *const config);


extern	INT32 Im_MIPI_Get_Transmission_Configuration(T_IM_MIPI_TRANS_CONFIG *const config);
INT32 im_mipi_set_transmission_configutation(T_IM_MIPI_TRANS_CONFIG const *const config);


extern	INT32 Im_MIPI_Packet_Transmission(UCHAR header_num, UCHAR payload_num, const U_IM_MIPI_GEN_HDR header[D_IM_MIPI_PACKET_NUM_MAX], const ULONG payload[D_IM_MIPI_PACKET_NUM_MAX]);
INT32 im_mipi_packet_transmission(UCHAR header_num, UCHAR payload_num, const U_IM_MIPI_GEN_HDR header[D_IM_MIPI_PACKET_NUM_MAX], const ULONG payload[D_IM_MIPI_PACKET_NUM_MAX]);


extern	VOID Im_MIPI_Set_Timer_Count(UCHAR count);
VOID im_mipi_set_timer_count(ImMipi*self,UCHAR count);


extern	VOID Im_MIPI_Set_Int_Mask(U_IM_MIPI_INT_MSK1 int_msk1);
VOID im_mipi_set_int_mask(ImMipi*self,U_IM_MIPI_INT_MSK1 int_msk1);


extern	INT32 Im_MIPI_Get_Int_Mask(U_IM_MIPI_INT_MSK1* int_msk1);
INT32 im_mipi_get_int_mask(U_IM_MIPI_INT_MSK1* int_msk1);


extern	INT32 Im_MIPI_Set_Int_Callback(E_IM_MIPI_INT_TYPE interrupt_type, VP_CALLBACK vp_callback);
INT32 im_mipi_set_int_callback(E_IM_MIPI_INT_TYPE interrupt_type, VP_CALLBACK vp_callback);


extern	VOID Im_MIPI_Int_Handler(VOID);
VOID im_mipi_int_handler(VOID);

宏定义修改：
#define IM_TYPE_MIPI	(im_mipi_get_type())
#define IM_MIPI(obj)			(K_TYPE_CHECK_INSTANCE_CAST(obj, ImMipi))
#define IM_IS_MIPI(obj)		(K_TYPE_CHECK_INSTANCE_TYPE(obj, ImMipi))

#define D_IM_MIPI_INPUT_PARAM_ERROR	(D_IM_MIPI | D_DDIM_INPUT_PARAM_ERROR)	/**< Input Parameter Error */
#define D_IM_MIPI_NO_RECEIVE		(D_IM_MIPI | D_DDIM_NO_RECEIVE)			/**< No receive */
#define D_IM_MIPI_TIMEOUT			(D_IM_MIPI | D_DDIM_TIMEOUT)			/**< Time out */
#define D_IM_MIPI_NG				(D_IM_MIPI | D_DDIM_SYSTEM_ERROR)		/**< System error */

// General-purpose definition of register value (Effectiveness selection)
#define D_IM_MIPI_ENABLE_OFF						(0)		/**< OFF	*/
#define D_IM_MIPI_ENABLE_ON							(1)		/**< ON		*/

// DPI color coding.
#define D_IM_MIPI_COLOR_CODING_16BIT_CONFIG1		(0)				/**< 16-bit configuration 1				*/
#define D_IM_MIPI_COLOR_CODING_16BIT_CONFIG2		(1)				/**< 16-bit configuration 2				*/
#define D_IM_MIPI_COLOR_CODING_16BIT_CONFIG3		(2)				/**< 16-bit configuration 3				*/
#define D_IM_MIPI_COLOR_CODING_18BIT_CONFIG1		(3)				/**< 18-bit configuration 1				*/
#define D_IM_MIPI_COLOR_CODING_18BIT_CONFIG2		(4)				/**< 18-bit configuration 2				*/
#define D_IM_MIPI_COLOR_CODING_24BIT				(5)				/**< 24-bit								*/
#define D_IM_MIPI_COLOR_CODING_20BIT_YCC422_LP		(6)				/**< 20-bit YCbCr4:2:2 loosely packed	*/
#define D_IM_MIPI_COLOR_CODING_24BIT_YCC422			(7)				/**< 24-bit YCbCr4:2:2					*/
#define D_IM_MIPI_COLOR_CODING_16BIT_YCC422			(8)				/**< 16-bit YCbCr4:2:2					*/
#define D_IM_MIPI_COLOR_CODING_30BIT				(9)				/**< 30-bit								*/
#define D_IM_MIPI_COLOR_CODING_36BIT				(10)			/**< 36-bit								*/
#define D_IM_MIPI_COLOR_CODING_12BIT_YCC420			(11)			/**< 12-bit YCbCr4:2:0					*/

// Video mode transmission type.
#define D_IM_MIPI_VID_MODE_TYPE_NON_BURST_SYNC_PULSES	(0)			/**< 00 : Non-Burst with sync pulses	*/
#define D_IM_MIPI_VID_MODE_TYPE_NON_BURST_SYNC_EVENTS	(1)			/**< 01 : Non-Burst with sync events	*/
#define D_IM_MIPI_VID_MODE_TYPE_BURST					(2)			/**< 10 or 11 : Burst mode				*/

// Number of Pakcets.
#define D_IM_MIPI_PACKET_NUM_MAX					(16)			/**< Max number							*/


修改思路为：以类名开头后接下划线和具体宏名其中各单词大写用下划线分割例如：

#define D_IM_MIPI_ENABLE_OFF  (0)		
修改为：
#define ImMipi_D_IM_MIPI_ENABLE_OFF  (0)	

枚举定义修改方式与宏定义类似
例如：typedef enum{
	E_IM_MIPI_ACTIVE_DATA_LANE_1 = 0,					/**< One data lane    (lane 0)					*/
	E_IM_MIPI_ACTIVE_DATA_LANE_2,						/**< Two data lanes   (lanes 0 and 1)			*/
	E_IM_MIPI_ACTIVE_DATA_LANE_3,						/**< Three data lanes (lanes 0, 1, and 2)		*/
	E_IM_MIPI_ACTIVE_DATA_LANE_4						/**< Four data lanes  (lanes 0, 1, 2, and 3)	*/
} E_IM_MIPI_ACTIVE_DATA_LANE;
修改为：
typedef enum{
	ImMipi_E_IM_MIPI_ACTIVE_DATA_LANE_1 = 0,					/**< One data lane    (lane 0)					*/
	ImMipi_E_IM_MIPI_ACTIVE_DATA_LANE_2,						/**< Two data lanes   (lanes 0 and 1)			*/
	ImMipi_E_IM_MIPI_ACTIVE_DATA_LANE_3,						/**< Three data lanes (lanes 0, 1, and 2)		*/
	ImMipi_E_IM_MIPI_ACTIVE_DATA_LANE_4						/**< Four data lanes  (lanes 0, 1, 2, and 3)	*/
} EImMipiActiveDataLane;

结构体变量修改方式：
typedef union {
	ULONG		word;				/**< All bits */
	struct {
		ULONG	dataen_active_low	:1;		/**< Data enable pin.<br>
												 Value 1:active, 0:inactive		*/
		ULONG	vsync_active_low	:1;		/**< Vertical synchronism pin.<br>
												 Value 1:active, 0:inactive		*/
		ULONG	hsync_active_low	:1;		/**< Horizontal synchronism pin.<br>
												 Value 1:active, 0:inactive		*/
		ULONG	shutd_active_low	:1;		/**< Shutdown pin.<br>
												 Value 1:active, 0:inactive		*/
		ULONG	colorm_acvite_low	:1;		/**< Color mode pin.<br>
												 Value 1:active, 0:inactive		*/
		ULONG						:27;	/**< Reserve				*/
	} bit;	/**< Bit field */
} U_IM_MIPI_DPI_CFG_POL;

修改为：
typedef union {
	ULONG		word;				/**< All bits */
	struct {
		ULONG	dataenActiveLow	:1;		/**< Data enable pin.<br>
												 Value 1:active, 0:inactive		*/
		ULONG	vsyncActiveLow	:1;		/**< Vertical synchronism pin.<br>
												 Value 1:active, 0:inactive		*/
		ULONG	hsyncActiveLow	:1;		/**< Horizontal synchronism pin.<br>
												 Value 1:active, 0:inactive		*/
		ULONG	shutdActiveLow	:1;		/**< Shutdown pin.<br>
												 Value 1:active, 0:inactive		*/
		ULONG	colormAcviteLow	:1;		/**< Color mode pin.<br>
												 Value 1:active, 0:inactive		*/
		ULONG						:27;	/**< Reserve				*/
	} bit;	/**< Bit field */
} UImMipiDpiCfgPol;










