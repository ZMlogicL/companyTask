
.................................................................尚未修改完成,如遇问题,请咨询本人.................................................................................


因im_pro.h是im_pro_pas.c,    im_pro_sen.c,  im_pro_sro.c的头文件,  故而所有的修改类都围绕im_pro.h来拆分得到



1. 将 im_pro_pas.c拆分修改为类	 ImproPastop
																 ImproPasspt
																 


2.将im_pro_sen.c拆分修改为类		 ImproSentop
																 ImproSencmipi
																 ImproSendmipi
																 ImproSenlvds
																 ImproSenobd
																 ImproSenobt
																 ImproSensg
																 ImproSensldiv
																 ImproSenslvs
																 
																 

3.将im_pro_sro.c拆分修改为类		ImproSrotop
																ImproSroafpd
																ImproSrocag
																ImproSrodpc
																ImproSroff
																ImproSroffc
																ImproSroffsh
																ImproSroshdl
																ImproSrohrb
																ImproSrovrb
																ImproSrosdc
																ImproSrobuztop
																
																
																

5,修改命名规范:
			
			(1)修改类 ImproPastop:
					
						枚举:
			
													typedef enum {
														E_IM_PRO_PASTOP_CLK_TYPE_PASCLK = 0,		/**< PASCLK		*/  
													} E_IM_PRO_PASTOP_CLK_TYPE;
								修改成
													typedef enum {
														ImproPastop_E_IM_PRO_PASTOP_CLK_TYPE_PASCLK = 0,		/**< PASCLK		*/  
													} EimproPastopClkType;
			
			
			
													typedef enum {
															E_IM_PRO_PASTOP_ORG_L_PDAF = 0,		/**< PDAF-L pixel	*/
															E_IM_PRO_PASTOP_ORG_R_PDAF,			/**< PDAF-L pixel	*/
													} E_IM_PRO_PASTOP_ORG;
									修改成
													typedef enum {
														ImproPastop_E_IM_PRO_PASTOP_ORG_L_PDAF = 0,		/**< PDAF-L pixel	*/
														ImproPastop_E_IM_PRO_PASTOP_ORG_R_PDAF,			/**< PDAF-L pixel	*/
													} EimproPastopOrg;
											
							
							
							
							
							
							
							
							
							
							结构体:
							
														typedef struct {
															E_IM_PRO_PASTOP_ORG		org;	
														} T_IM_PRO_PASTOP_CTRL;
											修改成
															 	typedef struct {
																	EimproPastopOrg		org;	
																 } TimproPastopCtrl;		
											
							
							
							
														
							公共方法:
							
										extern	VOID			Im_PRO_PASTOP_Init( VOID )    修改成		extern	VOID			impro_pastop_init( VOID );
										extern	INT32		Im_PRO_PASTOP_SW_Reset( VOID )    修改成	extern	INT32			impro_pastop_sw_reset( VOID )
										extern	INT32		Im_PRO_PASTOP_Control_Clock( E_IM_PRO_PASTOP_CLK_TYPE clk_type, UCHAR on_off, UCHAR wait_skip )    修改成		impro_pastop_control_clock(EimproPastopClkType clkType, UCHAR onOff, UCHAR waitSkip ) 
										extern	INT32		Im_PRO_PASTOP_Ctrl( T_IM_PRO_PASTOP_CTRL* ctrl )    修改成	impro_pastop_ctrl( TimproPastopCtrl* ctrl )
							
							
				(2)修改类 ImproPasspt:
					
						枚举:
			
						
							
							
			
						结构体:
							
														typedef struct {
															ULONG	SPTTBL;				
														} T_IM_PRO_RDMA_SPT_SHD_TBL_ADDR;
											修改成
														typedef struct {
															ULONG	sptTbl;				
														} TimproRdmaSptShdTblAddr;	 	
											
														typedef struct {
															EimproSptTblSel		table_sel;				
															USHORT						horizontal_pixel;		
															USHORT						vertical_pixel;			
																												
															USHORT						Inverse_base;			/**< Inverse coefficient correction interpolation frame (base unit)<br>
																													value range		:[0 - 511] <br>
																													target registor	:@@SPTBDM */
															USHORT						Inverse_exponent;		/**< Inverse coefficient correction interpolation frame (Exponent part)<br>
																													value range		:[0 - 14] <br>
																													target registor	:@@SPTBDE */
															USHORT						pos_y;					/**< Compensation vertical direction start position<br>
																													value range		:[0 - 4095](Multiples of 2)<br>
																													target registor	:@@SPTV */
															USHORT						pos_x;					/**< Compensation horizontal direction start position<br>
																													value range		:[0 - 8191]<br>
																													target registor	:@@SPTH */
															UCHAR						v_block_size;			/**< Vertical block size setting.<br>
																													value range		:[1 - 15]<br>
																													target registor	:@@SPTVBC */
															UCHAR						h_block_size;			/**< Horizontal block size setting.<br>
																													value range		:[1 - 15]<br>
																													target registor	:@@SPTHBC */
															USHORT						upper_clip_value;		/**< upper limit clip value used in clip processing.<br>
																													value range		:[0 - 32767]<br>
																													target registor	:@@SPTCLPH */
															USHORT						lower_clip_value;		/**< lower limit clip value used in clip processing.<br>
																													value range		:[0 - 32767]<br>
																													target registor	:@@SPTCLPL */
															USHORT						correction_through_val;	/**< The value that does not the correction.<br>
																													value range		:[0 - 32767]<br>
																													target registor	:@@SPTNOPV */
														} T_IM_PRO_SPT_CTRL;
											修改成
														typedef struct {
															EimproSptTblSel		tableSel;				/**< Select shading correction table.<br>
																													target registor	:@@sptTbl */
															USHORT						horizontalPixel;		/**< Correction of horizontal pixels per frame interpolation<br>
																													value range		:[2 - 255]<br>
																													target registor	:@@SPTBSH */
															USHORT						verticalPixel;			/**< Correction of vertical pixels per frame interpolation<br>
																													value range		:[2 - 255]<br>
																													target registor	:@@SPTBSV */
															USHORT						InverseBase;			/**< Inverse coefficient correction interpolation frame (base unit)<br>
																													value range		:[0 - 511] <br>
																													target registor	:@@SPTBDM */
															USHORT						InverseExponent;		/**< Inverse coefficient correction interpolation frame (Exponent part)<br>
																													value range		:[0 - 14] <br>
																													target registor	:@@SPTBDE */
															USHORT						posY;					/**< Compensation vertical direction start position<br>
																													value range		:[0 - 4095](Multiples of 2)<br>
																													target registor	:@@SPTV */
															USHORT						posX;					/**< Compensation horizontal direction start position<br>
																													value range		:[0 - 8191]<br>
																													target registor	:@@SPTH */
															UCHAR						vBlockSize;			/**< Vertical block size setting.<br>
																													value range		:[1 - 15]<br>
																													target registor	:@@SPTVBC */
															UCHAR						hBlockSize;			/**< Horizontal block size setting.<br>
																													value range		:[1 - 15]<br>
																													target registor	:@@SPTHBC */
															USHORT						upperClipValue;		/**< upper limit clip value used in clip processing.<br>
																													value range		:[0 - 32767]<br>
																													target registor	:@@SPTCLPH */
															USHORT						lowerClipValue;		/**< lower limit clip value used in clip processing.<br>
																													value range		:[0 - 32767]<br>
																													target registor	:@@SPTCLPL */
															USHORT						correctionThroughVal;	/**< The value that does not the correction.<br>
																													value range		:[0 - 32767]<br>
																													target registor	:@@SPTNOPV */
														} TimproSptCtrl;											
							
												
												
												typedef struct {
													SHORT*	pshd_tbl;		/**< table address pointer for SPTTBL0	*/
													USHORT	size;			/**< set table size for SPTTBL0<br>
																				value range		:[0 - 256] number of array	*/
												} T_IM_PRO_SPT_TABLE;
									修改成
												typedef struct {
													SHORT*	pshdTbl;		/**< table address pointer for SPTTBL0	*/
													USHORT	size;			/**< set table size for SPTTBL0<br>
																				value range		:[0 - 256] number of array	*/
												} TimproSptTable;				
									
												
												
												
														
							公共方法:
							
										extern	INT32			Im_PRO_SPT_Start( VOID )   修改成		extern	INT32			impro_passpt_start( VOID );
										extern	INT32			Im_PRO_SPT_Stop( UCHAR force )    修改成	extern	INT32			impro_passpt_stop( UCHAR force )( VOID )
										extern	INT32			Im_PRO_SPT_Ctrl( TimproSptCtrl* spt_ctrl )  修改成		extern	INT32			impro_passpt_ctrl( TimproSptCtrl* sptCtrl ) 
										extern	INT32			Im_PRO_SPT_Set_PAEN( UCHAR paen_trg )    修改成	extern	INT32			impro_passpt_set_paen( UCHAR paenTrg )
										extern	INT32			Im_PRO_SPT_Set_Table( EimproSptTblSel tbl_sel, TimproSptTable* shd_tbl )   修改成		extern	INT32			impro_passpt_set_table( EimproSptTblSel tblSel, TimproSptTable* shdTbl );
										extern	INT32			Im_PRO_Get_RdmaAddr_SPT_SHD_Tbl( EimproSptTblSel tbl_sel, const TimproRdmaSptShdTblAddr** addr )   修改成		extern	INT32			impro_passpt_get_rdma_addr_spt_shd_tbl( EimproSptTblSel tblSel, const TimproRdmaSptShdTblAddr** addr );
			
	
	
	
	
	
				(3)修改类 ImproSentop:
					
					
					宏定义:
					
					
									D_IM_PRO_SENTOP_CPHY_NUM 修改成   ImproSentop_D_IM_PRO_SENTOP_CPHY_NUM
									
					
					
					
					
					
					
					
						枚举:
			
													typedef enum {
															E_IM_PRO_SENTOP_LDIV_MAX_HSIZE_CTRL_0 = 0,		/**< LDIV0:2960  LDIV1:2960        LDIV2:2960        LDIV3:2960	*/
															E_IM_PRO_SENTOP_LDIV_MAX_HSIZE_CTRL_1,			/**< LDIV0:5920  LDIV1:5920        LDIV2:Unavailable LDIV3:1024	*/
															E_IM_PRO_SENTOP_LDIV_MAX_HSIZE_CTRL_2,			/**< LDIV0:11840 LDIV1:Unavailable LDIV2:Unavailable LDIV3:1024	*/
															E_IM_PRO_SENTOP_LDIV_MAX_HSIZE_CTRL_3,			/**< Setting prohibited(Reserved)	*/
														} E_IM_PRO_SENTOP_LDIV_MAX_HSIZE_CTRL;
								修改成
												typedef enum {
													ImproSentop_E_IM_PRO_SENTOP_LDIV_MAX_HSIZE_CTRL_0 = 0,		/**< LDIV0:2960  LDIV1:2960        LDIV2:2960        LDIV3:2960	*/
													ImproSentop_E_IM_PRO_SENTOP_LDIV_MAX_HSIZE_CTRL_1,			/**< LDIV0:5920  LDIV1:5920        LDIV2:Unavailable LDIV3:1024	*/
													ImproSentop_E_IM_PRO_SENTOP_LDIV_MAX_HSIZE_CTRL_2,			/**< LDIV0:11840 LDIV1:Unavailable LDIV2:Unavailable LDIV3:1024	*/
													ImproSentop_E_IM_PRO_SENTOP_LDIV_MAX_HSIZE_CTRL_3,			/**< Setting prohibited(Reserved)	*/
												} EimproSentopLdivMaxHsizeCtrl;
			
			
			
												typedef enum {
													E_IM_PRO_SENTOP_CONN_TYPE_SEL_LVDS = 0,		/**< Connect to LVDS	*/
													E_IM_PRO_SENTOP_CONN_TYPE_SEL_SLVS,			/**< Connect to SLVS-EC	*/
													E_IM_PRO_SENTOP_CONN_TYPE_SEL_DMIPI,		/**< Connect to MIPI D-PHY	*/
													E_IM_PRO_SENTOP_CONN_TYPE_SEL_CMIPI,		/**< Connect to MIPI C-PHY	*/
													E_IM_PRO_SENTOP_CONN_TYPE_SEL_EXT_SLVS,		/**< Connect to other SENCORE's SLVS-EC for Multi stream	*/
													E_IM_PRO_SENTOP_CONN_TYPE_SEL_EXT_DMIPI_VC,	/**< Connect to other SENCORE's MIPI D-PHY for Virtual channel	*/
													E_IM_PRO_SENTOP_CONN_TYPE_SEL_EXT_CMIPI_VC,	/**< Connect to other SENCORE's MIPI C-PHY for Virtual channel	*/
													E_IM_PRO_SENTOP_CONN_TYPE_SEL_EXT_LVDS,		/**< Connect to other SENCORE's LVDS	*/
												} E_IM_PRO_SENTOP_CONN_TYPE_SEL;
									修改成
													typedef enum {
														ImproSentop_E_IM_PRO_SENTOP_CONN_TYPE_SEL_LVDS = 0,		/**< Connect to LVDS	*/
														ImproSentop_E_IM_PRO_SENTOP_CONN_TYPE_SEL_SLVS,			/**< Connect to SLVS-EC	*/
														ImproSentop_E_IM_PRO_SENTOP_CONN_TYPE_SEL_DMIPI,		/**< Connect to MIPI D-PHY	*/
														ImproSentop_E_IM_PRO_SENTOP_CONN_TYPE_SEL_CMIPI,		/**< Connect to MIPI C-PHY	*/
														ImproSentop_E_IM_PRO_SENTOP_CONN_TYPE_SEL_EXT_SLVS,		/**< Connect to other SENCORE's SLVS-EC for Multi stream	*/
														ImproSentop_E_IM_PRO_SENTOP_CONN_TYPE_SEL_EXT_DMIPI_VC,	/**< Connect to other SENCORE's MIPI D-PHY for Virtual channel	*/
														ImproSentop_E_IM_PRO_SENTOP_CONN_TYPE_SEL_EXT_CMIPI_VC,	/**< Connect to other SENCORE's MIPI C-PHY for Virtual channel	*/
														ImproSentop_E_IM_PRO_SENTOP_CONN_TYPE_SEL_EXT_LVDS,		/**< Connect to other SENCORE's LVDS	*/
													} EimproSentopConnTypeSel;
											
							
							
													typedef enum {
														E_IM_PRO_SENTOP_INPUT_TO_BLOB_FROM_LDIV0_0 = 0,	/**< LDIV0 of output0 connect to BLOB	*/
														E_IM_PRO_SENTOP_INPUT_TO_BLOB_FROM_LDIV0_1,		/**< LDIV0 of output1 connect to BLOB	*/
														E_IM_PRO_SENTOP_INPUT_TO_BLOB_FROM_LDIV0_2,		/**< LDIV0 of output2 connect to BLOB	*/
														E_IM_PRO_SENTOP_INPUT_TO_BLOB_FROM_LDIV0_3,		/**< LDIV0 of output3 connect to BLOB	*/
														E_IM_PRO_SENTOP_INPUT_TO_BLOB_FROM_LDIV1_0,		/**< LDIV1 of output0 connect to BLOB	*/
														E_IM_PRO_SENTOP_INPUT_TO_BLOB_FROM_LDIV1_1,		/**< LDIV1 of output1 connect to BLOB	*/
														E_IM_PRO_SENTOP_INPUT_TO_BLOB_FROM_LDIV2_0,		/**< LDIV2 of output0 connect to BLOB	*/
														E_IM_PRO_SENTOP_INPUT_TO_BLOB_FROM_LDIV3_0,		/**< LDIV3 of output0 connect to BLOB	*/
													} E_IM_PRO_SENTOP_INPUT_TO_BLOB;
									修改成
													typedef enum {
														ImproSentop_E_IM_PRO_SENTOP_INPUT_TO_BLOB_FROM_LDIV0_0 = 0,	/**< LDIV0 of output0 connect to BLOB	*/
														ImproSentop_E_IM_PRO_SENTOP_INPUT_TO_BLOB_FROM_LDIV0_1,		/**< LDIV0 of output1 connect to BLOB	*/
														ImproSentop_E_IM_PRO_SENTOP_INPUT_TO_BLOB_FROM_LDIV0_2,		/**< LDIV0 of output2 connect to BLOB	*/
														ImproSentop_E_IM_PRO_SENTOP_INPUT_TO_BLOB_FROM_LDIV0_3,		/**< LDIV0 of output3 connect to BLOB	*/
														ImproSentop_E_IM_PRO_SENTOP_INPUT_TO_BLOB_FROM_LDIV1_0,		/**< LDIV1 of output0 connect to BLOB	*/
														ImproSentop_E_IM_PRO_SENTOP_INPUT_TO_BLOB_FROM_LDIV1_1,		/**< LDIV1 of output1 connect to BLOB	*/
														ImproSentop_E_IM_PRO_SENTOP_INPUT_TO_BLOB_FROM_LDIV2_0,		/**< LDIV2 of output0 connect to BLOB	*/
														ImproSentop_E_IM_PRO_SENTOP_INPUT_TO_BLOB_FROM_LDIV3_0,		/**< LDIV3 of output0 connect to BLOB	*/
													} EimproSentopInputToBlob;					
							
							
							
													typedef enum {
														E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV0_0_PRE_BLOB = 0,		/**< LDIV0 of output0 (pre-BLOB)	*/
														E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV0_0_POST_BLOB,		/**< LDIV0 of output0 (post-BLOB)	*/
														E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV0_1_PRE_BLOB,			/**< LDIV0 of output1 (pre-BLOB)	*/
														E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV0_1_POST_BLOB,		/**< LDIV0 of output1 (post-BLOB)	*/
														E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV0_2_PRE_BLOB,			/**< LDIV0 of output2 (pre-BLOB)	*/
														E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV0_2_POST_BLOB,		/**< LDIV0 of output2 (post-BLOB)	*/
														E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV0_3_PRE_BLOB,			/**< LDIV0 of output3 (pre-BLOB)	*/
														E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV0_3_POST_BLOB,		/**< LDIV0 of output3 (post-BLOB)	*/
														E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV1_0_PRE_BLOB,			/**< LDIV1 of output0 (pre-BLOB)	*/
														E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV1_0_POST_BLOB,		/**< LDIV1 of output0 (post-BLOB)	*/
														E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV1_1_PRE_BLOB,			/**< LDIV1 of output1 (pre-BLOB)	*/
														E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV1_1_POST_BLOB,		/**< LDIV1 of output1 (post-BLOB)	*/
														E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV2_0_PRE_BLOB,			/**< LDIV2 of output0 (pre-BLOB)	*/
														E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV2_0_POST_BLOB,		/**< LDIV2 of output0 (post-BLOB)	*/
														E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV3_0_PRE_BLOB,			/**< LDIV3 of output0 (pre-BLOB)	*/
														E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV3_0_POST_BLOB,		/**< LDIV3 of output0 (post-BLOB)	*/
													} E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE;
									修改成
													typedef enum {
														ImproSentop_E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV0_0_PRE_BLOB = 0,		/**< LDIV0 of output0 (pre-BLOB)	*/
														ImproSentop_E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV0_0_POST_BLOB,		/**< LDIV0 of output0 (post-BLOB)	*/
														ImproSentop_E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV0_1_PRE_BLOB,			/**< LDIV0 of output1 (pre-BLOB)	*/
														ImproSentop_E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV0_1_POST_BLOB,		/**< LDIV0 of output1 (post-BLOB)	*/
														ImproSentop_E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV0_2_PRE_BLOB,			/**< LDIV0 of output2 (pre-BLOB)	*/
														ImproSentop_E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV0_2_POST_BLOB,		/**< LDIV0 of output2 (post-BLOB)	*/
														ImproSentop_E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV0_3_PRE_BLOB,			/**< LDIV0 of output3 (pre-BLOB)	*/
														ImproSentop_E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV0_3_POST_BLOB,		/**< LDIV0 of output3 (post-BLOB)	*/
														ImproSentop_E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV1_0_PRE_BLOB,			/**< LDIV1 of output0 (pre-BLOB)	*/
														ImproSentop_E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV1_0_POST_BLOB,		/**< LDIV1 of output0 (post-BLOB)	*/
														ImproSentop_E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV1_1_PRE_BLOB,			/**< LDIV1 of output1 (pre-BLOB)	*/
														ImproSentop_E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV1_1_POST_BLOB,		/**< LDIV1 of output1 (post-BLOB)	*/
														ImproSentop_E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV2_0_PRE_BLOB,			/**< LDIV2 of output0 (pre-BLOB)	*/
														ImproSentop_E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV2_0_POST_BLOB,		/**< LDIV2 of output0 (post-BLOB)	*/
														ImproSentop_E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV3_0_PRE_BLOB,			/**< LDIV3 of output0 (pre-BLOB)	*/
														ImproSentop_E_IM_PRO_SENTOP_SDRAM_OUTPUT_TYPE_LDIV3_0_POST_BLOB,		/**< LDIV3 of output0 (post-BLOB)	*/
													} EimproSentopSdramOutputType;								
							
	
	
														typedef enum {
															E_IM_PRO_SENTOP_OUT_SEL_LDIV0 = 0,				/**< Output from LDIV0	*/
															E_IM_PRO_SENTOP_OUT_SEL_LDIV1,					/**< Output from LDIV1	*/
														} E_IM_PRO_SENTOP_OUT_SEL;
									修改成
														typedef enum {
															ImproSentop_E_IM_PRO_SENTOP_OUT_SEL_LDIV0 = 0,				/**< Output from LDIV0	*/
															ImproSentop_E_IM_PRO_SENTOP_OUT_SEL_LDIV1,					/**< Output from LDIV1	*/
														} EimproSentopOutSel;



														typedef enum {
															E_IM_PRO_SENTOP_CLK_TYPE_SENSORCLK = 0,		/**< SENSORCLK		*/
															E_IM_PRO_SENTOP_CLK_TYPE_APCLK0,			/**< APCLK_0(SG0)	*/
															E_IM_PRO_SENTOP_CLK_TYPE_APCLK1,			/**< APCLK_1(SG1)	*/
															E_IM_PRO_SENTOP_CLK_TYPE_APCLK2,			/**< APCLK_2(SG2)	*/
															E_IM_PRO_SENTOP_CLK_TYPE_APCLK3,			/**< APCLK_3(SG3)	*/
														} E_IM_PRO_SENTOP_CLK_TYPE;
									修改成
														typedef enum {
															ImproSentop_E_IM_PRO_SENTOP_CLK_TYPE_SENSORCLK = 0,		/**< SENSORCLK		*/
															ImproSentop_E_IM_PRO_SENTOP_CLK_TYPE_APCLK0,			/**< APCLK_0(SG0)	*/
															ImproSentop_E_IM_PRO_SENTOP_CLK_TYPE_APCLK1,			/**< APCLK_1(SG1)	*/
															ImproSentop_E_IM_PRO_SENTOP_CLK_TYPE_APCLK2,			/**< APCLK_2(SG2)	*/
															ImproSentop_E_IM_PRO_SENTOP_CLK_TYPE_APCLK3,			/**< APCLK_3(SG3)	*/
														} EimproSentopClkType;
														
														
														
													typedef enum {
														E_IM_PRO_SENTOP_LDIV_MULTI_INPUT_CTRL_DISABLE = 0,	/**< Separated operation	*/
														E_IM_PRO_SENTOP_LDIV_MULTI_INPUT_CTRL_2CH,			/**< 2ch multi connect operation	*/
														E_IM_PRO_SENTOP_LDIV_MULTI_INPUT_CTRL_4CH,			/**< 4ch multi connect operation	*/
													} E_IM_PRO_SENTOP_LDIV_MULTI_INPUT_CTRL;
									修改成
													typedef enum {
														ImproSentop_E_IM_PRO_SENTOP_LDIV_MULTI_INPUT_CTRL_DISABLE = 0,	/**< Separated operation	*/
														ImproSentop_E_IM_PRO_SENTOP_LDIV_MULTI_INPUT_CTRL_2CH,			/**< 2ch multi connect operation	*/
														ImproSentop_E_IM_PRO_SENTOP_LDIV_MULTI_INPUT_CTRL_4CH,			/**< 4ch multi connect operation	*/
													} EimproSentopLdivMultiInputCtrl;
	

													typedef enum {
														E_IM_PRO_SENTOP_BS_SHIFT_0BIT	= 0,		/**< 0bit shift	*/
														E_IM_PRO_SENTOP_BS_SHIFT_1BIT,				/**< 1bit shift	*/
														E_IM_PRO_SENTOP_BS_SHIFT_2BIT,				/**< 2bit shift	*/
														E_IM_PRO_SENTOP_BS_SHIFT_3BIT,				/**< 3bit shift	*/
														E_IM_PRO_SENTOP_BS_SHIFT_4BIT,				/**< 4bit shift	*/
														E_IM_PRO_SENTOP_BS_SHIFT_5BIT,				/**< 5bit shift	*/
														E_IM_PRO_SENTOP_BS_SHIFT_6BIT,				/**< 6bit shift	*/
													} E_IM_PRO_SENTOP_BS_SHIFT;
									修改成
													typedef enum {
														ImproSentop_E_IM_PRO_SENTOP_BS_SHIFT_0BIT	= 0,		/**< 0bit shift	*/
														ImproSentop_E_IM_PRO_SENTOP_BS_SHIFT_1BIT,				/**< 1bit shift	*/
														ImproSentop_E_IM_PRO_SENTOP_BS_SHIFT_2BIT,				/**< 2bit shift	*/
														ImproSentop_E_IM_PRO_SENTOP_BS_SHIFT_3BIT,				/**< 3bit shift	*/
														ImproSentop_E_IM_PRO_SENTOP_BS_SHIFT_4BIT,				/**< 4bit shift	*/
														ImproSentop_E_IM_PRO_SENTOP_BS_SHIFT_5BIT,				/**< 5bit shift	*/
														ImproSentop_E_IM_PRO_SENTOP_BS_SHIFT_6BIT,				/**< 6bit shift	*/
													} EimproSentopBsShift;



													typedef enum {
														E_IM_PRO_SENTOP_BS_SAT_NOCOMP	= 0,		/**< saturation no compensation	*/
														E_IM_PRO_SENTOP_BS_SAT_COMP					/**< saturation compensation	*/
													} E_IM_PRO_SENTOP_BS_SAT;
									修改成
													typedef enum {
														ImproSentop_E_IM_PRO_SENTOP_BS_SAT_NOCOMP	= 0,		/**< saturation no compensation	*/
														ImproSentop_E_IM_PRO_SENTOP_BS_SAT_COMP					/**< saturation compensation	*/
													} EimproSentopBsSat;		



													typedef enum {
														E_IM_PRO_SENTOP_BS_BIT_SHIFT_DIR_L	= 0,	/**< Left bit shift	*/
														E_IM_PRO_SENTOP_BS_BIT_SHIFT_DIR_R			/**< Right bit shift	*/
													} E_IM_PRO_SENTOP_BS_BIT_SHIFT_DIR;
									修改成
													typedef enum {
														ImproSentop_E_IM_PRO_SENTOP_BS_BIT_SHIFT_DIR_L	= 0,	/**< Left bit shift	*/
														ImproSentop_E_IM_PRO_SENTOP_BS_BIT_SHIFT_DIR_R			/**< Right bit shift	*/
													} EimproSentopBsBitShiftDir;



													typedef enum {
														E_IM_PRO_SENTOP_OBT_COMM_PARTTERN_ANY_2SETS = 0,	/**< Communication between any 2sets	*/
														E_IM_PRO_SENTOP_OBT_COMM_PARTTERN_ANY_3SETS,		/**< Communication between any 3sets	*/
														E_IM_PRO_SENTOP_OBT_COMM_PARTTERN_4SETS,			/**< Communication between 4sets	*/
														E_IM_PRO_SENTOP_OBT_COMM_PARTTERN_BLOB0_1_BLOB2_3,	/**< Communication between BLOB0 and BLOB1, and BLOB2 and BLOB3	*/
													} E_IM_PRO_SENTOP_OBT_COMM_PARTTERN;
									修改成
													typedef enum {
														ImproSentop_E_IM_PRO_SENTOP_OBT_COMM_PARTTERN_ANY_2SETS = 0,	/**< Communication between any 2sets	*/
														ImproSentop_E_IM_PRO_SENTOP_OBT_COMM_PARTTERN_ANY_3SETS,		/**< Communication between any 3sets	*/
														ImproSentop_E_IM_PRO_SENTOP_OBT_COMM_PARTTERN_4SETS,			/**< Communication between 4sets	*/
														ImproSentop_E_IM_PRO_SENTOP_OBT_COMM_PARTTERN_BLOB0_1_BLOB2_3,	/**< Communication between BLOB0 and BLOB1, and BLOB2 and BLOB3	*/
													} EimproSentopObtCommParttern;



													typedef enum {
														E_IM_PRO_SENTOP_SLVS_LINK_CONN_PHY0 = 0,			/**< Connect PHY0's 20 divided clock to LINK.	*/
														E_IM_PRO_SENTOP_SLVS_LINK_CONN_PHY1,				/**< Connect PHY1's 20 divided clock to LINK.	*/
													} E_IM_PRO_SENTOP_SLVS_LINK_CONN;
									修改成
													typedef enum {
														ImproSentop_E_IM_PRO_SENTOP_SLVS_LINK_CONN_PHY0 = 0,			/**< Connect PHY0's 20 divided clock to LINK.	*/
														ImproSentop_E_IM_PRO_SENTOP_SLVS_LINK_CONN_PHY1,				/**< Connect PHY1's 20 divided clock to LINK.	*/
													} EimproSentopSlvsLinkConn;



													typedef enum {
														E_IM_PRO_SENTOP_SG_IF_OUTPUT_SEL_SG0 = 0,	/**< SG macro output 0 connected	*/
														E_IM_PRO_SENTOP_SG_IF_OUTPUT_SEL_SG1,		/**< SG macro output 1 connected	*/
														E_IM_PRO_SENTOP_SG_IF_OUTPUT_SEL_SG2,		/**< SG macro output 2 connected	*/
														E_IM_PRO_SENTOP_SG_IF_OUTPUT_SEL_SG3,		/**< SG macro output 3 connected	*/
													} E_IM_PRO_SENTOP_SG_IF_OUTPUT_SEL;
									修改成
													typedef enum {
														ImproSentop_E_IM_PRO_SENTOP_SG_IF_OUTPUT_SEL_SG0 = 0,	/**< SG macro output 0 connected	*/
														ImproSentop_E_IM_PRO_SENTOP_SG_IF_OUTPUT_SEL_SG1,		/**< SG macro output 1 connected	*/
														ImproSentop_E_IM_PRO_SENTOP_SG_IF_OUTPUT_SEL_SG2,		/**< SG macro output 2 connected	*/
														ImproSentop_E_IM_PRO_SENTOP_SG_IF_OUTPUT_SEL_SG3,		/**< SG macro output 3 connected	*/
													} EimproSentopSgIfOutputSel;



													typedef enum {
														E_IM_PRO_SENTOP_SENCORE_MAX_HSIZE_CTRL_0 = 0,	/**< SENCORE0:2960  SENCORE1:2960        SENCORE2:2960        SENCORE3:2960	*/
														E_IM_PRO_SENTOP_SENCORE_MAX_HSIZE_CTRL_1,		/**< SENCORE0:5920  SENCORE1:5920        SENCORE2:Unavailable SENCORE3:1024	*/
														E_IM_PRO_SENTOP_SENCORE_MAX_HSIZE_CTRL_2,		/**< SENCORE0:11840 SENCORE1:Unavailable SENCORE2:Unavailable SENCORE3:1024	*/
														E_IM_PRO_SENTOP_SENCORE_MAX_HSIZE_CTRL_3,		/**< Setting prohibited(Reserved)	*/
													} E_IM_PRO_SENTOP_SENCORE_MAX_HSIZE_CTRL;
									修改成
													typedef enum {
														ImproSentop_E_IM_PRO_SENTOP_SG_IF_OUTPUT_SEL_SG0 = 0,	/**< SG macro output 0 connected	*/
														ImproSentop_E_IM_PRO_SENTOP_SG_IF_OUTPUT_SEL_SG1,		/**< SG macro output 1 connected	*/
														ImproSentop_E_IM_PRO_SENTOP_SG_IF_OUTPUT_SEL_SG2,		/**< SG macro output 2 connected	*/
														ImproSentop_E_IM_PRO_SENTOP_SG_IF_OUTPUT_SEL_SG3,		/**< SG macro output 3 connected	*/
													} EimproSentopSgIfOutputSel;
							
							结构体:
							
														typedef struct {
															EimproSentopConnTypeSel			sen_connect_type_sel[D_IM_PRO_SEN_SENCORE_NUM];	/**< Select an input sensor type of each SENCORE. SENTOPCTL1@@SENIN0-@@SENIN3 */
															EimproSentopInputToBlob			blob_input_sel[D_IM_PRO_SENTOP_BLOB_NUM];			/**< Select an input block type of each BLOB. SENTOPCTL1@@BLOBSET0-@@BLOBSET3 */
															EimproSentopSdramOutputType		sdram_output_type[ImproSentop_D_IM_PRO_SENTOP_PWSW_NUM];		/**< Select a type of output to SDRAM from LDIV. SENTOPCTL1@@PWSW0-@@PWSW3 */
															EimproSentopOutSel					output_sel_sro2;									/**< Select an output block to SRO2 I/F. SENTOPCTL1@@PIPE2S */
															E_IM_PRO_SENTOP_SENCORE_MAX_HSIZE_CTRL	sencore_hmax_size_ctrl;								/**< Select a SENCORE horizontal maxumum size control. SENTOPCTL1@@SENRAMSW */
															EimproSentopLdivMaxHsizeCtrl		ldiv_hmax_size_ctrl;								/**< Select a LDIV horizontal maxumum size control. SENTOPCTL1@@LDIVRAMSW */
															EimproSentopLdivMultiInputCtrl	ldiv_multi_ch_input_ctrl;							/**< Select a LDIV multi channel input control. SENTOPCTL1@@LDIVMCH */
															E_IM_PRO_ORG							first_pixel[D_IM_PRO_SENTOP_BLOB_NUM][2];			/**< Select a Bayer first pixel for each PAT block input SENTOPCTL2@@ORG00-@@ORG31 */
														} T_IM_PRO_SENTOP_CTRL;
											修改成
														typedef struct {
															EimproSentopConnTypeSel				senConnectTypeSel[D_IM_PRO_SEN_SENCORE_NUM];	/**< Select an input sensor type of each SENCORE. SENTOPCTL1@@SENIN0-@@SENIN3 */
															EimproSentopInputToBlob				blobInputSel[D_IM_PRO_SENTOP_BLOB_NUM];			/**< Select an input block type of each BLOB. SENTOPCTL1@@BLOBSET0-@@BLOBSET3 */
															EimproSentopSdramOutputType		sdramOutputType[ImproSentop_D_IM_PRO_SENTOP_PWSW_NUM];		/**< Select a type of output to SDRAM from LDIV. SENTOPCTL1@@PWSW0-@@PWSW3 */
															EimproSentopOutSel							outputSelSro2;									/**< Select an output block to SRO2 I/F. SENTOPCTL1@@PIPE2S */
															EimproSentopSencoreMaxHsizeCtrl	sencoreHmaxSizeCtrl;								/**< Select a SENCORE horizontal maxumum size control. SENTOPCTL1@@SENRAMSW */
															EimproSentopLdivMaxHsizeCtrl		ldivHmaxSizeCtrl;								/**< Select a LDIV horizontal maxumum size control. SENTOPCTL1@@LDIVRAMSW */
															EimproSentopLdivMultiInputCtrl		ldivMultiChInputCtrl;							/**< Select a LDIV multi channel input control. SENTOPCTL1@@LDIVMCH */
															E_IM_PRO_ORG									firstPixel[D_IM_PRO_SENTOP_BLOB_NUM][2];			/**< Select a Bayer first pixel for each PAT block input SENTOPCTL2@@ORG00-@@ORG31 */
														} TimproSentopCtrl;	
											
							
												
														typedef struct {
															EimproSentopBsShift				shiftValue[ImproSentop_D_IM_PRO_SEN_BS_NUM];				/**< Bit shift value for BS0 ~ BS3 macro.<br>
																																							target registor	:BSAMNTx@@BSCTL	*/
															EimproSentopBsSat					satCompensation[ImproSentop_D_IM_PRO_SEN_BS_NUM];			/**< Saturation compensation for BS0 ~ BS3 macro. [0:Disable 1:Enable]<br>
																																							target registor	:BSLMDx@@BSCTL	*/
															EimproSentopBsBitShiftDir		shiftDir[ImproSentop_D_IM_PRO_SEN_BS_NUM];					/**< Bit shift direction value for BS0 ~ BS3 macro.<br>
																																							target registor	:BSLRx@@BSCTL	*/
														} T_IM_PRO_SENTOP_BS_CTRL;
											修改成
														typedef struct {
															EimproSentopBsShift				shiftValue[ImproSentop_D_IM_PRO_SEN_BS_NUM];				/**< Bit shift value for BS0 ~ BS3 macro.<br>
																																							target registor	:BSAMNTx@@BSCTL	*/
															EimproSentopBsSat					satCompensation[ImproSentop_D_IM_PRO_SEN_BS_NUM];			/**< Saturation compensation for BS0 ~ BS3 macro. [0:Disable 1:Enable]<br>
																																							target registor	:BSLMDx@@BSCTL	*/
															EimproSentopBsBitShiftDir		shiftDir[ImproSentop_D_IM_PRO_SEN_BS_NUM];					/**< Bit shift direction value for BS0 ~ BS3 macro.<br>
																																							target registor	:BSLRx@@BSCTL	*/
														} TimproSentopBsCtrl;



														typedef struct {
															EimproSentopObtCommParttern		obt_comm_perttern;									/**< Select an OBT macro communication perttern. OBTCDCCTL1@@OBTCPAT */
														} T_IM_PRO_SENTOP_OBT_CTRL;
											修改成
														typedef struct {
															EimproSentopObtCommParttern		obtCommPerttern;									/**< Select an OBT macro communication perttern. OBTCDCCTL1@@OBTCPAT */
														} TimproSentopObtCtrl;



														typedef struct {
															UCHAR									coeff[4][2];										/**< OBT weight coefficient <br>
																																							target registor	:OBTCDCCTL2@@OBTDWC00 - @@OBTDWC31	*/
														} T_IM_PRO_SENTOP_OBT_WEIGHT_COEFF;
											修改成
														typedef struct {
															UCHAR									coeff[4][2];										/**< OBT weight coefficient <br>
																																							target registor	:OBTCDCCTL2@@OBTDWC00 - @@OBTDWC31	*/
														} TimproSentopObtWeightCoeff;



														typedef struct {
															USHORT								clock_lane_powerdown;									/**< LVDS PHY clock lane control. LVDSCTL@@LVDSCKPD */
															USHORT								data_lane_powerdown;									/**< LVDS PHY data lane control. LVDSCTL@@LVDSDLPD */
														} T_IM_PRO_SENTOP_LVDS_CTRL;
											修改成
														typedef struct {
															USHORT								clockLanePowerdown;									/**< LVDS PHY clock lane control. LVDSCTL@@LVDSCKPD */
															USHORT								dataLanePowerdown;									/**< LVDS PHY data lane control. LVDSCTL@@LVDSDLPD */
														} TimproSentopLvdsCtrl;



														typedef struct {
															BOOL								clk_ctrl_enabled;										/**< Enable Clock control.<br>
																																							FALSE: skip the setting the phy0_rxpclk2aen and phy1_rxpclk2aen.<br>
																																							TRUE:  set the phy0_rxpclk2aen and phy1_rxpclk2aen.  */
															EimproSentopSlvsLinkConn		link_mode;												/**< SLVS link connect control. SLVSECCTL@@SLVSECSEL */
															UCHAR								phy0_rxpdck;											/**< ComboPHY0 "I_RXPDCK" pin control. SLVSECCTL@@PHY0_RXPDCK<br>
																																							detail of this setting value, please refer to ComboPHY specifications. */
															UCHAR								phy1_rxpdck;											/**< ComboPHY0 "I_RXPDCK" pin control. SLVSECCTL@@PHY1_RXPDCK<br>
																																							detail of this setting value, please refer to ComboPHY specifications. */
															UCHAR								phy2_rxpdck;											/**< ComboPHY0 "I_RXPDCK" pin control. SLVSECCTL@@PHY2_RXPDCK<br>
																																							detail of this setting value, please refer to ComboPHY specifications. */
															UCHAR								phy3_rxpdck;											/**< ComboPHY0 "I_RXPDCK" pin control. SLVSECCTL@@PHY3_RXPDCK<br>
																																							detail of this setting value, please refer to ComboPHY specifications. */
															UCHAR								phy0_rxpclk2aen;										/**< ComboPHY0 "I_RXPCLK2AEN" pin control. SLVSECCTL@@PHY0_RXPCLK2AEN<br>
																																							detail of this setting value, please refer to ComboPHY specifications. */
															UCHAR								phy1_rxpclk2aen;										/**< ComboPHY1 "I_RXPCLK2AEN" pin control. SLVSECCTL@@PHY1_RXPCLK2AEN<br>
																																							detail of this setting value, please refer to ComboPHY specifications. */
														} T_IM_PRO_SENTOP_SLVS_CTRL;
											修改成
														typedef struct {
															BOOL								clkCtrlEnabled;										/**< Enable Clock control.<br>
																																							FALSE: skip the setting the phy0Rxpclk2aen and phy1Rxpclk2aen.<br>
																																							TRUE:  set the phy0Rxpclk2aen and phy1Rxpclk2aen.  */
															EimproSentopSlvsLinkConn		linkMode;												/**< SLVS link connect control. SLVSECCTL@@SLVSECSEL */
															UCHAR								phy0Rxpdck;											/**< ComboPHY0 "I_RXPDCK" pin control. SLVSECCTL@@PHY0_RXPDCK<br>
																																							detail of this setting value, please refer to ComboPHY specifications. */
															UCHAR								phy1Rxpdck;											/**< ComboPHY0 "I_RXPDCK" pin control. SLVSECCTL@@PHY1_RXPDCK<br>
																																							detail of this setting value, please refer to ComboPHY specifications. */
															UCHAR								phy2Rxpdck;											/**< ComboPHY0 "I_RXPDCK" pin control. SLVSECCTL@@PHY2_RXPDCK<br>
																																							detail of this setting value, please refer to ComboPHY specifications. */
															UCHAR								phy3Rxpdck;											/**< ComboPHY0 "I_RXPDCK" pin control. SLVSECCTL@@PHY3_RXPDCK<br>
																																							detail of this setting value, please refer to ComboPHY specifications. */
															UCHAR								phy0Rxpclk2aen;										/**< ComboPHY0 "I_RXPCLK2AEN" pin control. SLVSECCTL@@PHY0_RXPCLK2AEN<br>
																																							detail of this setting value, please refer to ComboPHY specifications. */
															UCHAR								phy1Rxpclk2aen;										/**< ComboPHY1 "I_RXPCLK2AEN" pin control. SLVSECCTL@@PHY1_RXPCLK2AEN<br>
																																							detail of this setting value, please refer to ComboPHY specifications. */
														} TimproSentopSlvsCtrl;



														typedef struct {
															EimproSentopSgIfOutputSel	sg_if_output_sel[D_IM_PRO_SEN_SG_NUM];					/**< Select an SG I/F output control. SGOUTCTL@@SGSEL0 - @@SGSEL3 */
														} T_IM_PRO_SENTOP_SG_CTRL;
											修改成
															typedef struct {
																EimproSentopSgIfOutputSel	sgIfOutputSel[D_IM_PRO_SEN_SG_NUM];					/**< Select an SG I/F output control. SGOUTCTL@@SGSEL0 - @@SGSEL3 */
															} TimproSentopSgCtrl;


														typedef struct {
															TimproSentopCphyCommonIfCtrl	common_if_ctrl;											/**< ComboPHY Common I/F Control. */
															TimproSentopCphyCpmodeCtrl	cpmode_ctrl[ImproSentop_D_IM_PRO_SENTOP_CPHY_NUM];					/**< ComboPHY CP mode Control. */
															TimproSentopCphyDelayCtrl		delay_ctrl[ImproSentop_D_IM_PRO_SENTOP_CPHY_NUM];					/**< ComboPHY Delay line Control. */
															TimproSentopCphyDesknewCtrl	desknew_ctrl[ImproSentop_D_IM_PRO_SENTOP_CPHY_NUM];					/**< ComboPHY DeSkew I/F Control. */
															TimproSentopCphyPll0Ctrl		pll0_ctrl;												/**< ComboPHY PLL0 I/F Control. */
														} T_IM_PRO_SENTOP_CPHY_CTRL;
											修改成
														typedef struct {
															TimproSentopCphyCommonIfCtrl	commonIfCtrl;											/**< ComboPHY Common I/F Control. */
															TimproSentopCphyCpmodeCtrl	cpmodeCtrl[ImproSentop_D_IM_PRO_SENTOP_CPHY_NUM];					/**< ComboPHY CP mode Control. */
															TimproSentopCphyDelayCtrl		delayCtrl[ImproSentop_D_IM_PRO_SENTOP_CPHY_NUM];					/**< ComboPHY Delay line Control. */
															TimproSentopCphyDesknewCtrl	desknewCtrl[ImproSentop_D_IM_PRO_SENTOP_CPHY_NUM];					/**< ComboPHY DeSkew I/F Control. */
															TimproSentopCphyPll0Ctrl		pll0Ctrl;												/**< ComboPHY PLL0 I/F Control. */
														} TimproSentopCphyCtrl;



														typedef struct {
															UCHAR								clklanesel;												/**< ComboPHY "I_CLKLANESEL" pin control. @@PHYx_CLKLANESEL. */
															UCHAR								clkmodesel;												/**< ComboPHY "I_CLKMODESEL" pin control. @@PHYx_CLKMODESEL. */
															UCHAR								clkoutren;												/**< ComboPHY "I_CLKOUTREN" pin control.  @@PHYx_CLKOUTREN. */
															UCHAR								clkoutlen;												/**< ComboPHY "I_CLKOUTLEN" pin control.  @@PHYx_CLKOUTLEN. */
														} T_IM_PRO_SENTOP_CPHY_CLK_CTRL;
											修改成
														typedef struct {
															UCHAR								clklanesel;												/**< ComboPHY "I_CLKLANESEL" pin control. @@PHYx_CLKLANESEL. */
															UCHAR								clkmodesel;												/**< ComboPHY "I_CLKMODESEL" pin control. @@PHYx_CLKMODESEL. */
															UCHAR								clkoutren;												/**< ComboPHY "I_CLKOUTREN" pin control.  @@PHYx_CLKOUTREN. */
															UCHAR								clkoutlen;												/**< ComboPHY "I_CLKOUTLEN" pin control.  @@PHYx_CLKOUTLEN. */
														} TimproSentopCphyClkCtrl;



														typedef struct {
															UCHAR								phy0_xbgrpd;											/**< ComboPHY "I_XBGRPD" pin control.  @@PHY0_XBGRPD. */
															UCHAR								phy1_xbgrpd;											/**< ComboPHY "I_XBGRPD" pin control.  @@PHY1_XBGRPD. */
															UCHAR								phy2_xbgrpd;											/**< ComboPHY "I_XBGRPD" pin control.  @@PHY2_XBGRPD. */
															UCHAR								phy3_xbgrpd;											/**< ComboPHY "I_XBGRPD" pin control.  @@PHY3_XBGRPD. */
														} T_IM_PRO_SENTOP_CPHY_BIAS_CTRL;
											修改成
														typedef struct {
															UCHAR								phy0Xbgrpd;											/**< ComboPHY "I_XBGRPD" pin control.  @@PHY0_XBGRPD. */
															UCHAR								phy1Xbgrpd;											/**< ComboPHY "I_XBGRPD" pin control.  @@PHY1_XBGRPD. */
															UCHAR								phy2Xbgrpd;											/**< ComboPHY "I_XBGRPD" pin control.  @@PHY2_XBGRPD. */
															UCHAR								phy3Xbgrpd;											/**< ComboPHY "I_XBGRPD" pin control.  @@PHY3_XBGRPD. */
														} TimproSentopCphyBiasCtrl;



														typedef struct {
															TimproSentopCphyCommonModeCtrl	common_ctrl;										/**< ComboPHY Common Mode Control. */
															UCHAR									pimode;												/**< ComboPHY "I_PIMODE" pin control.      @@PHYx_PIMODE. */
															UCHAR									picnt;												/**< ComboPHY "I_PICNT" pin control.       @@PHYx_PICNT. */
														} T_IM_PRO_SENTOP_CPHY_SLVS_MODE_CTRL;
											修改成
														typedef struct {
															TimproSentopCphyCommonModeCtrl	commonCtrl;										/**< ComboPHY Common Mode Control. */
															UCHAR									pimode;												/**< ComboPHY "I_PIMODE" pin control.      @@PHYx_PIMODE. */
															UCHAR									picnt;												/**< ComboPHY "I_PICNT" pin control.       @@PHYx_PICNT. */
														} TimproSentopCphySlvsModeCtrl;



														typedef struct {
															TimproSentopCphyCommonModeCtrl	commonCtrl;										/**< ComboPHY Common Mode Control. */
														} T_IM_PRO_SENTOP_CPHY_LVDS_MODE_CTRL;
											修改成
														typedef struct {
															TimproSentopCphyCommonModeCtrl	commonCtrl;										/**< ComboPHY Common Mode Control. */
														} TimproSentopCphyLvdsModeCtrl;



														typedef struct {
															TimproSentopCphyCommonModeCtrl	commonCtrl;										/**< ComboPHY Common Mode Control. */
															UCHAR									rxspden;											/**< ComboPHY "I_RXSPDEN" pin control.  @@PHYx_RXSPDEN. */
															UCHAR									dcntnum;											/**< ComboPHY "I_DCNTNUM" pin control.  @@PHYx_DCNTNUM. */
															UCHAR									grdwidth;											/**< ComboPHY "I_GRDWIDTH" pin control.  @@PHYx_GRDWIDTH. */
															UCHAR									rdwait;												/**< ComboPHY "I_RDWAIT" pin control.  @@PHYx_RDWAIT. */
															UINT32									funcseld0;											/**< ComboPHY "I_FUNCSELD0" pin control.   @@PHYx_FUNCSELD0. */
															UCHAR									vldprd;												/**< ComboPHY "I_VLDPRD" pin control.  @@PHY0_VLDPRD. */
														} T_IM_PRO_SENTOP_CPHY_DMIPI_MODE_CTRL;
											修改成
														typedef struct {
															TimproSentopCphyCommonModeCtrl	commonCtrl;										/**< ComboPHY Common Mode Control. */
															UCHAR									rxspden;											/**< ComboPHY "I_RXSPDEN" pin control.  @@PHYx_RXSPDEN. */
															UCHAR									dcntnum;											/**< ComboPHY "I_DCNTNUM" pin control.  @@PHYx_DCNTNUM. */
															UCHAR									grdwidth;											/**< ComboPHY "I_GRDWIDTH" pin control.  @@PHYx_GRDWIDTH. */
															UCHAR									rdwait;												/**< ComboPHY "I_RDWAIT" pin control.  @@PHYx_RDWAIT. */
															UINT32									funcseld0;											/**< ComboPHY "I_FUNCSELD0" pin control.   @@PHYx_FUNCSELD0. */
															UCHAR									vldprd;												/**< ComboPHY "I_VLDPRD" pin control.  @@PHY0_VLDPRD. */
														} TimproSentopCphyDmipiModeCtrl;



														typedef struct {
															TimproSentopCphyCommonModeCtrl	commonCtrl;										/**< ComboPHY Common Mode Control. */
															UCHAR									rxspden;											/**< ComboPHY "I_RXSPDEN" pin control.  @@PHYx_RXSPDEN. */
															UCHAR									dcntnum;											/**< ComboPHY "I_DCNTNUM" pin control.  @@PHYx_DCNTNUM. */
															UCHAR									grdwidth;											/**< ComboPHY "I_GRDWIDTH" pin control.  @@PHYx_GRDWIDTH. */
															UCHAR									rdwait;												/**< ComboPHY "I_RDWAIT" pin control.  @@PHYx_RDWAIT. */
															UINT32									funcseld0;											/**< ComboPHY "I_FUNCSELD0" pin control.   @@PHYx_FUNCSELD0. */
															UCHAR									vldprd;												/**< ComboPHY "I_VLDPRD" pin control.  @@PHY0_VLDPRD. */
														} T_IM_PRO_SENTOP_CPHY_DMIPI_MODE_CTRL;
											修改成
														typedef struct {
															TimproSentopCphyCommonModeCtrl	commonCtrl;										/**< ComboPHY Common Mode Control. */
															UCHAR									rxspden;											/**< ComboPHY "I_RXSPDEN" pin control.  @@PHYx_RXSPDEN. */
															UCHAR									dcntnum;											/**< ComboPHY "I_DCNTNUM" pin control.  @@PHYx_DCNTNUM. */
															UCHAR									grdwidth;											/**< ComboPHY "I_GRDWIDTH" pin control.  @@PHYx_GRDWIDTH. */
															UCHAR									rdwait;												/**< ComboPHY "I_RDWAIT" pin control.  @@PHYx_RDWAIT. */
															UINT32									funcseld0;											/**< ComboPHY "I_FUNCSELD0" pin control.   @@PHYx_FUNCSELD0. */
															UCHAR									vldprd;												/**< ComboPHY "I_VLDPRD" pin control.  @@PHY0_VLDPRD. */
														} TimproSentopCphyDmipiModeCtrl;



														typedef struct {
															UCHAR								clksetsel;												/**< ComboPHY "I_CLKSETSEL" pin control.   @@PHYx_CLKSETSEL. */
															UCHAR								cphyset_cp0;											/**< ComboPHY "I_CPHYSET_CP0" pin control. @@PHYx_CPHYSET_CP0. */
															UCHAR								cphyset_cp1;											/**< ComboPHY "I_CPHYSET_CP1" pin control. @@PHYx_CPHYSET_CP1. */
															UCHAR								cphyset_cp2;											/**< ComboPHY "I_CPHYSET_CP2" pin control. @@PHYx_CPHYSET_CP2. */
															USHORT								funcselck;												/**< ComboPHY "I_FUNCSELCK" pin control.   @@PHYx_FUNCSELCK. */
															UINT32								funcseld0;												/**< ComboPHY "I_FUNCSELD0" pin control.   @@PHYx_FUNCSELD0. */
															UINT32								funcseld1;												/**< ComboPHY "I_FUNCSELD1" pin control.   @@PHYx_FUNCSELD1. */
															UINT32								funcseld2;												/**< ComboPHY "I_FUNCSELD2" pin control.   @@PHYx_FUNCSELD2. */
															UINT32								funcseld3;												/**< ComboPHY "I_FUNCSELD3" pin control.   @@PHYx_FUNCSELD3. */
														} T_IM_PRO_SENTOP_CPHY_IF_EXT_SIGNAL_CTRL;
											修改成
															typedef struct {
																UCHAR								clksetsel;												/**< ComboPHY "I_CLKSETSEL" pin control.   @@PHYx_CLKSETSEL. */
																UCHAR								cphysetCp0;											/**< ComboPHY "I_CPHYSET_CP0" pin control. @@PHYx_CPHYSET_CP0. */
																UCHAR								cphysetCp1;											/**< ComboPHY "I_CPHYSET_CP1" pin control. @@PHYx_CPHYSET_CP1. */
																UCHAR								cphysetCp2;											/**< ComboPHY "I_CPHYSET_CP2" pin control. @@PHYx_CPHYSET_CP2. */
																USHORT								funcselck;												/**< ComboPHY "I_FUNCSELCK" pin control.   @@PHYx_FUNCSELCK. */
																UINT32								funcseld0;												/**< ComboPHY "I_FUNCSELD0" pin control.   @@PHYx_FUNCSELD0. */
																UINT32								funcseld1;												/**< ComboPHY "I_FUNCSELD1" pin control.   @@PHYx_FUNCSELD1. */
																UINT32								funcseld2;												/**< ComboPHY "I_FUNCSELD2" pin control.   @@PHYx_FUNCSELD2. */
																UINT32								funcseld3;												/**< ComboPHY "I_FUNCSELD3" pin control.   @@PHYx_FUNCSELD3. */
															} TimproSentopCphyIfExtSignalCtrl;



															typedef struct {
																TimproSentopCphyDesknewMoniStatus	desknew_moni[4];								/**< ComboPHY0~3 DesKnew Monitor information. */
															} T_IM_PRO_SENTOP_CPHY_DESKNEW_MONITOR;
											修改成
															typedef struct {
																TimproSentopCphyDesknewMoniStatus	desknew_moni[4];								/**< ComboPHY0~3 DesKnew Monitor information. */
															} TimproSentopCphyDesknewMonitor;



															typedef struct {
																TimproSentopCphyDelaylineMoniStatus	delayline_moni[4];								/**< ComboPHY0~3 Delayline Monitor information. */
															} T_IM_PRO_SENTOP_CPHY_DELAYLINE_MONITOR;
											修改成
															typedef struct {
																TimproSentopCphyDesknewMoniStatus	desknew_moni[4];								/**< ComboPHY0~3 DesKnew Monitor information. */
															} TimproSentopCphyDesknewMonitor;



														typedef struct {
															ULLONG								phy0_cdrmon;											/**< ComboPHY "O_CDRMON" pin control.  @@PHY0_CDRMON.		*/
															ULLONG								phy1_cdrmon;											/**< ComboPHY "1_CDRMON" pin control.  @@PHY1_CDRMON.		*/
															ULLONG								phy2_cdrmon;											/**< ComboPHY "2_CDRMON" pin control.  @@PHY2_CDRMON.		*/
															ULLONG								phy3_cdrmon;											/**< ComboPHY "3_CDRMON" pin control.  @@PHY2_CDRMON.		*/
														} T_IM_PRO_SENTOP_CPHY_COMMON_IF_MONITOR;
											修改成
														typedef struct {
															ULLONG								phy0Cdrmon;											/**< ComboPHY "O_CDRMON" pin control.  @@PHY0_CDRMON.		*/
															ULLONG								phy1Cdrmon;											/**< ComboPHY "1_CDRMON" pin control.  @@PHY1_CDRMON.		*/
															ULLONG								phy2Cdrmon;											/**< ComboPHY "2_CDRMON" pin control.  @@PHY2_CDRMON.		*/
															ULLONG								phy3Cdrmon;											/**< ComboPHY "3_CDRMON" pin control.  @@PHY2_CDRMON.		*/
														} TimproSentopCphyCommonIfMonitor;

												
							公共方法:
							
										im_pro_sentop_set_cphy_common_ctrl    修改成		impro_sentop_set_cphy_common_ctrl
										Im_PRO_SENTOP_Init    修改成	impro_sentop_init
										Im_PRO_SENTOP_SW_Reset    修改成		impro_sentop_sw_reset
										Im_PRO_SENTOP_Control_Clock  修改成	impro_sentop_control_clock
										Im_PRO_SENTOP_Ctrl    修改成		impro_sentop_ctrl
										Im_PRO_SENTOP_BS_Ctrl  修改成	impro_sentop_bs_ctrl					
										Im_PRO_SENTOP_OBT_Ctrl    修改成		impro_sentop_obt_ctrl
										Im_PRO_SENTOP_OBT_Set_Weight_Coeff    修改成	impro_sentop_obt_set_weight_coeff
										Im_PRO_SENTOP_LVDS_Ctrl    修改成		impro_sentop_lvds_ctrl
										Im_PRO_SENTOP_SLVS_Ctrl  修改成	impro_sentop_slvs_ctrl
										Im_PRO_SENTOP_SG_Ctrl    修改成		impro_sentop_sg_ctrl
										Im_PRO_SENTOP_CPHY_Ctrl  修改成	impro_sentop_cphy_ctrl
										Im_PRO_SENTOP_CPHY_Clk_Ctrl    修改成		impro_sentop_cphy_clk_ctrl
										
										Im_PRO_SENTOP_CPHY_Bias_Ctrl    修改成		impro_sentop_cphy_bias_ctrl
										Im_PRO_SENTOP_CPHY_Slvs_Mode_Ctrl  修改成	impro_sentop_cphy_slvs_mode_ctrl
										Im_PRO_SENTOP_CPHY_Lvds_Mode_Ctrl    修改成		impro_sentop_cphy_lvds_mode_ctrl
										Im_PRO_SENTOP_CPHY_DMIPI_Mode_Ctrl  修改成	impro_sentop_cphy_dmipi_mode_ctrl					
										Im_PRO_SENTOP_CPHY_CMIPI_Mode_Ctrl    修改成		impro_sentop_cphy_dmipi_mode_ctrl
										Im_PRO_SENTOP_CPHY_Ext_Signal_Ctrl    修改成	impro_sentop_cphy_ext_signal_ctrl
										Im_PRO_SENTOP_CPHY_Get_DesKnew_Monitor    修改成		impro_sentop_cphy_get_des_knew_ctrl
										Im_PRO_SENTOP_CPHY_Get_DelayLine_Monitor  修改成	impro_sentop_cphy_get_delay_line_monitor
										Im_PRO_SENTOP_CPHY_Get_Common_If_Monitor    修改成		impro_sentop_cphy_get_common_if_monitor
										Im_PRO_SENTOP_Pseudo_VD_Issue  修改成	impro_sentop_pseudo_vd_issue		
										
										
										
										
										
			(4)修改类 ImproSencmipi:
					
						枚举:
			
													typedef enum {
														E_IM_PRO_CMIPI_LANE_1 = 0,	/**< 1-lane input */
														E_IM_PRO_CMIPI_LANE_2,		/**< 2-lane input */
														E_IM_PRO_CMIPI_LANE_4 = 3,	/**< 4-lane input */
													} E_IM_PRO_CMIPI_LANE;
										修改成
													typedef enum {
														ImproSencmipi_E_IM_PRO_CMIPI_LANE_1 = 0,	/**< 1-lane input */
														ImproSencmipi_E_IM_PRO_CMIPI_LANE_2,		/**< 2-lane input */
														ImproSencmipi_E_IM_PRO_CMIPI_LANE_4 = 3,	/**< 4-lane input */
													} EimproCmipiLane;
			
			
			
												typedef enum {
													E_IM_PRO_CMIPI_VC_0 = 0,	/**< Virtual Channel0 */
													E_IM_PRO_CMIPI_VC_1,		/**< Virtual Channel1 */
													E_IM_PRO_CMIPI_VC_2,		/**< Virtual Channel2 */
													E_IM_PRO_CMIPI_VC_3,		/**< Virtual Channel3 */
													E_IM_PRO_CMIPI_VC_INVALID,	/**< Virtual Channel invalid ( All output ) */
												} E_IM_PRO_CMIPI_VC;
									修改成
												typedef enum {
													ImproSencmipi_E_IM_PRO_CMIPI_VC_0 = 0,	/**< Virtual Channel0 */
													ImproSencmipi_E_IM_PRO_CMIPI_VC_1,		/**< Virtual Channel1 */
													ImproSencmipi_E_IM_PRO_CMIPI_VC_2,		/**< Virtual Channel2 */
													ImproSencmipi_E_IM_PRO_CMIPI_VC_3,		/**< Virtual Channel3 */
													ImproSencmipi_E_IM_PRO_CMIPI_VC_INVALID,	/**< Virtual Channel invalid ( All output ) */
												} EimproCmipiVc;
											
							
							
												typedef enum {
													E_IM_PRO_CMIPI_IN_DATA_MODE_8BIT = 0,				/**< RAW 8-bit mode */
													E_IM_PRO_CMIPI_IN_DATA_MODE_10BIT,					/**< RAW 10-bit mode */
													E_IM_PRO_CMIPI_IN_DATA_MODE_12BIT,					/**< RAW 12-bit mode */
													E_IM_PRO_CMIPI_IN_DATA_MODE_14BIT,					/**< RAW 14-bit mode */
													E_IM_PRO_CMIPI_IN_DATA_MODE_LEGACY_YUV420,			/**< Legacy YUV420 8-bit  */
													E_IM_PRO_CMIPI_IN_DATA_MODE_YUV422,					/**< YUV422 8-bit */
													E_IM_PRO_CMIPI_IN_DATA_MODE_USER_DEF,				/**< User Defined/Embedded Data */
												} E_IM_PRO_CMIPI_IN_DATA_MODE;
									修改成
												typedef enum {
													ImproSencmipi_E_IM_PRO_CMIPI_IN_DATA_MODE_8BIT = 0,				/**< RAW 8-bit mode */
													ImproSencmipi_E_IM_PRO_CMIPI_IN_DATA_MODE_10BIT,					/**< RAW 10-bit mode */
													ImproSencmipi_E_IM_PRO_CMIPI_IN_DATA_MODE_12BIT,					/**< RAW 12-bit mode */
													ImproSencmipi_E_IM_PRO_CMIPI_IN_DATA_MODE_14BIT,					/**< RAW 14-bit mode */
													ImproSencmipi_E_IM_PRO_CMIPI_IN_DATA_MODE_LEGACY_YUV420,			/**< Legacy YUV420 8-bit  */
													ImproSencmipi_E_IM_PRO_CMIPI_IN_DATA_MODE_YUV422,					/**< YUV422 8-bit */
													ImproSencmipi_E_IM_PRO_CMIPI_IN_DATA_MODE_USER_DEF,				/**< User Defined/Embedded Data */
												} EimproCmipiInDataMode;			
							
							

													typedef enum {
														E_IM_PRO_CMIPI_OUT_MODE_NO_OUTPUT = 0,				/**< No output */
														E_IM_PRO_CMIPI_OUT_MODE_1LINE = 2,					/**< 1-line output mode */
														E_IM_PRO_CMIPI_OUT_MODE_2POINT,						/**< 2-point output mode */
														E_IM_PRO_CMIPI_OUT_MODE_4POINT,						/**< 4-point output mode */
														E_IM_PRO_CMIPI_OUT_MODE_8POINT,						/**< 8-point output mode */
													} E_IM_PRO_CMIPI_OUT_MODE;
									修改成
													typedef enum {
														ImproSencmipi_E_IM_PRO_CMIPI_OUT_MODE_NO_OUTPUT = 0,				/**< No output */
														ImproSencmipi_E_IM_PRO_CMIPI_OUT_MODE_1LINE = 2,					/**< 1-line output mode */
														ImproSencmipi_E_IM_PRO_CMIPI_OUT_MODE_2POINT,						/**< 2-point output mode */
														ImproSencmipi_E_IM_PRO_CMIPI_OUT_MODE_4POINT,						/**< 4-point output mode */
														ImproSencmipi_E_IM_PRO_CMIPI_OUT_MODE_8POINT,						/**< 8-point output mode */
													} EimproCmipiOutMode;	



													typedef enum {
														E_IM_PRO_CMIPI_DT_OUT_DIS = 0,						/**< DT selection mode is off */
														E_IM_PRO_CMIPI_DT_OUT_EN,							/**< DT selection mode is on */
													} E_IM_PRO_CMIPI_DT_OUT;
									修改成
													typedef enum {
														ImproSencmipi_E_IM_PRO_CMIPI_DT_OUT_DIS = 0,						/**< DT selection mode is off */
														ImproSencmipi_E_IM_PRO_CMIPI_DT_OUT_EN,							/**< DT selection mode is on */
													} EimproCmipiDtOut;
							


													typedef enum {
														E_IM_PRO_CMIPI_SEL_CYCLE_0 = 0,						/**< The cycle between HDP and pixel data is 0 cycle. */
														E_IM_PRO_CMIPI_SEL_CYCLE_2,							/**< The cycle between HDP and pixel data is 2 cycle. */
													} E_IM_PRO_CMIPI_SEL_CYCLE;
									修改成
													typedef enum {
														ImproSencmipi_E_IM_PRO_CMIPI_SEL_CYCLE_0 = 0,						/**< The cycle between HDP and pixel data is 0 cycle. */
														ImproSencmipi_E_IM_PRO_CMIPI_SEL_CYCLE_2,							/**< The cycle between HDP and pixel data is 2 cycle. */
													} EimproCmipiSelCycle;
							
							
							
							结构体:
							
															typedef struct {
																UCHAR							rxstopstate_l0;			/**< RxStopstate_L0 signal status.	target registor	:@@SSL0				*/
																UCHAR							rxstopstate_l1;			/**< RxStopstate_L1 signal status.	target registor	:@@SSL1				*/
																UCHAR							rxstopstate_l2;			/**< RxStopstate_L2 signal status.	target registor	:@@SSL2				*/
																UCHAR							lstatus0;				/**< Lane0 status.					target registor	:@@RLR_LSTATUS0		*/
																UCHAR							lstatus1;				/**< Lane1 status.					target registor	:@@RLR_LSTATUS1		*/
																UCHAR							lstatus2;				/**< Lane2 status.					target registor	:@@RLR_LSTATUS2		*/
																UCHAR							werrcnt0;				/**< Lane0 Word error count.		target registor	:@@RLR_WERRCNT0		*/
																UCHAR							werrcnt1;				/**< Lane1 Word error count.		target registor	:@@RLR_WERRCNT1		*/
																UCHAR							werrcnt2;				/**< Lane2 Word error count.		target registor	:@@RLR_WERRCNT2		*/
																ULLONG							wcnt0;					/**< Lane0 Word count.				target registor	:@@RLR_WCNT0		*/
																ULLONG							wcnt1;					/**< Lane1 Word count.				target registor	:@@RLR_WCNT1		*/
																ULLONG							wcnt2;					/**< Lane2 Word count.				target registor	:@@RLR_WCNT2		*/
																UCHAR							syerrcnt0;				/**< Lane0 Symbol error count.		target registor	:@@RLR_SYERRCNT0	*/
																UCHAR							syerrcnt1;				/**< Lane1 Symbol error count.		target registor	:@@RLR_SYERRCNT1	*/
																UCHAR							syerrcnt2;				/**< Lane2 Symbol error count.		target registor	:@@RLR_SYERRCNT2	*/
																ULLONG							syerrloc0;				/**< Lane0 error location.			target registor	:@@RLR_SYERRLOC0	*/
																ULLONG							syerrloc1;				/**< Lane1 error location.			target registor	:@@RLR_SYERRLOC1	*/
																ULLONG							syerrloc2;				/**< Lane2 error location.			target registor	:@@RLR_SYERRLOC2	*/
															} T_IM_PRO_CMIPI_STATUS;
											修改成
															typedef struct {
																UCHAR							rxstopstateL0;			/**< RxStopstate_L0 signal status.	target registor	:@@SSL0				*/
																UCHAR							rxstopstateL1;			/**< RxStopstate_L1 signal status.	target registor	:@@SSL1				*/
																UCHAR							rxstopstateL2;			/**< RxStopstate_L2 signal status.	target registor	:@@SSL2				*/
																UCHAR							lstatus0;				/**< Lane0 status.					target registor	:@@RLR_LSTATUS0		*/
																UCHAR							lstatus1;				/**< Lane1 status.					target registor	:@@RLR_LSTATUS1		*/
																UCHAR							lstatus2;				/**< Lane2 status.					target registor	:@@RLR_LSTATUS2		*/
																UCHAR							werrcnt0;				/**< Lane0 Word error count.		target registor	:@@RLR_WERRCNT0		*/
																UCHAR							werrcnt1;				/**< Lane1 Word error count.		target registor	:@@RLR_WERRCNT1		*/
																UCHAR							werrcnt2;				/**< Lane2 Word error count.		target registor	:@@RLR_WERRCNT2		*/
																ULLONG							wcnt0;					/**< Lane0 Word count.				target registor	:@@RLR_WCNT0		*/
																ULLONG							wcnt1;					/**< Lane1 Word count.				target registor	:@@RLR_WCNT1		*/
																ULLONG							wcnt2;					/**< Lane2 Word count.				target registor	:@@RLR_WCNT2		*/
																UCHAR							syerrcnt0;				/**< Lane0 Symbol error count.		target registor	:@@RLR_SYERRCNT0	*/
																UCHAR							syerrcnt1;				/**< Lane1 Symbol error count.		target registor	:@@RLR_SYERRCNT1	*/
																UCHAR							syerrcnt2;				/**< Lane2 Symbol error count.		target registor	:@@RLR_SYERRCNT2	*/
																ULLONG							syerrloc0;				/**< Lane0 error location.			target registor	:@@RLR_SYERRLOC0	*/
																ULLONG							syerrloc1;				/**< Lane1 error location.			target registor	:@@RLR_SYERRLOC1	*/
																ULLONG							syerrloc2;				/**< Lane2 error location.			target registor	:@@RLR_SYERRLOC2	*/
															} TimproCmipiStatus;
											



															typedef struct {
																EimproCmipiLane				lane_sel;				/**< Number of input lanes selection.<br>
																															target registor	:@@LANE	*/
																EimproCmipiVc				vc_mode_sel[2];			/**< select the Virtual Channel value for the packets output to the OUT0/1 side.<br>
																															target registor	:@@VCOUT0/1	*/
																EimproCmipiInDataMode		input_data_mode[2];		/**< select the input data mode.<br>
																															target registor	:@@DTMD0/1	*/
																EimproCmipiOutMode			output_data_mode[2];	/**< Output data mode selection.<br>
																															target registor	:@@OUTMD0/1	*/
																EimproCmipiDtOut			output_dt_sel[2];		/**< Output DT selection mode.<br>
																															target registor	:@@DTCOMD0/1	*/
																UCHAR							output_dt_setting[2];	/**< DataType value for the packets output to the OUT0/1 side.<br>
																															target registor	:@@DTCO0/1	*/
																EimproCmipiSelCycle		out_cycle[2];			/**< Setting the cycle for OUT0/1 side.<br>
																															target registor	:@@HDPDSEL0/1	*/
																TimproCmipiPhyCtrl			phy_ctrl;				/**< MIPI C-PHY control. */
															} T_IM_PRO_CMIPI_CTRL;
											修改成
															typedef struct {
																EimproCmipiLane				laneSel;				/**< Number of input lanes selection.<br>
																															target registor	:@@LANE	*/
																EimproCmipiVc				vcModeSel[2];			/**< select the Virtual Channel value for the packets output to the OUT0/1 side.<br>
																															target registor	:@@VCOUT0/1	*/
																EimproCmipiInDataMode		inputDataMode[2];		/**< select the input data mode.<br>
																															target registor	:@@DTMD0/1	*/
																EimproCmipiOutMode			outputDataMode[2];	/**< Output data mode selection.<br>
																															target registor	:@@OUTMD0/1	*/
																EimproCmipiDtOut			outputDtSel[2];		/**< Output DT selection mode.<br>
																															target registor	:@@DTCOMD0/1	*/
																UCHAR							outputDtSetting[2];	/**< DataType value for the packets output to the OUT0/1 side.<br>
																															target registor	:@@DTCO0/1	*/
																EimproCmipiSelCycle		outCycle[2];			/**< Setting the cycle for OUT0/1 side.<br>
																															target registor	:@@HDPDSEL0/1	*/
																TimproCmipiPhyCtrl			phyCtrl;				/**< MIPI C-PHY control. */
															} TimproCmipiCtrl;				
							
							
														
							公共方法:
							
										Im_PRO_CMIPI_Init    修改成		impro_sencmipi_init
										Im_PRO_CMIPI_SR  修改成	impro_sencmipi_sr
										Im_PRO_CMIPI_Start    修改成		impro_sencmipi_start
										Im_PRO_CMIPI_Stop  修改成	impro_sencmipi_stop					
										Im_PRO_CMIPI_Ctrl    修改成		impro_sencmipi_ctrl
										Im_PRO_CMIPI_Set_PAEN    修改成	impro_sencmipi_set_pean
										Im_PRO_CMIPI_Get_Status    修改成		impro_sencmipi_get_status
																	
										
										
										
										
										
			(5)修改类 ImproSendmipi:
					
						枚举:
			
												typedef enum {
													E_IM_PRO_DMIPI_LANE_1 = 0,	/**< 1-lane input */
													E_IM_PRO_DMIPI_LANE_2,		/**< 2-lane input */
													E_IM_PRO_DMIPI_LANE_4 = 3,	/**< 4-lane input */
												} E_IM_PRO_DMIPI_LANE;
										修改成
												typedef enum {
													ImproSendmipi_E_IM_PRO_DMIPI_LANE_1 = 0,	/**< 1-lane input */
													ImproSendmipi_E_IM_PRO_DMIPI_LANE_2,		/**< 2-lane input */
													ImproSendmipi_E_IM_PRO_DMIPI_LANE_4 = 3,	/**< 4-lane input */
												} EimproDmipiLane;
			
			
			
												typedef enum {
													E_IM_PRO_DMIPI_VC_0 = 0,	/**< Virtual Channel0 */
													E_IM_PRO_DMIPI_VC_1,		/**< Virtual Channel1 */
													E_IM_PRO_DMIPI_VC_2,		/**< Virtual Channel2 */
													E_IM_PRO_DMIPI_VC_3,		/**< Virtual Channel3 */
												} E_IM_PRO_DMIPI_VC;
									修改成
												typedef enum {
													ImproSendmipi_E_IM_PRO_DMIPI_VC_0 = 0,	/**< Virtual Channel0 */
													ImproSendmipi_E_IM_PRO_DMIPI_VC_1,		/**< Virtual Channel1 */
													ImproSendmipi_E_IM_PRO_DMIPI_VC_2,		/**< Virtual Channel2 */
													ImproSendmipi_E_IM_PRO_DMIPI_VC_3,		/**< Virtual Channel3 */
												} EimproDmipiVc;
											
							
							
												typedef enum {
													E_IM_PRO_DMIPI_IN_DATA_MODE_8BIT = 0,				/**< RAW 8-bit mode */
													E_IM_PRO_DMIPI_IN_DATA_MODE_10BIT,					/**< RAW 10-bit mode */
													E_IM_PRO_DMIPI_IN_DATA_MODE_12BIT,					/**< RAW 12-bit mode */
													E_IM_PRO_DMIPI_IN_DATA_MODE_14BIT,					/**< RAW 14-bit mode */
													E_IM_PRO_DMIPI_IN_DATA_MODE_LEGACY_YUV420,			/**< Legacy YUV420 8-bit  */
													E_IM_PRO_DMIPI_IN_DATA_MODE_YUV422,					/**< YUV422 8-bit */
													E_IM_PRO_DMIPI_IN_DATA_MODE_USER_DEF,				/**< User Defined/Embedded Data */
												} EimproDmipiInDataMode;
									修改成
												typedef enum {
													ImproSendmipi_E_IM_PRO_DMIPI_IN_DATA_MODE_8BIT = 0,				/**< RAW 8-bit mode */
													ImproSendmipi_E_IM_PRO_DMIPI_IN_DATA_MODE_10BIT,					/**< RAW 10-bit mode */
													ImproSendmipi_E_IM_PRO_DMIPI_IN_DATA_MODE_12BIT,					/**< RAW 12-bit mode */
													ImproSendmipi_E_IM_PRO_DMIPI_IN_DATA_MODE_14BIT,					/**< RAW 14-bit mode */
													ImproSendmipi_E_IM_PRO_DMIPI_IN_DATA_MODE_LEGACY_YUV420,			/**< Legacy YUV420 8-bit  */
													ImproSendmipi_E_IM_PRO_DMIPI_IN_DATA_MODE_YUV422,					/**< YUV422 8-bit */
													ImproSendmipi_E_IM_PRO_DMIPI_IN_DATA_MODE_USER_DEF,				/**< User Defined/Embedded Data */
												} EimproDmipiInDataMode;
							
							

												typedef enum {
													E_IM_PRO_DMIPI_OUT_MODE_NO_OUTPUT = 0,				/**< No output */
													E_IM_PRO_DMIPI_OUT_MODE_1LINE = 2,					/**< 1-line output mode */
													E_IM_PRO_DMIPI_OUT_MODE_2POINT,						/**< 2-point output mode */
													E_IM_PRO_DMIPI_OUT_MODE_4POINT,						/**< 4-point output mode */
													E_IM_PRO_DMIPI_OUT_MODE_8POINT,						/**< 8-point output mode */
												} E_IM_PRO_DMIPI_OUT_MODE;
									修改成
												typedef enum {
													ImproSendmipi_E_IM_PRO_DMIPI_OUT_MODE_NO_OUTPUT = 0,				/**< No output */
													ImproSendmipi_E_IM_PRO_DMIPI_OUT_MODE_1LINE = 2,					/**< 1-line output mode */
													ImproSendmipi_E_IM_PRO_DMIPI_OUT_MODE_2POINT,						/**< 2-point output mode */
													ImproSendmipi_E_IM_PRO_DMIPI_OUT_MODE_4POINT,						/**< 4-point output mode */
													ImproSendmipi_E_IM_PRO_DMIPI_OUT_MODE_8POINT,						/**< 8-point output mode */
												} EimproDmipiOutMode;



												typedef enum {
													E_IM_PRO_DMIPI_DT_OUT_DIS = 0,						/**< DT selection mode is off */
													E_IM_PRO_DMIPI_DT_OUT_EN,							/**< DT selection mode is on */
												} E_IM_PRO_DMIPI_DT_OUT;
									修改成
												typedef enum {
													ImproSendmipi_E_IM_PRO_DMIPI_DT_OUT_DIS = 0,						/**< DT selection mode is off */
													ImproSendmipi_E_IM_PRO_DMIPI_DT_OUT_EN,							/**< DT selection mode is on */
												} EimproDmipiDtOut;
							


													typedef enum {
														E_IM_PRO_DMIPI_SEL_CYCLE_0 = 0,						/**< The cycle between HDP and pixel data is 0 cycle. */
														E_IM_PRO_DMIPI_SEL_CYCLE_2,							/**< The cycle between HDP and pixel data is 2 cycle. */
													} E_IM_PRO_DMIPI_SEL_CYCLE;
									修改成
													typedef enum {
														ImproSendmipi_E_IM_PRO_DMIPI_SEL_CYCLE_0 = 0,						/**< The cycle between HDP and pixel data is 0 cycle. */
														ImproSendmipi_E_IM_PRO_DMIPI_SEL_CYCLE_2,							/**< The cycle between HDP and pixel data is 2 cycle. */
													} EimproDmipiSelCycle;




												typedef enum {
													E_IM_PRO_DMIPI_RXSYNCMODE_PERFECTLY_MATCHED = 0,	/**< Only perfectly-matched sync code is allowed. */
													E_IM_PRO_DMIPI_RXSYNCMODE_1BIT_DISCREPANCY,			/**< One bit of discrepancy between sync codes is allowed. */
												} E_IM_PRO_DMIPI_RXSYNCMODE;
									修改成
													typedef enum {
														ImproSendmipi_E_IM_PRO_DMIPI_SEL_CYCLE_0 = 0,						/**< The cycle between HDP and pixel data is 0 cycle. */
														ImproSendmipi_E_IM_PRO_DMIPI_SEL_CYCLE_2,							/**< The cycle between HDP and pixel data is 2 cycle. */
													} EimproDmipiSelCycle;



													typedef enum {
														E_IM_PRO_DMIPI_RXENABLE_ALL_OUT0 = 0,				/**< All RxEnable0~3 signals output "0". */
														E_IM_PRO_DMIPI_RXENABLE_OUT1,						/**< The corresponding RxEnable signal outputs "1". */
													} E_IM_PRO_DMIPI_RXENABLE;
									修改成
													typedef enum {
														ImproSendmipi_E_IM_PRO_DMIPI_RXENABLE_ALL_OUT0 = 0,				/**< All RxEnable0~3 signals output "0". */
														ImproSendmipi_E_IM_PRO_DMIPI_RXENABLE_OUT1,						/**< The corresponding RxEnable signal outputs "1". */
													} EimproDmipiRxenable;

							
							
							
							结构体:
							
															typedef struct {
																EimproDmipiLane				laneSel;				/**< Number of input lanes selection.<br>
																															target registor	:@@LANE	*/
																EimproDmipiVc				vcModeSel[2];			/**< select the Virtual Channel value for the packets output to the OUT0/1 side.<br>
																															target registor	:@@VCOUT0/1	*/
																EimproDmipiInDataMode		inputDataMode[2];		/**< select the input data mode.<br>
																															target registor	:@@DTMD0/1	*/
																EimproDmipiOutMode			outputDataMode[2];	/**< Output data mode selection.<br>
																															target registor	:@@OUTMD0/1	*/
																EimproDmipiDtOut			outputDtSel[2];		/**< Output DT selection mode.<br>
																															target registor	:@@DTCOMD0/1	*/
																UCHAR							outputDtSetting[2];	/**< DataType value for the packets output to the OUT0/1 side.<br>
																															target registor	:@@DTCO0/1	*/
																TimproDmipiPhyCtrl			phyCtrl;				/**< MIPI D-PHY control. */
																EimproDmipiSelCycle		outCycle[2];			/**< Setting the cycle for OUT0/1 side.<br>
																															target registor	:@@HDPDSEL0/1	*/
															} T_IM_PRO_DMIPI_CTRL;
											修改成
															typedef struct {
																EimproDmipiLane				laneSel;				/**< Number of input lanes selection.<br>
																															target registor	:@@LANE	*/
																EimproDmipiVc				vcModeSel[2];			/**< select the Virtual Channel value for the packets output to the OUT0/1 side.<br>
																															target registor	:@@VCOUT0/1	*/
																EimproDmipiInDataMode		inputDataMode[2];		/**< select the input data mode.<br>
																															target registor	:@@DTMD0/1	*/
																EimproDmipiOutMode			outputDataMode[2];	/**< Output data mode selection.<br>
																															target registor	:@@OUTMD0/1	*/
																EimproDmipiDtOut			outputDtSel[2];		/**< Output DT selection mode.<br>
																															target registor	:@@DTCOMD0/1	*/
																UCHAR							outputDtSetting[2];	/**< DataType value for the packets output to the OUT0/1 side.<br>
																															target registor	:@@DTCO0/1	*/
																TimproDmipiPhyCtrl			phyCtrl;				/**< MIPI D-PHY control. */
																EimproDmipiSelCycle		outCycle[2];			/**< Setting the cycle for OUT0/1 side.<br>
																															target registor	:@@HDPDSEL0/1	*/
															} TimproDmipiCtrl;
											



															typedef struct {
																ULONG							input_signal_status;		/**< status of the signals input to D-PHY.<br>
																															target registor	:@@MPIDPVR	*/
																ULONG							skew_calibration_status;	/**< status of the skew calibration to D-PHY.<br>
																															target registor	:@@MPISCS	*/
															} T_IM_PRO_DMIPI_STATUS;
											修改成
														typedef struct {
															ULONG							inputSignalStatus;		/**< status of the signals input to D-PHY.<br>
																														target registor	:@@MPIDPVR	*/
															ULONG							skewCalibrationStatus;	/**< status of the skew calibration to D-PHY.<br>
																														target registor	:@@MPISCS	*/
														} TimproDmipiStatus;
							
							
														
							公共方法:
							
										Im_PRO_DMIPI_Init    修改成		impro_sendmipi_init
										Im_PRO_DMIPI_SR  修改成	impro_sendmipi_sr
										Im_PRO_DMIPI_Start    修改成		impro_sendmipi_start
										Im_PRO_DMIPI_Stop  修改成	impro_sendmipi_stop					
										Im_PRO_DMIPI_Ctrl    修改成		impro_sendmipi_ctrl
										Im_PRO_DMIPI_Set_PAEN    修改成	impro_sendmipi_set_paen
										Im_PRO_DMIPI_Get_Status    修改成		impro_sendmipi_get_status
										
										
										
										
			(6)修改类 ImproSenlvds:
					
						枚举:
			
												typedef enum {
													E_IM_PRO_LVDS_INPUT_SERIAL = 0,		/**< 8lane/12bit */
													E_IM_PRO_LVDS_INPUT_PARALLEL		/**< 8lane/10bit */
												} E_IM_PRO_LVDS_INPUT;
										修改成
												typedef enum {
													ImproSenlvds_E_IM_PRO_LVDS_INPUT_SERIAL = 0,		/**< 8lane/12bit */
													ImproSenlvds_E_IM_PRO_LVDS_INPUT_PARALLEL		/**< 8lane/10bit */
												} EimproLvdsInput;
			
			
			
												typedef enum {
													E_IM_PRO_LVDS_OUT_1CH = 0,		/**< 1ch output sensor */
												} E_IM_PRO_LVDS_OUT_CH;
									修改成
												typedef enum {
													ImproSenlvds_E_IM_PRO_LVDS_OUT_1CH = 0,		/**< 1ch output sensor */
												} EimproLvdsOutCh;
											
							
							
												typedef enum {
													E_IM_PRO_LVDS_LANE_1 = 1,			/**< 1lane	*/
													E_IM_PRO_LVDS_LANE_2,				/**< 2lane	*/
													E_IM_PRO_LVDS_LANE_3,				/**< 3lane	*/
													E_IM_PRO_LVDS_LANE_4,				/**< 4lane	*/
													E_IM_PRO_LVDS_LANE_5,				/**< 5lane	*/
													E_IM_PRO_LVDS_LANE_6,				/**< 6lane	*/
													E_IM_PRO_LVDS_LANE_7,				/**< 7lane	*/
													E_IM_PRO_LVDS_LANE_8,				/**< 8lane	*/
													E_IM_PRO_LVDS_LANE_10 = 10,			/**< 10lane	*/
													E_IM_PRO_LVDS_LANE_12 = 12,			/**< 12lane	*/
													E_IM_PRO_LVDS_LANE_14 = 14,			/**< 14lane	*/
													E_IM_PRO_LVDS_LANE_16 = 16			/**< 16lane	*/
												} E_IM_PRO_LVDS_LANE;
									修改成
												typedef enum {
													ImproSenlvds_E_IM_PRO_LVDS_LANE_1 = 1,			/**< 1lane	*/
													ImproSenlvds_E_IM_PRO_LVDS_LANE_2,				/**< 2lane	*/
													ImproSenlvds_E_IM_PRO_LVDS_LANE_3,				/**< 3lane	*/
													ImproSenlvds_E_IM_PRO_LVDS_LANE_4,				/**< 4lane	*/
													ImproSenlvds_E_IM_PRO_LVDS_LANE_5,				/**< 5lane	*/
													ImproSenlvds_E_IM_PRO_LVDS_LANE_6,				/**< 6lane	*/
													ImproSenlvds_E_IM_PRO_LVDS_LANE_7,				/**< 7lane	*/
													ImproSenlvds_E_IM_PRO_LVDS_LANE_8,				/**< 8lane	*/
													ImproSenlvds_E_IM_PRO_LVDS_LANE_10 = 10,			/**< 10lane	*/
													ImproSenlvds_E_IM_PRO_LVDS_LANE_12 = 12,			/**< 12lane	*/
													ImproSenlvds_E_IM_PRO_LVDS_LANE_14 = 14,			/**< 14lane	*/
													ImproSenlvds_E_IM_PRO_LVDS_LANE_16 = 16			/**< 16lane	*/
												} EimproLvdsLane;
							
							

												typedef enum {
													E_IM_PRO_LVDS_BIT_WIDTH_RAW_16_BIT = 0,	/**< RAW 16bit	*/
													E_IM_PRO_LVDS_BIT_WIDTH_RAW_14_BIT,		/**< RAW 14bit	*/
													E_IM_PRO_LVDS_BIT_WIDTH_RAW_12_BIT,		/**< RAW 12bit	*/
													E_IM_PRO_LVDS_BIT_WIDTH_RAW_10_BIT		/**< RAW 10bit	*/
												} E_IM_PRO_LVDS_BIT_WIDTH;
									修改成
												typedef enum {
													ImproSenlvds_E_IM_PRO_LVDS_BIT_WIDTH_RAW_16_BIT = 0,	/**< RAW 16bit	*/
													ImproSenlvds_E_IM_PRO_LVDS_BIT_WIDTH_RAW_14_BIT,		/**< RAW 14bit	*/
													ImproSenlvds_E_IM_PRO_LVDS_BIT_WIDTH_RAW_12_BIT,		/**< RAW 12bit	*/
													ImproSenlvds_E_IM_PRO_LVDS_BIT_WIDTH_RAW_10_BIT		/**< RAW 10bit	*/
												} EimproLvdsBitWidth;



												typedef enum {
													E_IM_PRO_LVDS_SFT_NONE = 0,			/**< bit shift none		*/
													E_IM_PRO_LVDS_SFT_1BIT_SHIFT_R,		/**< 1bit right shift	*/
													E_IM_PRO_LVDS_SFT_2BIT_SHIFT_R,		/**< 2bit right shift	*/
													E_IM_PRO_LVDS_SFT_3BIT_SHIFT_R,		/**< 3bit right shift	*/
													E_IM_PRO_LVDS_SFT_4BIT_SHIFT_R,		/**< 4bit right shift	*/
													E_IM_PRO_LVDS_SFT_5BIT_SHIFT_R,		/**< 5bit right shift	*/
													E_IM_PRO_LVDS_SFT_6BIT_SHIFT_R,		/**< 6bit right shift	*/
													E_IM_PRO_LVDS_SFT_7BIT_SHIFT_R,		/**< 7bit right shift	*/
													E_IM_PRO_LVDS_SFT_8BIT_SHIFT_L,		/**< 8bit left shift	*/
													E_IM_PRO_LVDS_SFT_7BIT_SHIFT_L,		/**< 7bit left shift	*/
													E_IM_PRO_LVDS_SFT_6BIT_SHIFT_L,		/**< 6bit left shift	*/
													E_IM_PRO_LVDS_SFT_5BIT_SHIFT_L,		/**< 5bit left shift	*/
													E_IM_PRO_LVDS_SFT_4BIT_SHIFT_L,		/**< 4bit left shift	*/
													E_IM_PRO_LVDS_SFT_3BIT_SHIFT_L,		/**< 3bit left shift	*/
													E_IM_PRO_LVDS_SFT_2BIT_SHIFT_L,		/**< 2bit left shift	*/
													E_IM_PRO_LVDS_SFT_1BIT_SHIFT_L		/**< 1bit left shift	*/
												} E_IM_PRO_LVDS_SFT;
									修改成
												typedef enum {
													ImproSenlvds_E_IM_PRO_LVDS_SFT_NONE = 0,			/**< bit shift none		*/
													ImproSenlvds_E_IM_PRO_LVDS_SFT_1BIT_SHIFT_R,		/**< 1bit right shift	*/
													ImproSenlvds_E_IM_PRO_LVDS_SFT_2BIT_SHIFT_R,		/**< 2bit right shift	*/
													ImproSenlvds_E_IM_PRO_LVDS_SFT_3BIT_SHIFT_R,		/**< 3bit right shift	*/
													ImproSenlvds_E_IM_PRO_LVDS_SFT_4BIT_SHIFT_R,		/**< 4bit right shift	*/
													ImproSenlvds_E_IM_PRO_LVDS_SFT_5BIT_SHIFT_R,		/**< 5bit right shift	*/
													ImproSenlvds_E_IM_PRO_LVDS_SFT_6BIT_SHIFT_R,		/**< 6bit right shift	*/
													ImproSenlvds_E_IM_PRO_LVDS_SFT_7BIT_SHIFT_R,		/**< 7bit right shift	*/
													ImproSenlvds_E_IM_PRO_LVDS_SFT_8BIT_SHIFT_L,		/**< 8bit left shift	*/
													ImproSenlvds_E_IM_PRO_LVDS_SFT_7BIT_SHIFT_L,		/**< 7bit left shift	*/
													ImproSenlvds_E_IM_PRO_LVDS_SFT_6BIT_SHIFT_L,		/**< 6bit left shift	*/
													ImproSenlvds_E_IM_PRO_LVDS_SFT_5BIT_SHIFT_L,		/**< 5bit left shift	*/
													ImproSenlvds_E_IM_PRO_LVDS_SFT_4BIT_SHIFT_L,		/**< 4bit left shift	*/
													ImproSenlvds_E_IM_PRO_LVDS_SFT_3BIT_SHIFT_L,		/**< 3bit left shift	*/
													ImproSenlvds_E_IM_PRO_LVDS_SFT_2BIT_SHIFT_L,		/**< 2bit left shift	*/
													ImproSenlvds_E_IM_PRO_LVDS_SFT_1BIT_SHIFT_L		/**< 1bit left shift	*/
												} EimproLvdsSft;
							


												typedef enum {
													E_IM_PRO_LVDS_SYNC_TYPE_TYPE0 = 0, 	/**< Sync code type0(SAV/EAV/SAB/EAB)	*/
													E_IM_PRO_LVDS_SYNC_TYPE_TYPE1		/**< Sync code type1(SOF/SOL/EOF/EOL)	*/
												} E_IM_PRO_LVDS_SYNC_TYPE;
									修改成
												typedef enum {
													ImproSenlvds_E_IM_PRO_LVDS_SYNC_TYPE_TYPE0 = 0, 	/**< Sync code type0(SAV/EAV/SAB/EAB)	*/
													ImproSenlvds_E_IM_PRO_LVDS_SYNC_TYPE_TYPE1		/**< Sync code type1(SOF/SOL/EOF/EOL)	*/
												} EimproLvdsSyncType;




												typedef enum {
													E_IM_PRO_LVDS_INPUT_TYPE_SYNC_CODE = 0,		/**< A synchronous code is followed.	*/
													E_IM_PRO_LVDS_INPUT_TYPE_HSZIE				/**< LHSIZE/LHSADD is followed.	*/
												} E_IM_PRO_LVDS_INPUT_TYPE;
									修改成
												typedef enum {
													ImproSenlvds_E_IM_PRO_LVDS_INPUT_TYPE_SYNC_CODE = 0,		/**< A synchronous code is followed.	*/
													ImproSenlvds_E_IM_PRO_LVDS_INPUT_TYPE_HSZIE				/**< LHSIZE/LHSADD is followed.	*/
												} EimproLvdsInputType;



												typedef enum {
													E_IM_PRO_LVDS_SYNC_BIT_SAME_LDW = 0,	/**< same as LDW	*/
													E_IM_PRO_LVDS_SYNC_BIT_16BIT_FIX		/**< 16bit fix		*/
												} E_IM_PRO_LVDS_SYNC_BIT;
									修改成
												typedef enum {
													ImproSenlvds_E_IM_PRO_LVDS_SYNC_BIT_SAME_LDW = 0,	/**< same as LDW	*/
													ImproSenlvds_E_IM_PRO_LVDS_SYNC_BIT_16BIT_FIX		/**< 16bit fix		*/
												} EimproLvdsSyncBit;



												typedef enum {
													E_IM_PRO_LVDS_DIV_OUT_2 = 1,	/**< 2-point division output		*/
													E_IM_PRO_LVDS_DIV_OUT_4,		/**< 4-point division output		*/
													E_IM_PRO_LVDS_DIV_OUT_8,		/**< 8-point division output		*/
												} E_IM_PRO_LVDS_DIV_OUT;
									修改成
												typedef enum {
													ImproSenlvds_E_IM_PRO_LVDS_DIV_OUT_2 = 1,	/**< 2-point division output		*/
													ImproSenlvds_E_IM_PRO_LVDS_DIV_OUT_4,		/**< 4-point division output		*/
													ImproSenlvds_E_IM_PRO_LVDS_DIV_OUT_8,		/**< 8-point division output		*/
												} EimproLvdsDivOut;



												typedef enum {
													E_IM_PRO_LVDS_INVERTED_DIS = 0,			/**< Disable	*/
													E_IM_PRO_LVDS_INVERTED_EN				/**< Enable		*/
												} E_IM_PRO_LVDS_INVERTED;
									修改成
												typedef enum {
													ImproSenlvds_E_IM_PRO_LVDS_INVERTED_DIS = 0,			/**< Disable	*/
													ImproSenlvds_E_IM_PRO_LVDS_INVERTED_EN				/**< Enable		*/
												} EimproLvdsInverted;



												typedef enum {
													E_IM_PRO_LVDS_SNCLK_SEL_STOP = 0,		/**< clock stop	*/
													E_IM_PRO_LVDS_SNCLK_SEL_SNCLK0,			/**< SNCLK0		*/
													E_IM_PRO_LVDS_SNCLK_SEL_SNCLK1,			/**< SNCLK1		*/
													E_IM_PRO_LVDS_SNCLK_SEL_SNCLK2,			/**< SNCLK2		*/
													E_IM_PRO_LVDS_SNCLK_SEL_SNCLK3			/**< SNCLK3		*/
												} E_IM_PRO_LVDS_SNCLK_SEL;
									修改成
												typedef enum {
													ImproSenlvds_E_IM_PRO_LVDS_SNCLK_SEL_STOP = 0,		/**< clock stop	*/
													ImproSenlvds_E_IM_PRO_LVDS_SNCLK_SEL_SNCLK0,			/**< SNCLK0		*/
													ImproSenlvds_E_IM_PRO_LVDS_SNCLK_SEL_SNCLK1,			/**< SNCLK1		*/
													ImproSenlvds_E_IM_PRO_LVDS_SNCLK_SEL_SNCLK2,			/**< SNCLK2		*/
													ImproSenlvds_E_IM_PRO_LVDS_SNCLK_SEL_SNCLK3			/**< SNCLK3		*/
												} EimproLvdsSnclkSel;



												typedef enum {
													E_IM_PRO_LVDS_SNDATA_SEL_SNDATA0 = 0,	/**< SNDATA0	*/
													E_IM_PRO_LVDS_SNDATA_SEL_SNDATA1,		/**< SNDATA1	*/
													E_IM_PRO_LVDS_SNDATA_SEL_SNDATA2,		/**< SNDATA2	*/
													E_IM_PRO_LVDS_SNDATA_SEL_SNDATA3,		/**< SNDATA3	*/
													E_IM_PRO_LVDS_SNDATA_SEL_SNDATA4,		/**< SNDATA4	*/
													E_IM_PRO_LVDS_SNDATA_SEL_SNDATA5,		/**< SNDATA5	*/
													E_IM_PRO_LVDS_SNDATA_SEL_SNDATA6,		/**< SNDATA6	*/
													E_IM_PRO_LVDS_SNDATA_SEL_SNDATA7,		/**< SNDATA7	*/
													E_IM_PRO_LVDS_SNDATA_SEL_SNDATA8,		/**< SNDATA8	*/
													E_IM_PRO_LVDS_SNDATA_SEL_SNDATA9,		/**< SNDATA9	*/
													E_IM_PRO_LVDS_SNDATA_SEL_SNDATA10,		/**< SNDATA10	*/
													E_IM_PRO_LVDS_SNDATA_SEL_SNDATA11,		/**< SNDATA11	*/
													E_IM_PRO_LVDS_SNDATA_SEL_SNDATA12,		/**< SNDATA12	*/
													E_IM_PRO_LVDS_SNDATA_SEL_SNDATA13,		/**< SNDATA13	*/
													E_IM_PRO_LVDS_SNDATA_SEL_SNDATA14,		/**< SNDATA14	*/
													E_IM_PRO_LVDS_SNDATA_SEL_SNDATA15		/**< SNDATA15	*/
												} E_IM_PRO_LVDS_SNDATA_SEL;
									修改成
												typedef enum {
													ImproSenlvds_E_IM_PRO_LVDS_SNDATA_SEL_SNDATA0 = 0,	/**< SNDATA0	*/
													ImproSenlvds_E_IM_PRO_LVDS_SNDATA_SEL_SNDATA1,		/**< SNDATA1	*/
													ImproSenlvds_E_IM_PRO_LVDS_SNDATA_SEL_SNDATA2,		/**< SNDATA2	*/
													ImproSenlvds_E_IM_PRO_LVDS_SNDATA_SEL_SNDATA3,		/**< SNDATA3	*/
													ImproSenlvds_E_IM_PRO_LVDS_SNDATA_SEL_SNDATA4,		/**< SNDATA4	*/
													ImproSenlvds_E_IM_PRO_LVDS_SNDATA_SEL_SNDATA5,		/**< SNDATA5	*/
													ImproSenlvds_E_IM_PRO_LVDS_SNDATA_SEL_SNDATA6,		/**< SNDATA6	*/
													ImproSenlvds_E_IM_PRO_LVDS_SNDATA_SEL_SNDATA7,		/**< SNDATA7	*/
													ImproSenlvds_E_IM_PRO_LVDS_SNDATA_SEL_SNDATA8,		/**< SNDATA8	*/
													ImproSenlvds_E_IM_PRO_LVDS_SNDATA_SEL_SNDATA9,		/**< SNDATA9	*/
													ImproSenlvds_E_IM_PRO_LVDS_SNDATA_SEL_SNDATA10,		/**< SNDATA10	*/
													ImproSenlvds_E_IM_PRO_LVDS_SNDATA_SEL_SNDATA11,		/**< SNDATA11	*/
													ImproSenlvds_E_IM_PRO_LVDS_SNDATA_SEL_SNDATA12,		/**< SNDATA12	*/
													ImproSenlvds_E_IM_PRO_LVDS_SNDATA_SEL_SNDATA13,		/**< SNDATA13	*/
													ImproSenlvds_E_IM_PRO_LVDS_SNDATA_SEL_SNDATA14,		/**< SNDATA14	*/
													ImproSenlvds_E_IM_PRO_LVDS_SNDATA_SEL_SNDATA15		/**< SNDATA15	*/
												} EimproLvdsSndataSel;



												typedef enum {
													E_IM_PRO_LVDS_SYNC_SEL_SPX_D0 = 0,		/**< Enable select side D0 of SPx	*/
													E_IM_PRO_LVDS_SYNC_SEL_SPX_D1			/**< Enable select side D1 of SPx	*/
												} E_IM_PRO_LVDS_SYNC_SEL;
									修改成
												typedef enum {
													ImproSenlvds_E_IM_PRO_LVDS_SYNC_SEL_SPX_D0 = 0,		/**< Enable select side D0 of SPx	*/
													ImproSenlvds_E_IM_PRO_LVDS_SYNC_SEL_SPX_D1			/**< Enable select side D1 of SPx	*/
												} EimproLvdsSyncSel;



												typedef enum {
													E_IM_PRO_LVDS_PIXEL_POS_0 = 0,			/**< pixel position 0	*/
													E_IM_PRO_LVDS_PIXEL_POS_1,				/**< pixel position 1	*/
													E_IM_PRO_LVDS_PIXEL_POS_2,				/**< pixel position 2	*/
													E_IM_PRO_LVDS_PIXEL_POS_3,				/**< pixel position 3	*/
													E_IM_PRO_LVDS_PIXEL_POS_4,				/**< pixel position 4	*/
													E_IM_PRO_LVDS_PIXEL_POS_5,				/**< pixel position 5	*/
													E_IM_PRO_LVDS_PIXEL_POS_6,				/**< pixel position 6	*/
													E_IM_PRO_LVDS_PIXEL_POS_7				/**< pixel position 7	*/
												} E_IM_PRO_LVDS_PIXEL_POS;
									修改成
												typedef enum {
													ImproSenlvds_E_IM_PRO_LVDS_PIXEL_POS_0 = 0,			/**< pixel position 0	*/
													ImproSenlvds_E_IM_PRO_LVDS_PIXEL_POS_1,				/**< pixel position 1	*/
													ImproSenlvds_E_IM_PRO_LVDS_PIXEL_POS_2,				/**< pixel position 2	*/
													ImproSenlvds_E_IM_PRO_LVDS_PIXEL_POS_3,				/**< pixel position 3	*/
													ImproSenlvds_E_IM_PRO_LVDS_PIXEL_POS_4,				/**< pixel position 4	*/
													ImproSenlvds_E_IM_PRO_LVDS_PIXEL_POS_5,				/**< pixel position 5	*/
													ImproSenlvds_E_IM_PRO_LVDS_PIXEL_POS_6,				/**< pixel position 6	*/
													ImproSenlvds_E_IM_PRO_LVDS_PIXEL_POS_7				/**< pixel position 7	*/
												} EimproLvdsPixelPos;
							
							
							
							结构体:
							
												typedef struct {
													EimproLvdsInput			trans_mode;			/**< LVDS input mode<br>
																										target registor	:@@LMD */
													EimproLvdsOutCh		output_ch_no;		/**< LVDS sensor number of output channel<br>
																										target registor	:@@LCH */
													EimproLvdsLane			lane;				/**< LVDS use lane number<br>
																										target registor	:@@LANE */
													EimproLvdsBitWidth		data_bit_width;		/**< LVDS output data bit width<br>
																										target registor	:@@LDW */
													EimproLvdsSft			lsft;				/**< LVDS Output data bit shift<br>
																										target registor	:@@LSFT */
													EimproLvdsSyncType		sync_type;			/**< LVDS synchronous code detection type<br>
																										target registor	:@@SYNT */
													EimproLvdsInputType	data_input_type;	/**< LVDS Input size type.<br>
																										target registor	:@@SZEN */
													EimproLvdsSyncBit		sync_bit_fix;		/**< LVDS Sync code bit 16bit fix<br>
																										target registor	:@@SYN16 */
													EimproLvdsDivOut		divide_output;		/**< LVDS divide output for use 1ch sensor<br>
																										target registor	:@@DIVOT */
													EimproLvdsInverted		inverted_output;	/**< LVDS Inverted output for use 1ch sensor<br>
																										target registor	:@@LMIR */
													E_IM_PRO_LVDS_OUTPUT_MODE	output_mode;		/**< LVDS synchronous code detection mode.<br>
																										target registor	:@@DOLMD */
													USHORT						lane_mask;			/**< LVDS sync code mask setting<br>
																										value range		:[0x00 - 0xFFFF]<br>
																										target registor	:@@LMSK */
													EimproLvdsSnclkSel		clock_select_sp0;	/**< LVDS select serial clock for SP0<br>
																										target registor	:@@LVDSCLKS */
													EimproLvdsSnclkSel		clock_select_sp1;	/**< LVDS select serial clock for SP1<br>
																										target registor	:@@LVDSCLKS */
													EimproLvdsSnclkSel		clock_select_sp2;	/**< LVDS select serial clock for SP2<br>
																										target registor	:@@LVDSCLKS */
													EimproLvdsSnclkSel		clock_select_sp3;	/**< LVDS select serial clock for SP3<br>
																										target registor	:@@LVDSCLKS */
													EimproLvdsSnclkSel		clock_select_sp4;	/**< LVDS select serial clock for SP4<br>
																										target registor	:@@LVDSCLKS */
													EimproLvdsSnclkSel		clock_select_sp5;	/**< LVDS select serial clock for SP5<br>
																										target registor	:@@LVDSCLKS */
													EimproLvdsSnclkSel		clock_select_sp6;	/**< LVDS select serial clock for SP6<br>
																										target registor	:@@LVDSCLKS */
													EimproLvdsSnclkSel		clock_select_sp7;	/**< LVDS select serial clock for SP7<br>
																										target registor	:@@LVDSCLKS */
													EimproLvdsSndataSel	data_select_sp0_0;	/**< LVDS select serial data for SP0 data 0<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	data_select_sp0_1;	/**< LVDS select serial data for SP0 data 1<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	data_select_sp1_0;	/**< LVDS select serial data for SP1 data 0<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	data_select_sp1_1;	/**< LVDS select serial data for SP1 data 1<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	data_select_sp2_0;	/**< LVDS select serial data for SP2 data 0<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	data_select_sp2_1;	/**< LVDS select serial data for SP2 data 1<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	data_select_sp3_0;	/**< LVDS select serial data for SP3 data 0<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	data_select_sp3_1;	/**< LVDS select serial data for SP3 data 1<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	data_select_sp4_0;	/**< LVDS select serial data for SP4 data 0<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	data_select_sp4_1;	/**< LVDS select serial data for SP4 data 1<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	data_select_sp5_0;	/**< LVDS select serial data for SP5 data 0<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	data_select_sp5_1;	/**< LVDS select serial data for SP5 data 1<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	data_select_sp6_0;	/**< LVDS select serial data for SP6 data 0<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	data_select_sp6_1;	/**< LVDS select serial data for SP6 data 1<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	data_select_sp7_0;	/**< LVDS select serial data for SP7 data 0<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	data_select_sp7_1;	/**< LVDS select serial data for SP7 data 1<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSyncSel		lane_select;		/**< LVDS sync code lane select<br>
																										target registor	:@@SYNCSEL */
												} T_IM_PRO_LVDS_CTRL;
											修改成
												typedef struct {
													EimproLvdsInput			transMode;			/**< LVDS input mode<br>
																										target registor	:@@LMD */
													EimproLvdsOutCh		outputChNo;		/**< LVDS sensor number of output channel<br>
																										target registor	:@@LCH */
													EimproLvdsLane			lane;				/**< LVDS use lane number<br>
																										target registor	:@@LANE */
													EimproLvdsBitWidth		dataBitWidth;		/**< LVDS output data bit width<br>
																										target registor	:@@LDW */
													EimproLvdsSft			lsft;				/**< LVDS Output data bit shift<br>
																										target registor	:@@LSFT */
													EimproLvdsSyncType		syncType;			/**< LVDS synchronous code detection type<br>
																										target registor	:@@SYNT */
													EimproLvdsInputType	dataInputType;	/**< LVDS Input size type.<br>
																										target registor	:@@SZEN */
													EimproLvdsSyncBit		syncBitFix;		/**< LVDS Sync code bit 16bit fix<br>
																										target registor	:@@SYN16 */
													EimproLvdsDivOut		divideOutput;		/**< LVDS divide output for use 1ch sensor<br>
																										target registor	:@@DIVOT */
													EimproLvdsInverted		invertedOutput;	/**< LVDS Inverted output for use 1ch sensor<br>
																										target registor	:@@LMIR */
													E_IM_PRO_LVDS_OUTPUT_MODE	outputMode;		/**< LVDS synchronous code detection mode.<br>
																										target registor	:@@DOLMD */
													USHORT						laneMask;			/**< LVDS sync code mask setting<br>
																										value range		:[0x00 - 0xFFFF]<br>
																										target registor	:@@LMSK */
													EimproLvdsSnclkSel		clockSelectSp0;	/**< LVDS select serial clock for SP0<br>
																										target registor	:@@LVDSCLKS */
													EimproLvdsSnclkSel		clockSelectSp1;	/**< LVDS select serial clock for SP1<br>
																										target registor	:@@LVDSCLKS */
													EimproLvdsSnclkSel		clockSelectSp2;	/**< LVDS select serial clock for SP2<br>
																										target registor	:@@LVDSCLKS */
													EimproLvdsSnclkSel		clockSelectSp3;	/**< LVDS select serial clock for SP3<br>
																										target registor	:@@LVDSCLKS */
													EimproLvdsSnclkSel		clockSelectSp4;	/**< LVDS select serial clock for SP4<br>
																										target registor	:@@LVDSCLKS */
													EimproLvdsSnclkSel		clockSelectSp5;	/**< LVDS select serial clock for SP5<br>
																										target registor	:@@LVDSCLKS */
													EimproLvdsSnclkSel		clockSelectSp6;	/**< LVDS select serial clock for SP6<br>
																										target registor	:@@LVDSCLKS */
													EimproLvdsSnclkSel		clockSelectSp7;	/**< LVDS select serial clock for SP7<br>
																										target registor	:@@LVDSCLKS */
													EimproLvdsSndataSel	clockSelectSp00;	/**< LVDS select serial data for SP0 data 0<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	clockSelectSp01;	/**< LVDS select serial data for SP0 data 1<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	clockSelectSp10;	/**< LVDS select serial data for SP1 data 0<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	clockSelectSp11;	/**< LVDS select serial data for SP1 data 1<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	clockSelectSp20;	/**< LVDS select serial data for SP2 data 0<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	clockSelectSp21;	/**< LVDS select serial data for SP2 data 1<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	clockSelectSp30;	/**< LVDS select serial data for SP3 data 0<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	clockSelectSp31;	/**< LVDS select serial data for SP3 data 1<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	clockSelectSp40;	/**< LVDS select serial data for SP4 data 0<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	clockSelectSp41;	/**< LVDS select serial data for SP4 data 1<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	clockSelectSp50;	/**< LVDS select serial data for SP5 data 0<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	clockSelectSp51;	/**< LVDS select serial data for SP5 data 1<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	clockSelectSp60;	/**< LVDS select serial data for SP6 data 0<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	clockSelectSp61;	/**< LVDS select serial data for SP6 data 1<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	clockSelectSp70;	/**< LVDS select serial data for SP7 data 0<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSndataSel	clockSelectSp71;	/**< LVDS select serial data for SP7 data 1<br>
																										target registor	:@@LVDSDATS */
													EimproLvdsSyncSel		laneSelect;		/**< LVDS sync code lane select<br>
																										target registor	:@@SYNCSEL */
												} TimproLvdsCtrl;
											



															typedef struct {
																EimproLvdsPixelPos		ptn_a:3;	/**< LVDS output line A<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELA */
																EimproLvdsPixelPos		ptn_b:3;	/**< LVDS output line B<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELB */
																EimproLvdsPixelPos		ptn_c:3;	/**< LVDS output line C<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELC */
																EimproLvdsPixelPos		ptn_d:3;	/**< LVDS output line D<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor :@@SELD */
																EimproLvdsPixelPos		ptn_e:3;	/**< LVDS output line E<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELE */
																USHORT	dummy01:1;						/**< Not used */
																EimproLvdsPixelPos		ptn_f:3;	/**< LVDS output line F
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELF */
																EimproLvdsPixelPos		ptn_g:3;	/**< LVDS output line G
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELG */
																EimproLvdsPixelPos		ptn_h:3;	/**< LVDS output line H<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELH */
																EimproLvdsPixelPos		ptn_i:3;	/**< LVDS output line I<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELI */
																EimproLvdsPixelPos		ptn_j:3;	/**< LVDS output line J<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELJ */
																USHORT	dummy02:1;						/**< Not used */
																EimproLvdsPixelPos		ptn_k:3;	/**< LVDS output line K<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELK */
																EimproLvdsPixelPos		ptn_l:3;	/**< LVDS output line L<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELL */
																EimproLvdsPixelPos		ptn_m:3;	/**< LVDS output line M<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELM */
																EimproLvdsPixelPos		ptn_n:3;	/**< LVDS output line N<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELN */
																EimproLvdsPixelPos		ptn_o:3;	/**< LVDS output line O<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELO */
																USHORT	dummy03:1;						/**< Not used */
																EimproLvdsPixelPos		ptn_p:3;	/**< LVDS output line P<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELP */
																USHORT	dummy04:13;						/**< Not used */
															} T_IM_PRO_LVDS_PIXEL_ORDER;
											修改成
															typedef struct {
																EimproLvdsPixelPos		ptnA:3;	/**< LVDS output line A<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELA */
																EimproLvdsPixelPos		ptnB:3;	/**< LVDS output line B<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELB */
																EimproLvdsPixelPos		ptnC:3;	/**< LVDS output line C<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELC */
																EimproLvdsPixelPos		ptnD:3;	/**< LVDS output line D<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor :@@SELD */
																EimproLvdsPixelPos		ptnE:3;	/**< LVDS output line E<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELE */
																USHORT	dummy01:1;						/**< Not used */
																EimproLvdsPixelPos		ptnF:3;	/**< LVDS output line F
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELF */
																EimproLvdsPixelPos		ptnG:3;	/**< LVDS output line G
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELG */
																EimproLvdsPixelPos		ptnH:3;	/**< LVDS output line H<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELH */
																EimproLvdsPixelPos		ptnI:3;	/**< LVDS output line I<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELI */
																EimproLvdsPixelPos		ptnJ:3;	/**< LVDS output line J<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELJ */
																USHORT	dummy02:1;						/**< Not used */
																EimproLvdsPixelPos		ptnK:3;	/**< LVDS output line K<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELK */
																EimproLvdsPixelPos		ptnP:3;	/**< LVDS output line L<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELL */
																EimproLvdsPixelPos		ptnM:3;	/**< LVDS output line M<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELM */
																EimproLvdsPixelPos		ptnN:3;	/**< LVDS output line N<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELN */
																EimproLvdsPixelPos		ptnO:3;	/**< LVDS output line O<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELO */
																USHORT	dummy03:1;						/**< Not used */
																EimproLvdsPixelPos		ptnP:3;	/**< LVDS output line P<br>
																											value range		:See @ref EimproLvdsPixelPos<br>
																											target registor	:@@SELP */
																USHORT	dummy04:13;						/**< Not used */
															} TimproLvdsPixelOrder;
							


															typedef struct {
																USHORT	sav[4];							/**< Effective pixel start(SAV)<br>
																											value range		:[0x0000 - 0xFFFF]<br>
																											target registor	:@@SAV_0 - @@SAV_3 */
																USHORT	eav[4];							/**< Effective pixel end(EAV)<br>
																											value range		:[0x0000 - 0xFFFF]<br>
																											target registor	:@@EAV_0 - @@EAV_3 */
																USHORT	sab[4];							/**< V blank start(SAB)<br>
																											value range		:[0x0000 - 0xFFFF]<br>
																											target registor	:@@SAB_0 - @@SAB_3 */
																USHORT	eab[4];							/**< V blank end(EAB)<br>
																											value range		:[0x0000 - 0xFFFF]<br>
																											target registor	:@@EAB_0 - @@EAB_3 */
															} T_IM_PRO_LVDS_SYNC_CODE;
											修改成
														typedef struct {
															USHORT	sav[4];							/**< Effective pixel start(SAV)<br>
																										value range		:[0x0000 - 0xFFFF]<br>
																										target registor	:@@SAV_0 - @@SAV_3 */
															USHORT	eav[4];							/**< Effective pixel end(EAV)<br>
																										value range		:[0x0000 - 0xFFFF]<br>
																										target registor	:@@EAV_0 - @@EAV_3 */
															USHORT	sab[4];							/**< V blank start(SAB)<br>
																										value range		:[0x0000 - 0xFFFF]<br>
																										target registor	:@@SAB_0 - @@SAB_3 */
															USHORT	eab[4];							/**< V blank end(EAB)<br>
																										value range		:[0x0000 - 0xFFFF]<br>
																										target registor	:@@EAB_0 - @@EAB_3 */
														} TimproLvdsSyncCode;

							

															typedef struct {
																TimproLvdsSyncCode	sync_code[ E_IM_PRO_LVDS_OUTPUT_MODE_MAX ];		/**< the synchronous code of LVDS.<br>
																																			LVDS can set up to 3 groups of synchronous code and can output the data with<br>
																																			different synchronous codes as the data of different frames separately.	*/
															} T_IM_PRO_LVDS_SYNC_CODE_CTRL;
											修改成
															typedef struct {
																TimproLvdsSyncCode	syncCode[ E_IM_PRO_LVDS_OUTPUT_MODE_MAX ];		/**< the synchronous code of LVDS.<br>
																																			LVDS can set up to 3 groups of synchronous code and can output the data with<br>
																																			different synchronous codes as the data of different frames separately.	*/
															} TimproLvdsSyncCodeCtrl;


														typedef struct {
															USHORT	msav[4];						/**< SAV Mask bit<br>
																										value range		:[0x0000 - 0xFFFF]<br>
																										target registor	:@@MSAV_0 - @@MSAV_3 */
															USHORT	meav[4];						/**< EAV Mask bit<br>
																										value range		:[0x0000 - 0xFFFF]<br>
																										target registor	:@@MEAV_0 - @@MEAV_3 */
															USHORT	msab[4];						/**< SAB Mask bit<br>
																										value range		:[0x0000 - 0xFFFF]<br>
																										target registor	:@@MSAB_0 - @@MSAB_3 */
															USHORT	meab[4];						/**< EAB Mask bit<br>
																										value range		:[0x0000 - 0xFFFF]<br>
																										target registor	:@@MEAB_0 - @@MEAB_3 */
														} T_IM_PRO_LVDS_SYNC_MASK;
											修改成
														typedef struct {
															USHORT	msav[4];						/**< SAV Mask bit<br>
																										value range		:[0x0000 - 0xFFFF]<br>
																										target registor	:@@MSAV_0 - @@MSAV_3 */
															USHORT	meav[4];						/**< EAV Mask bit<br>
																										value range		:[0x0000 - 0xFFFF]<br>
																										target registor	:@@MEAV_0 - @@MEAV_3 */
															USHORT	msab[4];						/**< SAB Mask bit<br>
																										value range		:[0x0000 - 0xFFFF]<br>
																										target registor	:@@MSAB_0 - @@MSAB_3 */
															USHORT	meab[4];						/**< EAB Mask bit<br>
																										value range		:[0x0000 - 0xFFFF]<br>
																										target registor	:@@MEAB_0 - @@MEAB_3 */
														} TimproLvdsSyncMask;


														typedef struct {
															TimproLvdsSyncMask	sync_mask[ E_IM_PRO_LVDS_OUTPUT_MODE_MAX ];		/**< exclude the specific bit from comparison object in the synchronous code match detection processing.	*/
														} T_IM_PRO_LVDS_SYNC_MASK_CTRL;
											修改成
														typedef struct {
															TimproLvdsSyncMask	syncMask[ E_IM_PRO_LVDS_OUTPUT_MODE_MAX ];		/**< exclude the specific bit from comparison object in the synchronous code match detection processing.	*/
														} TimproLvdsSyncMaskCtrl;


													typedef struct {
														TimproLvdsIntAddr	int_addr[ E_IM_PRO_LVDS_OUTPUT_MODE_MAX ];		/**< SOL/EOL detection interrupt vertical address.	*/
													} T_IM_PRO_LVDS_INT_ADDR_CTRL;
											修改成
														typedef struct {
															TimproLvdsSyncMask	syncMask[ E_IM_PRO_LVDS_OUTPUT_MODE_MAX ];		/**< exclude the specific bit from comparison object in the synchronous code match detection processing.	*/
														} TimproLvdsSyncMaskCtrl;


														
							公共方法:
							
										Im_PRO_LVDS_Start    修改成		impro_senlvds_start
										Im_PRO_LVDS_Stop  修改成	impro_senlvds_stop
										Im_PRO_LVDS_Ctrl    修改成		impro_senlvds_ctrl
										Im_PRO_LVDS_Set_Area  修改成	impro_senlvds_set_area					
										Im_PRO_LVDS_Set_PixelOrder    修改成		impro_senlvds_set_pixel_order
										Im_PRO_LVDS_Set_SyncCode    修改成	impro_senlvds_set_sync_code
										Im_PRO_LVDS_Set_SyncMask    修改成		impro_senlvds_set_sync_mask	
										Im_PRO_LVDS_Set_IntAdr    修改成	impro_senlvds_set_int_adr
										Im_PRO_LVDS_Set_PAEN    修改成		impro_senlvds_set_paen	
										
										
										
										
										
										
										
			(7)修改类 ImproSenobd:
					
							枚举:
							
							
							
							结构体:

														typedef struct {
															USHORT				ob_max_value;	/**< OB Input upper threshold value<br>
																									value range		:[0 - 16383]<br>
																									target registor	:@@OBDHTHBIT */
															USHORT				ob_min_value;	/**< OB Input lower threshold value<br>
																									value range		:[0 - 16383]<br>
																									target registor	:@@OBDLTHBIT */
														} T_IM_PRO_OBD_CTRL;
											修改成
														typedef struct {
															USHORT				obMaxValue;	/**< OB Input upper threshold value<br>
																									value range		:[0 - 16383]<br>
																									target registor	:@@OBDHTHBIT */
															USHORT				obMinValue;	/**< OB Input lower threshold value<br>
																									value range		:[0 - 16383]<br>
																									target registor	:@@OBDLTHBIT */
														} TimproObdCtrl;


														typedef struct {
															ULONG		R;		/**< R		*/
															ULONG		Gr;		/**< Gr		*/
															ULONG		Gb;		/**< Gb		*/
															ULONG		B;		/**< B		*/
														} T_IM_PRO_RGB4;
											修改成
														typedef struct {
															ULONG		rr;		/**< rr		*/
															ULONG		gr;		/**< gr		*/
															ULONG		gb;		/**< gb		*/
															ULONG		bb;		/**< bb		*/
														} TimproRgb4;


														
							公共方法:
							
										Im_PRO_OBD_Start    修改成		impro_senobd_start
										Im_PRO_OBD_Stop  修改成	impro_senobd_stop
										Im_PRO_OBD_Ctrl    修改成		impro_senobd_ctrl
										Im_PRO_OBD_Set_Area  修改成	impro_senobd_set_area					
										Im_PRO_OBD_Get_OBCNT    修改成		impro_senobd_get_ob_cnt
										Im_PRO_OBD_Get_OBData    修改成	impro_senobd_get_ob_data		
										
										


			(8)修改类 ImproSenobt:
					
						枚举:
			
													typedef enum {
														E_IM_PRO_OBT_DIS = 0,				/**< Disable	*/
														E_IM_PRO_OBT_EN						/**< Enable		*/
													} E_IM_PRO_OBT_ENABLE;
										修改成
													typedef enum {
														ImproSenobt_E_IM_PRO_OBT_DIS = 0,				/**< Disable	*/
														ImproSenobt_E_IM_PRO_OBT_EN						/**< Enable		*/
													} EimproObtEnable;
			
			
			
												typedef enum {
													E_IM_PRO_OBT_MODE_ALL = 0,			/**< TOP OB common all pixel mode	*/
													E_IM_PRO_OBT_MODE_COLOR				/**< TOP OB each color mode			*/
												} E_IM_PRO_OBT_MODE;
									修改成
												typedef enum {
													ImproSenobt_E_IM_PRO_OBT_MODE_ALL = 0,			/**< TOP OB common all pixel mode	*/
													ImproSenobt_E_IM_PRO_OBT_MODE_COLOR				/**< TOP OB each color mode			*/
												} EimproObtMode;
																							
							
							
												typedef enum {
													E_IM_PRO_OBT_SELECT_FIX = 0,		/**< TOP OB correction fix value use		*/
													E_IM_PRO_OBT_SELECT_EVALUATION		/**< TOP OB correction evaluation value use	*/
												} E_IM_PRO_OBT_SELECT;
									修改成
												typedef enum {
													ImproSenobt_E_IM_PRO_OBT_SELECT_FIX = 0,		/**< TOP OB correction fix value use		*/
													ImproSenobt_E_IM_PRO_OBT_SELECT_EVALUATION		/**< TOP OB correction evaluation value use	*/
												} EimproObtSelect;
							
							

												typedef enum {
													E_IM_PRO_OBT_INTERCOMM_DIS = 0,		/**< Inter-OBT communication is disabled.		*/
													E_IM_PRO_OBT_INTERCOMM_EN			/**< OBT communication is enabled.				*/
												} E_IM_PRO_OBT_INTERCOMM_ENABLE;
									修改成
												typedef enum {
													ImproSenobt_E_IM_PRO_OBT_INTERCOMM_DIS = 0,		/**< Inter-OBT communication is disabled.		*/
													ImproSenobt_E_IM_PRO_OBT_INTERCOMM_EN			/**< OBT communication is enabled.				*/
												} EimproObtIntercommEnable;

						
							
							结构体:
							
																typedef struct {
																	EimproObtEnable				obt_enable;			/**< OBT Correction enable<br>
																															target registor	:@@OBTEN<br>
																															remarks :Even if value set to 0(disable), OBT Detection performed. */
																	EimproObtMode				mode;				/**< TopOB Detection mode selection<br>
																															target registor	:@@OBTMD */
																	EimproObtSelect				sel;				/**< Top OB Correction select<br>
																															target registor	:@@OBTSL */
																	EimproObtIntercommEnable	intercomm_enable;	/**< OBT Intercommunication Enable/Disable<br>
																															target registor	:@@OBTCEN */
																	USHORT							obMaxValue;		/**< OB Input upper threshold value<br>
																															value range		:[0 - 16383]<br>
																															target registor	:@@OBTHTHBIT */
																	USHORT							obMinValue;		/**< OB Input lower threshold value<br>
																															value range		:[0 - 16383]<br>
																															target registor	:@@OBTLTHBIT */
																} T_IM_PRO_OBT_CTRL;
											修改成
																typedef struct {
																	EimproObtEnable				obtEnable;			/**< OBT Correction enable<br>
																															target registor	:@@OBTEN<br>
																															remarks :Even if value set to 0(disable), OBT Detection performed. */
																	EimproObtMode				mode;				/**< TopOB Detection mode selection<br>
																															target registor	:@@OBTMD */
																	EimproObtSelect				sel;				/**< Top OB Correction select<br>
																															target registor	:@@OBTSL */
																	EimproObtIntercommEnable	intercommEnable;	/**< OBT Intercommunication Enable/Disable<br>
																															target registor	:@@OBTCEN */
																	USHORT							obMaxValue;		/**< OB Input upper threshold value<br>
																															value range		:[0 - 16383]<br>
																															target registor	:@@OBTHTHBIT */
																	USHORT							obMinValue;		/**< OB Input lower threshold value<br>
																															value range		:[0 - 16383]<br>
																															target registor	:@@OBTLTHBIT */
																} TimproObtCtrl;
											



															typedef struct {
																ULONG	OBTCTL;				/**< 2800_(B8C0 - B8C3h) */
																ULONG	OBTTHBIT;			/**< 2800_(B8D4 - B8D7h) */
																ULONG	OBTOFSR;			/**< 2800_(B8E8 - B8EBh) */
																ULONG	OBTOFSGR;			/**< 2800_(B8EC - B8EFh) */
																ULONG	OBTOFSGB;			/**< 2800_(B8F0 - B8F3h) */
																ULONG	OBTOFSB;			/**< 2800_(B8F4 - B8F7h) */
															} T_IM_PRO_RDMA_OBT_ADDR;
											修改成
															typedef struct {
																ULONG	obtctl;				/**< 2800_(B8C0 - B8C3h) */
																ULONG	obtthbit;			/**< 2800_(B8D4 - B8D7h) */
																ULONG	obtofsr;			/**< 2800_(B8E8 - B8EBh) */
																ULONG	obtofsgr;			/**< 2800_(B8EC - B8EFh) */
																ULONG	obtofsgb;			/**< 2800_(B8F0 - B8F3h) */
																ULONG	obtofsb;			/**< 2800_(B8F4 - B8F7h) */
															} TimproRdmaObtAddr;
							
							
														
							公共方法:
							
										Im_PRO_OBT_Start    修改成		impro_senobt_start
										Im_PRO_OBT_Stop  修改成	impro_senobt_stop
										Im_PRO_OBT_Ctrl    修改成		impro_senobt_ctrl
										Im_PRO_OBT_Set_Area  修改成	impro_senobt_set_area					
										Im_PRO_OBT_Set_Offset    修改成		impro_senobt_set_offset
										Im_PRO_OBT_Get_OBTData    修改成	impro_senobt_get_bot_data
										Im_PRO_Get_RdmaAddr_OBT_Cntl    修改成		impro_senobt_get_rdma_addr_obt_cntl



			(9)修改类 ImproSensg:
					
						枚举:
			
													typedef enum {
														E_IM_PRO_SG_CH_0 = 0,			/**< ch0	*/
														E_IM_PRO_SG_CH_1,				/**< ch1	*/
														E_IM_PRO_SG_CH_2,				/**< ch1	*/
														E_IM_PRO_SG_CH_3,				/**< ch1	*/
													} E_IM_PRO_SG_CH;
										修改成
														typedef enum {
															ImproSensg_E_IM_PRO_SG_CH_0 = 0,			/**< ch0	*/
															ImproSensg_E_IM_PRO_SG_CH_1,				/**< ch1	*/
															ImproSensg_E_IM_PRO_SG_CH_2,				/**< ch1	*/
															ImproSensg_E_IM_PRO_SG_CH_3,				/**< ch1	*/
														} EimproSgCh;
			
			
			
							
							结构体:
							
																typedef struct {
																	UCHAR		vhdo;		/**< VD/HD I/O control.	<br>
																								value range		:[0:Input 1:Output]<br>
																								target registor	:@@VHDO		*/
																	UCHAR		vdot;		/**< VD output timing.<br>
																								value range		:[0:HD0 2cycle 1:HD0 1cycle]<br>
																								target registor :@@VDOT		*/
																	USHORT		vdinv;		/**< VD inverted output.<br>
																								value range		:[0:L out 1:H out]<br>
																								target registor	:@@VDINV	*/
																	UCHAR		hdinv;		/**< HD inverted output.<br>
																								value range		:[0:L out 1:H out]<br>
																								target registor :@@HDINV	*/
																	UCHAR		hdchg;		/**< Last HDO output switch mode.<br>
																								value range		:[0:HDO output cycle is always constant 1:HDO output is switched for only the last line]<br>
																								target registor :@@HDCHG	*/
																	UCHAR		vddly;		/**< VD output delay.<br>
																								value range		:[0-255]<br>
																								target registor :@@VDDLY	*/
																	ULONG		vdocyc;		/**< VD0 output cycle.<br>
																								value range		:[0(=0x1000000) 0x000004 - 0xFFFFFF]<br>
																								target registor	:@@VDOCYC	*/
																	USHORT		vdow;		/**< VD0 output width.<br>
																								value range		:[0(=512) 1 - 511]<br>
																								target registor	:@@VDOW		*/
																	USHORT		hdocyc;		/**< HD0 output cycle.<br>
																								value range		:[0(=0x4000) 0x0001 - 0x3FFF]<br>
																								target registor	:@@HDOCYC	*/
																	USHORT		hdow;		/**< HD0 output width.<br>
																								value range		:[0(=512) 1 - 511]<br>
																								target registor	:@@HDOW		*/
																	USHORT		hdocyc2;	/**< HD0 output cycle2.<br>
																								value range		:[0(=0x4000) 0x0001 - 0x3FFF]<br>
																								target registor	:@@HDOCYC2	*/
																	USHORT		hdow2;		/**< VD0 output width2.<br>
																								value range		:[0(=512) 1 - 511]<br>
																								target registor	:@@HDOW2	*/
																} T_IM_PRO_SG_CTRL;
											修改成
															typedef struct {
																UCHAR		vhdo;		/**< VD/HD I/O control.	<br>
																							value range		:[0:Input 1:Output]<br>
																							target registor	:@@VHDO		*/
																UCHAR		vdot;		/**< VD output timing.<br>
																							value range		:[0:HD0 2cycle 1:HD0 1cycle]<br>
																							target registor :@@VDOT		*/
																USHORT		vdinv;		/**< VD inverted output.<br>
																							value range		:[0:L out 1:H out]<br>
																							target registor	:@@VDINV	*/
																UCHAR		hdinv;		/**< HD inverted output.<br>
																							value range		:[0:L out 1:H out]<br>
																							target registor :@@HDINV	*/
																UCHAR		hdchg;		/**< Last HDO output switch mode.<br>
																							value range		:[0:HDO output cycle is always constant 1:HDO output is switched for only the last line]<br>
																							target registor :@@HDCHG	*/
																UCHAR		vddly;		/**< VD output delay.<br>
																							value range		:[0-255]<br>
																							target registor :@@VDDLY	*/
																ULONG		vdocyc;		/**< VD0 output cycle.<br>
																							value range		:[0(=0x1000000) 0x000004 - 0xFFFFFF]<br>
																							target registor	:@@VDOCYC	*/
																USHORT		vdow;		/**< VD0 output width.<br>
																							value range		:[0(=512) 1 - 511]<br>
																							target registor	:@@VDOW		*/
																USHORT		hdocyc;		/**< HD0 output cycle.<br>
																							value range		:[0(=0x4000) 0x0001 - 0x3FFF]<br>
																							target registor	:@@HDOCYC	*/
																USHORT		hdow;		/**< HD0 output width.<br>
																							value range		:[0(=512) 1 - 511]<br>
																							target registor	:@@HDOW		*/
																USHORT		hdocyc2;	/**< HD0 output cycle2.<br>
																							value range		:[0(=0x4000) 0x0001 - 0x3FFF]<br>
																							target registor	:@@HDOCYC2	*/
																USHORT		hdow2;		/**< VD0 output width2.<br>
																							value range		:[0(=512) 1 - 511]<br>
																							target registor	:@@HDOW2	*/
															} TimproSgCtrl;
											



															typedef struct {
																UCHAR	input_vd_signal;	/**< monitor the input VD signal from the outside.	 */
																UCHAR	input_hd_signal;	/**< monitor the input HD signal from the outside.	 */
															} T_IM_PRO_SG_MONI_INFO;
											修改成
															typedef struct {
																UCHAR	inputVdSignal;	/**< monitor the input VD signal from the outside.	 */
																UCHAR	inputHdSignal;	/**< monitor the input HD signal from the outside.	 */
															} TimproSgMoniInfo;
							
							
														
							公共方法:
							
										Im_PRO_SG_Start    修改成		impro_sensg_start
										Im_PRO_SG_Stop  修改成	impro_sensg_stop
										Im_PRO_SG_Ctrl    修改成		impro_sensg_ctrl
										Im_PRO_SG_Get_Cycle  修改成	impro_sensg_get_cycle					
										Im_PRO_SG_Get_Monitor_Info    修改成		impro_sensg_get_monitor_info
										
										
										
										
			(10)修改类 ImproSensldiv:
					
						枚举:
			
													typedef enum {
														E_IM_PRO_LDIV_LDIPMD_2POINT_INPUT = 0,		/**< 2-point input		*/
														E_IM_PRO_LDIV_LDIPMD_4POINT_INPUT,			/**< 4-point input		*/
														E_IM_PRO_LDIV_LDIPMD_8POINT_INPUT,			/**< 8-point input	*/
													} E_IM_PRO_LDIV_LDIPMD;
										修改成
														typedef enum {
															ImproSensldiv_E_IM_PRO_LDIV_LDIPMD_2POINT_INPUT = 0,		/**< 2-point input		*/
															ImproSensldiv_E_IM_PRO_LDIV_LDIPMD_4POINT_INPUT,			/**< 4-point input		*/
															ImproSensldiv_E_IM_PRO_LDIV_LDIPMD_8POINT_INPUT,			/**< 8-point input	*/
														} EimproLdivLdipmd;
			


													typedef enum {
														E_IM_PRO_LDIV_LDSTMD_LINE = 0,			/**< Division processing is started from the first line of a frame.	*/
														E_IM_PRO_LDIV_LDSTMD_LINESKIP			/**< Division processing is started by skipping the first line of a frame.	*/
													} E_IM_PRO_LDIV_LDSTMD;
										修改成
													typedef enum {
														ImproSensldiv_E_IM_PRO_LDIV_LDSTMD_LINE = 0,			/**< Division processing is started from the first line of a frame.	*/
														ImproSensldiv_E_IM_PRO_LDIV_LDSTMD_LINESKIP			/**< Division processing is started by skipping the first line of a frame.	*/
													} EimproLdivLdstmd;



													typedef enum {
														E_IM_PRO_LDIV_LDVDMD_NO_SUBSAMPLING = 0,	/**< No VD subsampling	*/
														E_IM_PRO_LDIV_LDVDMD_HARF_SUBSAMPLING,		/**< 1/2 VD subsampling	*/
														E_IM_PRO_LDIV_LDVDMD_ONE_THIRD_SUBSAMPLING,	/**< 1/3 VD subsampling	*/
														E_IM_PRO_LDIV_LDVDMD_QUARTER_SUBSAMPLING,	/**< 1/4 VD subsampling	*/
													} E_IM_PRO_LDIV_LDVDMD;
										修改成
													typedef enum {
														ImproSensldiv_E_IM_PRO_LDIV_LDVDMD_NO_SUBSAMPLING = 0,	/**< No VD subsampling	*/
														ImproSensldiv_E_IM_PRO_LDIV_LDVDMD_HARF_SUBSAMPLING,		/**< 1/2 VD subsampling	*/
														ImproSensldiv_E_IM_PRO_LDIV_LDVDMD_ONE_THIRD_SUBSAMPLING,	/**< 1/3 VD subsampling	*/
														ImproSensldiv_E_IM_PRO_LDIV_LDVDMD_QUARTER_SUBSAMPLING,	/**< 1/4 VD subsampling	*/
													} EimproLdivLdvdmd;

			

													typedef enum {
														E_IM_PRO_LDIV_HD_INSERTION_ENABLE_DIS = 0,			/**< Disable	*/
														E_IM_PRO_LDIV_HD_INSERTION_ENABLE_EN,				/**< Enable		*/
													} E_IM_PRO_LDIV_HD_INSERTION_ENABLE;
										修改成
													typedef enum {
														ImproSensldiv_E_IM_PRO_LDIV_HD_INSERTION_ENABLE_DIS = 0,			/**< Disable	*/
														ImproSensldiv_E_IM_PRO_LDIV_HD_INSERTION_ENABLE_EN,				/**< Enable		*/
													} EimproLdivHdInsertionEnable;



													typedef enum {
														E_IM_PRO_LDIV_LDMCH_NO_COMBI = 0,			/**< No combination	*/
														E_IM_PRO_LDIV_LDMCH_2_COMBI,				/**< 2 combination	*/
														E_IM_PRO_LDIV_LDMCH_4_COMBI,				/**< 4 combination	*/
													} E_IM_PRO_LDIV_LDMCH;
										修改成
													typedef enum {
														ImproSensldiv_E_IM_PRO_LDIV_LDMCH_NO_COMBI = 0,			/**< No combination	*/
														ImproSensldiv_E_IM_PRO_LDIV_LDMCH_2_COMBI,				/**< 2 combination	*/
														ImproSensldiv_E_IM_PRO_LDIV_LDMCH_4_COMBI,				/**< 4 combination	*/
													} EimproLdivLdmch;



													typedef enum {
														E_IM_PRO_LDIV_LDDIVMD_SINGLE_OUTPUT = 0,	/**< Single output	*/
														E_IM_PRO_LDIV_LDDIVMD_2RECT_OUTPUT,			/**< 2-rectangle output	*/
														E_IM_PRO_LDIV_LDDIVMD_3RECT_OUTPUT,			/**< 3-rectangle output	*/
														E_IM_PRO_LDIV_LDDIVMD_4RECT_OUTPUT,			/**< 4-rectangle output	*/
													} E_IM_PRO_LDIV_LDDIVMD;
										修改成
													typedef enum {
														ImproSensldiv_E_IM_PRO_LDIV_LDDIVMD_SINGLE_OUTPUT = 0,	/**< Single output	*/
														ImproSensldiv_E_IM_PRO_LDIV_LDDIVMD_2RECT_OUTPUT,			/**< 2-rectangle output	*/
														ImproSensldiv_E_IM_PRO_LDIV_LDDIVMD_3RECT_OUTPUT,			/**< 3-rectangle output	*/
														ImproSensldiv_E_IM_PRO_LDIV_LDDIVMD_4RECT_OUTPUT,			/**< 4-rectangle output	*/
													} EimproLdivLddivmd;



													typedef enum {
														E_IM_PRO_LDIV_LDOPMD_2LINE_1OUT = 0,			/**< 2-line 1-point output	*/
														E_IM_PRO_LDIV_LDOPMD_2LINE_2OUT,				/**< 2-line 2-point output	*/
													} E_IM_PRO_LDIV_LDOPMD;
										修改成
													typedef enum {
														ImproSensldiv_E_IM_PRO_LDIV_LDOPMD_2LINE_1OUT = 0,			/**< 2-line 1-point output	*/
														ImproSensldiv_E_IM_PRO_LDIV_LDOPMD_2LINE_2OUT,				/**< 2-line 2-point output	*/
													} EimproLdivLdopmd;




			
							
							结构体:
							
															typedef struct {
																EimproLdivLdstmd				mode;						/**< Line division processing first line mode setting.<br>
																																	target registor	:LDIVCTL@@LDSTMD */
																EimproLdivLdipmd				ldipmd;						/**< Line division processing input point mode setting.<br>
																																	target registor	:LDIVCTL@@LDIPMD */
																EimproLdivLdvdmd				ldvdmd;						/**< Line division processing VD subsampling mode setting.<br>
																																	target registor	:LDIVCTL@@LDVDMD */
																EimproLdivHdInsertionEnable	hd_insertion_en;			/**< Line division processing HD insertion mode setting.<br>
																																	target registor	:LDIVCTL@@LDHDMD */
																EimproLdivLdmch					ldmch;						/**< Line division processing multi-CH combination mode setting.<br>
																																	target registor	:LDIVCTL@@LDMCH */
																EimproLdivLddivmd				lddivmd;					/**< Line division processing rectangle output mode setting.<br>
																																	target registor	:LDIVCTL@@LDDIVMD */
																EimproLdivLdopmd				ldopmd;						/**< Line division processing output point mode setting.<br>
																																	target registor	:LDIVCTL@@LDOPMD */
															} T_IM_PRO_LDIV_CTRL;
											修改成
															typedef struct {
																EimproLdivLdstmd				mode;						/**< Line division processing first line mode setting.<br>
																																	target registor	:LDIVCTL@@LDSTMD */
																EimproLdivLdipmd				ldipmd;						/**< Line division processing input point mode setting.<br>
																																	target registor	:LDIVCTL@@LDIPMD */
																EimproLdivLdvdmd				ldvdmd;						/**< Line division processing VD subsampling mode setting.<br>
																																	target registor	:LDIVCTL@@LDVDMD */
																EimproLdivHdInsertionEnable	hdInsertionEn;			/**< Line division processing HD insertion mode setting.<br>
																																	target registor	:LDIVCTL@@LDHDMD */
																EimproLdivLdmch					ldmch;						/**< Line division processing multi-CH combination mode setting.<br>
																																	target registor	:LDIVCTL@@LDMCH */
																EimproLdivLddivmd				lddivmd;					/**< Line division processing rectangle output mode setting.<br>
																																	target registor	:LDIVCTL@@LDDIVMD */
																EimproLdivLdopmd				ldopmd;						/**< Line division processing output point mode setting.<br>
																																	target registor	:LDIVCTL@@LDOPMD */
															} TimproLdivCtrl;
											



															typedef struct {
																USHORT		in_width;		/**< Line division processing input horizontal pixel count.<br>
																								value range[2~***]<br>
																								Maximum setting value depends on the horizontal maximum size of @ref impro_sentop_ctrl() argument of @ref  EimproSentopLdivMaxHsizeCtrl.<br>
																								target registor	:LDIVIHW@@LDIVIHW */
																USHORT		out_pos_x[4];	/**< Line Division Processing Output Horizontal Start Position.<br>
																								value range[2~16382]<br>
																								target registor	:LDIVOH@@LDIVOH[x] */
																USHORT		out_width[4];	/**< Line Division Processing Output Horizontal Pixel Count Register.<br>
																								value range[2~***]<br>
																								Maximum setting value depends on the horizontal maximum size of @ref impro_sentop_ctrl() argument of @ref  EimproSentopLdivMaxHsizeCtrl.<br>
																								target registor	:LDIVOHW@@LDIVOHW[x] */
															} T_IM_PRO_LDIV_AREA;
											修改成
															typedef struct {
																USHORT		inWidth;		/**< Line division processing input horizontal pixel count.<br>
																								value range[2~***]<br>
																								Maximum setting value depends on the horizontal maximum size of @ref impro_sentop_ctrl() argument of @ref  EimproSentopLdivMaxHsizeCtrl.<br>
																								target registor	:LDIVIHW@@LDIVIHW */
																USHORT		outPosX[4];	/**< Line Division Processing Output Horizontal Start Position.<br>
																								value range[2~16382]<br>
																								target registor	:LDIVOH@@LDIVOH[x] */
																USHORT		outWidth[4];	/**< Line Division Processing Output Horizontal Pixel Count Register.<br>
																								value range[2~***]<br>
																								Maximum setting value depends on the horizontal maximum size of @ref impro_sentop_ctrl() argument of @ref  EimproSentopLdivMaxHsizeCtrl.<br>
																								target registor	:LDIVOHW@@LDIVOHW[x] */
															} TimproLdivArea;
							
							
														
							公共方法:
							
										Im_PRO_LDIV_Start    修改成		impro_sensldiv_start
										Im_PRO_LDIV_Stop  修改成	impro_sensldiv_stop
										Im_PRO_LDIV_Ctrl    修改成		impro_sensldiv_ctrl
										Im_PRO_LDIV_Set_Area  修改成	impro_sensldiv_set_area					
										Im_PRO_LDIV_Set_PAEN    修改成		impro_sensldiv_set_paen
	
	
	
	

			(11)修改类 ImproSenslvs:
					
						枚举:
			
													typedef enum {
														E_IM_PRO_SLVS_INPUT_DATA_INVERSION_NORMAL = 0,			/**< Normal	*/
														E_IM_PRO_SLVS_INPUT_DATA_INVERSION_INVERT				/**< Invert	*/
													} E_IM_PRO_SLVS_INPUT_DATA_INVERSION;
										修改成
													typedef enum {
														ImproSenslvs_E_IM_PRO_SLVS_INPUT_DATA_INVERSION_NORMAL = 0,			/**< Normal	*/
														ImproSenslvs_E_IM_PRO_SLVS_INPUT_DATA_INVERSION_INVERT				/**< Invert	*/
													} EimproSlvsInputDataInversion;
			


													typedef enum {
														E_IM_PRO_SLVS_MULTIPLICATION_FACTOR_REF_CLK_72MHZ = 0,	/**< Reference Clock 72MHz Setting for (Data Rate 2.304Gbps)	*/
														E_IM_PRO_SLVS_MULTIPLICATION_FACTOR_RESERVED			/**< Reserved	*/
													} E_IM_PRO_SLVS_MULTIPLICATION_FACTOR;
										修改成
													typedef enum {
														ImproSenslvs_E_IM_PRO_SLVS_MULTIPLICATION_FACTOR_REF_CLK_72MHZ = 0,	/**< Reference Clock 72MHz Setting for (Data Rate 2.304Gbps)	*/
														ImproSenslvs_E_IM_PRO_SLVS_MULTIPLICATION_FACTOR_RESERVED			/**< Reserved	*/
													} EimproSlvsMultiplicationFactor;



													typedef enum {
														E_IM_PRO_SLVS_PD_STATE_POWER_DOWN = 0,			/**< Power Down state	*/
														E_IM_PRO_SLVS_PD_STATE_NORMAL					/**< power is being supplied state.	*/
													} E_IM_PRO_SLVS_PD_STATE;
										修改成
													typedef enum {
														ImproSenslvs_E_IM_PRO_SLVS_PD_STATE_POWER_DOWN = 0,			/**< Power Down state	*/
														ImproSenslvs_E_IM_PRO_SLVS_PD_STATE_NORMAL					/**< power is being supplied state.	*/
													} EimproSlvsPdState;

			

													typedef enum {
														E_IM_PRO_SLVS_VDOUT_CTRL_NO_OUTPUT = 0,			/**< Next VDOUT after frame stop is set is not output.	*/
														E_IM_PRO_SLVS_VDOUT_CTRL_OUTPUT,				/**< Next VDOUT after frame stop is set is output.	*/
													} E_IM_PRO_SLVS_VDOUT_CTRL;
										修改成
													typedef enum {
														ImproSenslvs_E_IM_PRO_SLVS_VDOUT_CTRL_NO_OUTPUT = 0,			/**< Next VDOUT after frame stop is set is not output.	*/
														ImproSenslvs_E_IM_PRO_SLVS_VDOUT_CTRL_OUTPUT,				/**< Next VDOUT after frame stop is set is output.	*/
													} EimproSlvsVdoutCtrl;



													typedef enum {
														E_IM_PRO_SLVS_ECCCRC_OPT_WO_ECC_CRC = 0,		/**< Without ECC/CRC.	*/
														E_IM_PRO_SLVS_ECCCRC_OPT_W_CRC,					/**< With CRC.	*/
														E_IM_PRO_SLVS_ECCCRC_OPT_W_ECC_2BYTE_PARITY,	/**< With ECC(2byte parity).	*/
														E_IM_PRO_SLVS_ECCCRC_OPT_W_ECC_4BYTE_PARITY,	/**< With ECC(4byte parity).	*/
														E_IM_PRO_SLVS_ECCCRC_OPT_MAX,					/**< ECC/CRC option select Max value	*/
													} E_IM_PRO_SLVS_ECCCRC_OPT;
										修改成
													typedef enum {
														ImproSenslvs_E_IM_PRO_SLVS_ECCCRC_OPT_WO_ECC_CRC = 0,		/**< Without ECC/CRC.	*/
														ImproSenslvs_E_IM_PRO_SLVS_ECCCRC_OPT_W_CRC,					/**< With CRC.	*/
														ImproSenslvs_E_IM_PRO_SLVS_ECCCRC_OPT_W_ECC_2BYTE_PARITY,	/**< With ECC(2byte parity).	*/
														ImproSenslvs_E_IM_PRO_SLVS_ECCCRC_OPT_W_ECC_4BYTE_PARITY,	/**< With ECC(4byte parity).	*/
														ImproSenslvs_E_IM_PRO_SLVS_ECCCRC_OPT_MAX,					/**< ECC/CRC option select Max value	*/
													} EimproSlvsEcccrcOpt;



													typedef enum {
														E_IM_PRO_SLVS_EXPECT_VAL_H_0000 = 0,			/**< expected value when Line Number Error occurred is 0x0000.	*/
														E_IM_PRO_SLVS_EXPECT_VAL_H_1FFF,				/**< expected value when Line Number Error occurred is 0x1FFF.	*/
													} E_IM_PRO_SLVS_EXPECT_VAL;
										修改成
													typedef enum {
														ImproSenslvs_E_IM_PRO_SLVS_EXPECT_VAL_H_0000 = 0,			/**< expected value when Line Number Error occurred is 0x0000.	*/
														ImproSenslvs_E_IM_PRO_SLVS_EXPECT_VAL_H_1FFF,				/**< expected value when Line Number Error occurred is 0x1FFF.	*/
													} EimproSlvsExpectVal;



													typedef enum {
														E_IM_PRO_SLVS_SYMBOL_TYPE_DATA = 0,			/**< code type is Data.	*/
														E_IM_PRO_SLVS_SYMBOL_TYPE_K_CODE,			/**< code type is K Code.	*/
													} E_IM_PRO_SLVS_SYMBOL_TYPE;
										修改成
													typedef enum {
														ImproSenslvs_E_IM_PRO_SLVS_SYMBOL_TYPE_DATA = 0,			/**< code type is Data.	*/
														ImproSenslvs_E_IM_PRO_SLVS_SYMBOL_TYPE_K_CODE,			/**< code type is K Code.	*/
													} EimproSlvsSymbolType;



													typedef enum {
														E_IM_PRO_SLVS_PIXEL_BIT_8BIT = 0,	/**< 8bit	*/
														E_IM_PRO_SLVS_PIXEL_BIT_10BIT,		/**< 10bit	*/
														E_IM_PRO_SLVS_PIXEL_BIT_12BIT,		/**< 12bit	*/
														E_IM_PRO_SLVS_PIXEL_BIT_14BIT,		/**< 14bit	*/
														E_IM_PRO_SLVS_PIXEL_BIT_16BIT,		/**< 16bit	*/
														E_IM_PRO_SLVS_PIXEL_BIT_MAX			/**< number of bits per pixel Max value	*/
													} E_IM_PRO_SLVS_PIXEL_BIT;
										修改成
													typedef enum {
														ImproSenslvs_E_IM_PRO_SLVS_PIXEL_BIT_8BIT = 0,	/**< 8bit	*/
														ImproSenslvs_E_IM_PRO_SLVS_PIXEL_BIT_10BIT,		/**< 10bit	*/
														ImproSenslvs_E_IM_PRO_SLVS_PIXEL_BIT_12BIT,		/**< 12bit	*/
														ImproSenslvs_E_IM_PRO_SLVS_PIXEL_BIT_14BIT,		/**< 14bit	*/
														ImproSenslvs_E_IM_PRO_SLVS_PIXEL_BIT_16BIT,		/**< 16bit	*/
														ImproSenslvs_E_IM_PRO_SLVS_PIXEL_BIT_MAX			/**< number of bits per pixel Max value	*/
													} EimproSlvsPixelBit;



													typedef enum {
														E_IM_PRO_SLVS_LANE_NUM_1LANE = 0,	/**< 1Lane	*/
														E_IM_PRO_SLVS_LANE_NUM_2LANE,		/**< 2Lane	*/
														E_IM_PRO_SLVS_LANE_NUM_4LANE,		/**< 4Lane	*/
														E_IM_PRO_SLVS_LANE_NUM_6LANE,		/**< 6Lane	*/
														E_IM_PRO_SLVS_LANE_NUM_8LANE,		/**< 8Lane	*/
														E_IM_PRO_SLVS_LANE_NUM_MAX			/**< number of valid Lanes Max value	*/
													} E_IM_PRO_SLVS_LANE_NUM;
										修改成
													typedef enum {
														ImproSenslvs_E_IM_PRO_SLVS_LANE_NUM_1LANE = 0,	/**< 1Lane	*/
														ImproSenslvs_E_IM_PRO_SLVS_LANE_NUM_2LANE,		/**< 2Lane	*/
														ImproSenslvs_E_IM_PRO_SLVS_LANE_NUM_4LANE,		/**< 4Lane	*/
														ImproSenslvs_E_IM_PRO_SLVS_LANE_NUM_6LANE,		/**< 6Lane	*/
														ImproSenslvs_E_IM_PRO_SLVS_LANE_NUM_8LANE,		/**< 8Lane	*/
														ImproSenslvs_E_IM_PRO_SLVS_LANE_NUM_MAX			/**< number of valid Lanes Max value	*/
													} EimproSlvsLaneNum;



													typedef enum {
														E_IM_PRO_SLVS_LANE_ENABLE_DIS = 0,			/**< Disable	*/
														E_IM_PRO_SLVS_LANE_ENABLE_EN				/**< Enable		*/
													} E_IM_PRO_SLVS_LANE_ENABLE;
										修改成
													typedef enum {
														ImproSenslvs_E_IM_PRO_SLVS_LANE_ENABLE_DIS = 0,			/**< Disable	*/
														ImproSenslvs_E_IM_PRO_SLVS_LANE_ENABLE_EN				/**< Enable		*/
													} EimproSlvsLaneEnable;



													typedef enum {
														E_IM_PRO_SLVS_OUT_FORMAT_1POINT = 0,	/**< 1-point output	*/
														E_IM_PRO_SLVS_OUT_FORMAT_2POINT,		/**< 2-point output	*/
														E_IM_PRO_SLVS_OUT_FORMAT_4POINT,		/**< 4-point output	*/
														E_IM_PRO_SLVS_OUT_FORMAT_8POINT,		/**< 8-point output	*/
														E_IM_PRO_SLVS_OUT_FORMAT_MAX			/**< output format Max value	*/
													} E_IM_PRO_SLVS_OUT_FORMAT;
										修改成
													typedef enum {
														ImproSenslvs_E_IM_PRO_SLVS_OUT_FORMAT_1POINT = 0,	/**< 1-point output	*/
														ImproSenslvs_E_IM_PRO_SLVS_OUT_FORMAT_2POINT,		/**< 2-point output	*/
														ImproSenslvs_E_IM_PRO_SLVS_OUT_FORMAT_4POINT,		/**< 4-point output	*/
														ImproSenslvs_E_IM_PRO_SLVS_OUT_FORMAT_8POINT,		/**< 8-point output	*/
														ImproSenslvs_E_IM_PRO_SLVS_OUT_FORMAT_MAX			/**< output format Max value	*/
													} EimproSlvsOutFormat;



													typedef enum {
														E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_0 = 0,	/**< L0IN	*/
														E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_1,		/**< L1IN	*/
														E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_2,		/**< L2IN	*/
														E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_3,		/**< L3IN	*/
														E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_4,		/**< L4IN	*/
														E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_5,		/**< L5IN	*/
														E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_6,		/**< L6IN	*/
														E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_7,		/**< L7IN	*/
														E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_MAX		/**< input port select Max value	*/
													} E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL;
										修改成
													typedef enum {
														ImproSenslvs_E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_0 = 0,	/**< L0IN	*/
														ImproSenslvs_E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_1,		/**< L1IN	*/
														ImproSenslvs_E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_2,		/**< L2IN	*/
														ImproSenslvs_E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_3,		/**< L3IN	*/
														ImproSenslvs_E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_4,		/**< L4IN	*/
														ImproSenslvs_E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_5,		/**< L5IN	*/
														ImproSenslvs_E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_6,		/**< L6IN	*/
														ImproSenslvs_E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_7,		/**< L7IN	*/
														ImproSenslvs_E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_MAX		/**< input port select Max value	*/
													} EimproSlvsLaneSwapInputPortSel;



													typedef enum {
														E_IM_PRO_SLVS_TRIM_DIS = 0,			/**< Disable	*/
														E_IM_PRO_SLVS_TRIM_EN				/**< Enable		*/
													} E_IM_PRO_SLVS_TRIM_ENABLE;
										修改成
													typedef enum {
														ImproSenslvs_E_IM_PRO_SLVS_TRIM_DIS = 0,			/**< Disable	*/
														ImproSenslvs_E_IM_PRO_SLVS_TRIM_EN				/**< Enable		*/
													} EimproSlvsTrimEnable;



													typedef enum {
														E_IM_PRO_SLVS_STATUS_EBD_NO_EBD = 0,		/**< no Embedded Data.	*/
														E_IM_PRO_SLVS_STATUS_EBD_DETECTED,			/**< Embedded Data is detected.	*/
													} E_IM_PRO_SLVS_STATUS_EBD;
										修改成
													typedef enum {
														ImproSenslvs_E_IM_PRO_SLVS_STATUS_EBD_NO_EBD = 0,		/**< no Embedded Data.	*/
														ImproSenslvs_E_IM_PRO_SLVS_STATUS_EBD_DETECTED,			/**< Embedded Data is detected.	*/
													} EimproSlvsStatusEbd;


			
							
							结构体:
							
																typedef struct {
																TimproSlvsInputDataInversionSel	invert_sel;				/**< input differential data value inversion setting. PHYCR1@@INVDATA */
																EimproSlvsMultiplicationFactor		multiplication_factor;	/**< Multiplication factor control setting. PHYCR1@@IFVDCNT */
																TimproSlvsPmaInitOpt				opt_init_param;			/**< Optional setting parameter for PMA macro. */
															} T_IM_PRO_SLVS_PMA_INIT;
											修改成
																typedef struct {
																TimproSlvsInputDataInversionSel	invertSel;				/**< input differential data value inversion setting. PHYCR1@@INVDATA */
																EimproSlvsMultiplicationFactor		multiplicationFactor;	/**< Multiplication factor control setting. PHYCR1@@IFVDCNT */
																TimproSlvsPmaInitOpt				optInitParam;			/**< Optional setting parameter for PMA macro. */
															} TimproSlvsPmaInit;
																										



															typedef struct {
																EimproSlvsPdState		lane0_pd_state;		/**< Lane0 Power Down state. PHYCR2@@IRXPDX0	*/
																EimproSlvsPdState		lane1_pd_state;		/**< Lane1 Power Down state. PHYCR2@@IRXPDX1	*/
																EimproSlvsPdState		lane2_pd_state;		/**< Lane2 Power Down state. PHYCR2@@IRXPDX2	*/
																EimproSlvsPdState		lane3_pd_state;		/**< Lane3 Power Down state. PHYCR2@@IRXPDX3	*/
																EimproSlvsPdState		lane4_pd_state;		/**< Lane4 Power Down state. PHYCR2@@IRXPDX4	*/
																EimproSlvsPdState		lane5_pd_state;		/**< Lane5 Power Down state. PHYCR2@@IRXPDX5	*/
																EimproSlvsPdState		lane6_pd_state;		/**< Lane6 Power Down state. PHYCR2@@IRXPDX6	*/
																EimproSlvsPdState		lane7_pd_state;		/**< Lane7 Power Down state. PHYCR2@@IRXPDX7	*/
															} T_IM_PRO_SLVS_PMA_PD;
											修改成
															typedef struct {
																EimproSlvsPdState		lane0PdState;		/**< Lane0 Power Down state. PHYCR2@@IRXPDX0	*/
																EimproSlvsPdState		lane1PdState;		/**< Lane1 Power Down state. PHYCR2@@IRXPDX1	*/
																EimproSlvsPdState		lane2PdState;		/**< Lane2 Power Down state. PHYCR2@@IRXPDX2	*/
																EimproSlvsPdState		lane3PdState;		/**< Lane3 Power Down state. PHYCR2@@IRXPDX3	*/
																EimproSlvsPdState		lane4PdState;		/**< Lane4 Power Down state. PHYCR2@@IRXPDX4	*/
																EimproSlvsPdState		lane5PdState;		/**< Lane5 Power Down state. PHYCR2@@IRXPDX5	*/
																EimproSlvsPdState		lane6PdState;		/**< Lane6 Power Down state. PHYCR2@@IRXPDX6	*/
																EimproSlvsPdState		lane7PdState;		/**< Lane7 Power Down state. PHYCR2@@IRXPDX7	*/
															} TimproSlvsPmaPd;
							


															typedef struct {
																EimproSlvsPdState		ram_pd_state;	/**< External RAM(Line Buffer) Power Down state.  RAMPD@@RAMPDX	*/
																EimproSlvsVdoutCtrl	vdout_ctrl;		/**< Control the VDOUT output when frame stop is set. TRGR@@VDEN	*/
																EimproSlvsEcccrcOpt	ecccrc_opt;		/**< ECC option / CRC Option of payload. CFGR0@@ECCCRC	*/
																EimproSlvsExpectVal	expect_val;		/**< Expected value when Line Number Error occurred. MMODE@@LNMAXCLP	*/
															} T_IM_PRO_SLVS_CTRL;
											修改成
															typedef struct {
																EimproSlvsPdState		ramPdState;	/**< External RAM(Line Buffer) Power Down state.  RAMPD@@RAMPDX	*/
																EimproSlvsVdoutCtrl	vdoutCtrl;		/**< Control the VDOUT output when frame stop is set. TRGR@@VDEN	*/
																EimproSlvsEcccrcOpt	ecccrcOpt;		/**< ECC option / CRC Option of payload. CFGR0@@ECCCRC	*/
																EimproSlvsExpectVal	expectVal;		/**< Expected value when Line Number Error occurred. MMODE@@LNMAXCLP	*/
															} TimproSlvsCtrl;



														typedef struct {
															UCHAR						StandbyLength;		/**< transfer count of Standby Code in Standby Sequence in the range of 18~255. */
															EimproSlvsSymbolType	StandbySymbolType;	/**< Symbol code type (D/K) following Comma Symbol inside the Standby Code. */
															UCHAR						StandbySymbol;		/**< Symbol following Comma Symbol inside the Standby Code. */
															UCHAR						DeskewInterval;		/**< Deskew Interval (Idle Code continuous transfer count between Deskew Code in Training Sequence) in the range of 20~255. */
															UCHAR						DeskewLength;		/**< Deskew Length (transfer count of Deskew Code in Training Sequence) in the range of 3~255. */
															EimproSlvsSymbolType	DeskewSymbolType;	/**< Code type (D/K) of the Symbol following Comma Symbol inside the Deskew Code. */
															UCHAR						DeskewSymbol;		/**< Symbol following Comma Symbol inside the Deskew Code. */
															EimproSlvsSymbolType	IdleSymbolType1;	/**< Code type (D/K) of the Symbol(2nd) of the Idle Code. */
															UCHAR						IdleSymbol1;		/**< Symbol(2nd) of idle code.  */
															EimproSlvsSymbolType	IdleSymbolType0;	/**< Code type (D/K) of the Symbol(1st) of the Idle Code. */
															UCHAR						IdleSymbol0;		/**< Symbol(1st) of Idle Code */
															EimproSlvsSymbolType	IdleSymbolType3;	/**< Code type (D/K) of the Symbol (4th) of the Idle Code. */
															UCHAR						IdleSymbol3;		/**< Symbol(4th) of idle code. */
															EimproSlvsSymbolType	IdleSymbolType2;	/**< Code type (D/K) of the Symbol (3rd) of the Idle Code. */
															UCHAR						IdleSymbol2;		/**< Symbol (3rd) of Idle Code */
														} T_IM_PRO_SLVS_COMMON_CFG;
											修改成
														typedef struct {
															UCHAR						StandbyLength;		/**< transfer count of Standby Code in Standby Sequence in the range of 18~255. */
															EimproSlvsSymbolType	StandbySymbolType;	/**< Symbol code type (D/K) following Comma Symbol inside the Standby Code. */
															UCHAR						StandbySymbol;		/**< Symbol following Comma Symbol inside the Standby Code. */
															UCHAR						DeskewInterval;		/**< Deskew Interval (Idle Code continuous transfer count between Deskew Code in Training Sequence) in the range of 20~255. */
															UCHAR						DeskewLength;		/**< Deskew Length (transfer count of Deskew Code in Training Sequence) in the range of 3~255. */
															EimproSlvsSymbolType	DeskewSymbolType;	/**< Code type (D/K) of the Symbol following Comma Symbol inside the Deskew Code. */
															UCHAR						DeskewSymbol;		/**< Symbol following Comma Symbol inside the Deskew Code. */
															EimproSlvsSymbolType	IdleSymbolType1;	/**< Code type (D/K) of the Symbol(2nd) of the Idle Code. */
															UCHAR						IdleSymbol1;		/**< Symbol(2nd) of idle code.  */
															EimproSlvsSymbolType	IdleSymbolType0;	/**< Code type (D/K) of the Symbol(1st) of the Idle Code. */
															UCHAR						IdleSymbol0;		/**< Symbol(1st) of Idle Code */
															EimproSlvsSymbolType	IdleSymbolType3;	/**< Code type (D/K) of the Symbol (4th) of the Idle Code. */
															UCHAR						IdleSymbol3;		/**< Symbol(4th) of idle code. */
															EimproSlvsSymbolType	IdleSymbolType2;	/**< Code type (D/K) of the Symbol (3rd) of the Idle Code. */
															UCHAR						IdleSymbol2;		/**< Symbol (3rd) of Idle Code */
														} TimproSlvsCommonCfg;



															typedef struct {
																EimproSlvsPixelBit					pixelbit;												/**< SLVS number of bits per pixel. CFGR0@@PixelBit */
																EimproSlvsLaneNum					lanenum;												/**< SLVS number of valid Lanes. CFGR0@@LaneNum */
																USHORT									linelength;												/**< SLVS number of bits per pixel(4 pixel boundary). CFGR1@@LineLength */
																EimproSlvsOutFormat				output_format;											/**< SLVS output format of the image data interface. OUTMD@@OUTMD */
																EimproSlvsLaneSwapInputPortSel	swap_lane[E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_MAX];	/**< SLVS swap lane configuration. LSWAP@@LxOUT<br>
																																											@image html im_pro_slvs_swap.png	*/
																TimproSlvsValidLaneSel			valid_lane;												/**< SLVS valid Lane select. VLANE@@LANEx */
															} T_IM_PRO_SLVS_MODE_CFG;
											修改成
															typedef struct {
																EimproSlvsPixelBit					pixelbit;												/**< SLVS number of bits per pixel. CFGR0@@PixelBit */
																EimproSlvsLaneNum					lanenum;												/**< SLVS number of valid Lanes. CFGR0@@LaneNum */
																USHORT									linelength;												/**< SLVS number of bits per pixel(4 pixel boundary). CFGR1@@LineLength */
																EimproSlvsOutFormat				outputFormat;											/**< SLVS output format of the image data interface. OUTMD@@OUTMD */
																EimproSlvsLaneSwapInputPortSel	swapLane[ImproSenslvs_E_IM_PRO_SLVS_LANE_SWAP_INPUT_PORT_SEL_MAX	];	/**< SLVS swap lane configuration. LSWAP@@LxOUT<br>
																																											@image html im_pro_slvs_swap.png	*/
																TimproSlvsValidLaneSel			valid_lane;												/**< SLVS valid Lane select. VLANE@@LANEx */
															} TimproSlvsModeCfg;


															typedef struct {
																EimproSlvsTrimEnable	enabled;		/**< SLVS trimming mode enabled. OUTMD@@TRMG */
																USHORT						start_x;		/**< SLVS trimming start X position(16 pixel boundary). HSADD@@HSADD */
																USHORT						width;			/**< SLVS trimming width(16 pixel boundary). HSIZE@@HSIZE */
															} T_IM_PRO_SLVS_TRIM_CFG;
											修改成
															typedef struct {
																EimproSlvsTrimEnable	enabled;		/**< SLVS trimming mode enabled. OUTMD@@TRMG */
																USHORT						startX;		/**< SLVS trimming start X position(16 pixel boundary). HSADD@@HSADD */
																USHORT						width;			/**< SLVS trimming width(16 pixel boundary). HSIZE@@HSIZE */
															} TimproSlvsTrimCfg;



															typedef struct {
																EimproSlvsStatusEbd	embedded_data_detect;			/**< indicate whether Embedded Data is detected in the frame. EBDST@@EBD */
																USHORT						ebd_stored_line_num;			/**< indicate the number of lines in which Embedded Data is stored. EBDST@@LNUM */
																USHORT						expect_value_discontinuity;		/**< indicate the expected value of the number of lines in which discontinuity is detected. LNEST@@EXPLN */
																USHORT						line_num_discontinuity;			/**< indicate the number of lines in which discontinuity is detected. LNEST@@DETLN */
															} T_IM_PRO_SLVS_STATUS;
											修改成
															typedef struct {
																EimproSlvsStatusEbd	embeddedDataDetect;			/**< indicate whether Embedded Data is detected in the frame. EBDST@@EBD */
																USHORT						ebdStoredLineNum;			/**< indicate the number of lines in which Embedded Data is stored. EBDST@@LNUM */
																USHORT						expectValueDiscontinuity;		/**< indicate the expected value of the number of lines in which discontinuity is detected. LNEST@@EXPLN */
																USHORT						lineNumDiscontinuity;			/**< indicate the number of lines in which discontinuity is detected. LNEST@@DETLN */
															} TimproSlvsStatus;							



														
							公共方法:
							
										Im_PRO_SLVS_SR    修改成		impro_senslvs_sr
										Im_PRO_SLVS_Update_Cfg  修改成	impro_senslvs_update_cfg
										Im_PRO_SLVS_SR_Rlease    修改成		impro_senslvs_sr_rlease
										Im_PRO_SLVS_Pma_Init  修改成	impro_senslvs_pma_init					
										Im_PRO_SLVS_Pma_Power_Down    修改成		impro_senslvs_pma_power_down
										Im_PRO_SLVS_Pma_Pll_Power_Down    修改成		impro_senslvs_pma_pll_power_down
										Im_PRO_SLVS_Common_Cfg  修改成	impro_senslvs_common_cfg
										Im_PRO_SLVS_Ctrl    修改成		impro_senslvs_ctrl
										Im_PRO_SLVS_Mode_Cfg  修改成	impro_senslvs_mode_cfg					
										Im_PRO_SLVS_Trim_Cfg    修改成		impro_senslvs_trim_cfg
										Im_PRO_SLVS_Get_Status  修改成	impro_senslvs_get_status
										Im_PRO_SLVS_Start    修改成		impro_senslvs_status
										Im_PRO_SLVS_Stop  修改成	impro_senslvs_stop					
										Im_PRO_SLVS_WaitEnd    修改成		impro_senslvs_wait_end		
										
										
										
										
										
										
										
										
										
										
										
										
			(12)修改类 ImproSrotop:
					
						枚举:
			
													typedef enum {
														E_IM_PRO_SROTOP_INPUT_MODE_DIRECT = 0,	/**< SEN direct connection mode	*/
														E_IM_PRO_SROTOP_INPUT_MODE_REINPUT,		/**< Bayer data re-input mode	*/
													} E_IM_PRO_SROTOP_INPUT_MODE;
										修改成
													typedef enum {
														ImproSrotop_E_IM_PRO_SROTOP_INPUT_MODE_DIRECT = 0,	/**< SEN direct connection mode	*/
														ImproSrotop_E_IM_PRO_SROTOP_INPUT_MODE_REINPUT,		/**< Bayer data re-input mode	*/
													} EimproSrotopInputMode;
			


													typedef enum {
														E_IM_PRO_SROTOP_MODE0 = 0,		/**< FF0/1: valid   FSHDL0: valid   FSHDL1: invalid	*/
														E_IM_PRO_SROTOP_MODE1,			/**< FF0/1: valid   FSHDL0: invalid FSHDL1: valid	*/
														E_IM_PRO_SROTOP_MODE2,			/**< FF0/1: invalid FSHDL0: valid   FSHDL1: valid	*/
													} E_IM_PRO_SROTOP_MODE;
										修改成
													typedef enum {
														ImproSrotop_E_IM_PRO_SROTOP_MODE0 = 0,		/**< FF0/1: valid   FSHDL0: valid   FSHDL1: invalid	*/
														ImproSrotop_E_IM_PRO_SROTOP_MODE1,			/**< FF0/1: valid   FSHDL0: invalid FSHDL1: valid	*/
														ImproSrotop_E_IM_PRO_SROTOP_MODE2,			/**< FF0/1: invalid FSHDL0: valid   FSHDL1: valid	*/
													} EimproSrotopMode;



													typedef enum {
														E_IM_PRO_SROTOP_CAG_TARGET_BLOCK_SRO = 0,	/**< FFC/CAG macro are used in SRO unit	*/
														E_IM_PRO_SROTOP_CAG_TARGET_BLOCK_B2B,		/**< FFC/CAG macro are used in B2B unit */
													} E_IM_PRO_SROTOP_CAG_TARGET_BLOCK;
										修改成
													typedef enum {
														ImproSrotop_E_IM_PRO_SROTOP_CAG_TARGET_BLOCK_SRO = 0,	/**< FFC/CAG macro are used in SRO unit	*/
														ImproSrotop_E_IM_PRO_SROTOP_CAG_TARGET_BLOCK_B2B,		/**< FFC/CAG macro are used in B2B unit */
													} EimproSrotopCagTargetBlock;

			

													typedef enum {
														E_IM_PRO_SROTOP_PATH_SEL_BAY_OUT_WITHOUT_BR = 0,	/**< Path without BayerResize	*/
														E_IM_PRO_SROTOP_PATH_SEL_BAY_OUT_WITH_BR,			/**< Path with BayerResize */
														E_IM_PRO_SROTOP_PATH_SEL_BAY_OUT_PG_OUT,			/**< Outputs of PG is inputted */
														E_IM_PRO_SROTOP_PATH_SEL_BAY_OUT_CAG_OUT,			/**< Outputs of CAG is inputted */
													} E_IM_PRO_SROTOP_PATH_SEL_BAY_OUT;
										修改成
													typedef enum {
														ImproSrotop_E_IM_PRO_SROTOP_PATH_SEL_BAY_OUT_WITHOUT_BR = 0,	/**< Path without BayerResize	*/
														ImproSrotop_E_IM_PRO_SROTOP_PATH_SEL_BAY_OUT_WITH_BR,			/**< Path with BayerResize */
														ImproSrotop_E_IM_PRO_SROTOP_PATH_SEL_BAY_OUT_PG_OUT,			/**< Outputs of PG is inputted */
														ImproSrotop_E_IM_PRO_SROTOP_PATH_SEL_BAY_OUT_CAG_OUT,			/**< Outputs of CAG is inputted */
													} EimproSrotopPathSelBayOut;



														typedef enum {
															E_IM_PRO_SROTOP_PATH_SEL_B2B_CONN_WITHOUT_BR = 0,	/**< Path without BayerResize	*/
															E_IM_PRO_SROTOP_PATH_SEL_B2B_CONN_WITH_BR,			/**< Path with BayerResize */
														} E_IM_PRO_SROTOP_PATH_SEL_B2B_CONN;
										修改成
														typedef enum {
															ImproSrotop_E_IM_PRO_SROTOP_PATH_SEL_B2B_CONN_WITHOUT_BR = 0,	/**< Path without BayerResize	*/
															ImproSrotop_E_IM_PRO_SROTOP_PATH_SEL_B2B_CONN_WITH_BR,			/**< Path with BayerResize */
														} EimproSrotopPathSelB2bConn;



													typedef enum {
														E_IM_PRO_SROTOP_PATH_SEL_LTM_CONN_WITHOUT_BR = 0,	/**< Path without BayerResize	*/
														E_IM_PRO_SROTOP_PATH_SEL_LTM_CONN_WITH_BR,			/**< Path with BayerResize */
													} E_IM_PRO_SROTOP_PATH_SEL_LTM_CONN;
										修改成
													typedef enum {
														ImproSrotop_E_IM_PRO_SROTOP_PATH_SEL_LTM_CONN_WITHOUT_BR = 0,	/**< Path without BayerResize	*/
														ImproSrotop_E_IM_PRO_SROTOP_PATH_SEL_LTM_CONN_WITH_BR,			/**< Path with BayerResize */
													} EimproSrotopPathSelLtmConn;



													typedef enum {
														E_IM_PRO_WEITGEN_DIS = 0,				/**< Disable	*/
														E_IM_PRO_WEITGEN_EN						/**< Enable		*/
													} E_IM_PRO_WEITGEN_ENABLE;
										修改成
													typedef enum {
														ImproSrotop_E_IM_PRO_WEITGEN_DIS = 0,				/**< Disable	*/
														ImproSrotop_E_IM_PRO_WEITGEN_EN						/**< Enable		*/
													} EimproWeitgenEnable;



													typedef enum {
														E_IM_PRO_SROTOP_CLK_TYPE_SROCLK = 0,		/**< SROCLK		*/
														E_IM_PRO_SROTOP_CLK_TYPE_SROCLK2,			/**< SROCLK2	*/
													} E_IM_PRO_SROTOP_CLK_TYPE;
										修改成
													typedef enum {
														ImproSrotop_E_IM_PRO_SROTOP_CLK_TYPE_SROCLK = 0,		/**< SROCLK		*/
														ImproSrotop_E_IM_PRO_SROTOP_CLK_TYPE_SROCLK2,			/**< SROCLK2	*/
													} EimproSrotopClkType;



														typedef enum {
															E_IM_PRO_WEITGEN_CH0 = 0,				/**< ch0		*/
															E_IM_PRO_WEITGEN_CH1,					/**< ch1		*/
														} E_IM_PRO_WEITGEN_CH;
										修改成
														typedef enum {
															ImproSrotop_E_IM_PRO_WEITGEN_CH0 = 0,				/**< ch0		*/
															ImproSrotop_E_IM_PRO_WEITGEN_CH1,					/**< ch1		*/
														} EimproWeitgenCh;



							
							结构体:
							
															typedef struct {
																EimproSrotopInputMode			input_mode;					/**< Select the input mode of SRO unit. SROTOPCTL1@@SROISW */
																EimproSrotopMode				sro_mode_sel;				/**< Select an mode of SRO unit. SROTOPCTL1@@SROMD */
																EimproSrotopCagTargetBlock	cag_target_sel;				/**< Select in which unit FFC/CAG macro are used, SRO or B2B. SROTOPCTL1@@CAGSL */
																EimproSrotopPathSelBayOut	bay_out_path_sel;			/**< Select a path for P2M0/1 and PWCH0/1 of SRO unit. SROTOPCTL1@@BRPSW0 */
																EimproSrotopPathSelB2bConn	b2b_connect_path_sel;		/**< Select a path for B2B direct connection I/F. SROTOPCTL1@@BRPSW1 */
																EimproSrotopPathSelLtmConn	ltm_connect_path_sel;		/**< Select a path for LTM direct connection I/F. SROTOPCTL1@@BRPSW2 */
																E_IM_PRO_ORG						firstPixel[2];				/**< Select an Bayer first pixel for each PAT block input SROTOPCTL2@@ORG0-@@ORG1 */
															} T_IM_PRO_SROTOP_CTRL;
											修改成
															typedef struct {
																EimproSrotopInputMode			inputMode;					/**< Select the input mode of SRO unit. SROTOPCTL1@@SROISW */
																EimproSrotopMode				sroModeSel;				/**< Select an mode of SRO unit. SROTOPCTL1@@SROMD */
																EimproSrotopCagTargetBlock	cagTargetSel;				/**< Select in which unit FFC/CAG macro are used, SRO or B2B. SROTOPCTL1@@CAGSL */
																EimproSrotopPathSelBayOut	bayOutPathSel;			/**< Select a path for P2M0/1 and PWCH0/1 of SRO unit. SROTOPCTL1@@BRPSW0 */
																EimproSrotopPathSelB2bConn	b2bConnectPathSel;		/**< Select a path for B2B direct connection I/F. SROTOPCTL1@@BRPSW1 */
																EimproSrotopPathSelLtmConn	ltmConnectPathSel;		/**< Select a path for LTM direct connection I/F. SROTOPCTL1@@BRPSW2 */
																E_IM_PRO_ORG						firstPixel[2];				/**< Select an Bayer first pixel for each PAT block input SROTOPCTL2@@ORG0-@@ORG1 */
															} TimproSrotopCtrl;
																										



															typedef struct {
																USHORT								v_wait_signal_pos;			/**< vertical position of WAIT signal occurs during vertical blanking. @@GENVx <br>
																																	value range  :[2 - 16382] */
																USHORT								h_wait_signal_pos;			/**< horizontal position of WAIT signal occurs during horizontal blanking. @@GENHx  <br>
																																	value range  :[2 - 16382] */
															} T_IM_PRO_SROTOP_WEITGEN_CTRL;
											修改成
															typedef struct {
																USHORT								vWaitSignalPos;			/**< vertical position of WAIT signal occurs during vertical blanking. @@GENVx <br>
																																	value range  :[2 - 16382] */
																USHORT								hWaitSignalPos;			/**< horizontal position of WAIT signal occurs during horizontal blanking. @@GENHx  <br>
																																	value range  :[2 - 16382] */
															} TimproSrotopWeitgenCtrl;
							


		
														
							公共方法:
							
										Im_PRO_SROTOP_Init    修改成		impro_srotop_init
										Im_PRO_SROTOP_SW_Reset  修改成	impro_srotop_sw_reset
										Im_PRO_SROTOP_Control_Clock    修改成		impro_srotop_control_clock
										Im_PRO_SROTOP_Ctrl  修改成	impro_srotop_ctrl					
										Im_PRO_SROTOP_WEITGEN_Ctrl    修改成		impro_srotop_weitgen_ctrl
										Im_PRO_SROTOP_WEITGEN_Enable    修改成		impro_srotop_weitgen_enable



			(13)修改类 ImproSroafpb:
					
						宏定义:
					D_IM_PRO_SRO_AFPB_CH_NUM     修改成      ImproSroafpb_D_IM_PRO_SRO_AFPB_CH_NUM
					
					
					
					
					
						枚举:
			
													typedef enum {
														E_IM_PRO_AFPB_CH_A = 0,						/**< ch A	*/
														E_IM_PRO_AFPB_CH_G,							/**< ch G	*/
													} E_IM_PRO_AFPB_CH;
										修改成
													typedef enum {
														ImproSroafpb_E_IM_PRO_AFPB_CH_A = 0,						/**< ch A	*/
														ImproSroafpb_E_IM_PRO_AFPB_CH_G,							/**< ch G	*/
													} EimproAfpbCh;
			


							结构体:
							T_IM_PRO_AFPB_CTRL
							修改成
							typedef struct {
									T_IM_PRO_AREA_INFO		afpbArea;		/**< AFPB Window information<br>
																				value range  :posX[0 - 16382]<br>
																				target registor  :@@AFPBH<br><br>
																				value range  :posY[0 - 16380]<br>
																				target registor  :@@AFPBV<br><br>
																				value range  :width[2 - 16382]<br>
																				target registor  :@@AFPBHW<br><br>
																				value range  :lines[2 - 16382]<br>
																				target registor  :@@AFPBVW */
								} TimproAfpbCtrl;


		
														
							公共方法:
							
										Im_PRO_AFPB_Start    修改成		impro_sroafpb_start
										Im_PRO_AFPB_Stop  修改成	impro_sroafpb_stop
										Im_PRO_AFPB_Ctrl    修改成		impro_sroafpb_ctrl
									
									




			(14)修改类 ImproSrocag:
					
					
					宏定义;
					
					
													#define	ImproSrocag_D_IM_PRO_CAG_CAGGV_MIN			(0)			/**< Minimum setting of CAGGV	*/
													#define	ImproSrocag_D_IM_PRO_CAG_CAGGV_MAX			(8960)		/**< Maximum setting of CAGGV	*/
													#define	ImproSrocag_D_IM_PRO_CAG_CAGGH_MIN			(0)			/**< Minimum setting of CAGGH	*/
													#define	ImproSrocag_D_IM_PRO_CAG_CAGGVW_MIN			(10)		/**< Minimum setting of CAGGVW	*/
													#define	ImproSrocag_D_IM_PRO_CAG_CAGGVW_MAX			(8960)		/**< Maximum setting of CAGGVW	*/
													#define	ImproSrocag_D_IM_PRO_CAG_CAGGHW_MIN			(18)		/**< Minimum setting of CAGGHW	*/
													#define	ImproSrocag_D_IM_PRO_CAG_CAGV_MIN			(4)			/**< Minimum setting of CAGV	*/
													#define	ImproSrocag_D_IM_PRO_CAG_CAGV_MAX			(8954)		/**< Maximum setting of CAGV	*/
													#define	ImproSrocag_D_IM_PRO_CAG_CAGH_MIN			(8)			/**< Minimum setting of CAGH	*/
													#define	ImproSrocag_D_IM_PRO_CAG_CAGVW_MIN			(2)			/**< Minimum setting of CAGVW	*/
													#define	ImproSrocag_D_IM_PRO_CAG_CAGVW_MAX			(8952)		/**< Maximum setting of CAGVW	*/
													#define	ImproSrocag_D_IM_PRO_CAG_CAGHW_MIN			(1)			/**< Minimum setting of CAGHW	*/
													
													// --- REMOVE_ES_COMPILE_OPT BEGIN ---
													#ifdef CO_ES1_HARDWARE
													// --- REMOVE_ES_COMPILE_OPT END ---
													// --- REMOVE_ES1_HARDWARE BEGIN ---
													#define	ImproSrocag_D_IM_PRO_CAG_CAGGH_MAX			(2496)		/**< Maximum setting of CAGGH	*/
													#define	ImproSrocag_D_IM_PRO_CAG_CAGGHW_MAX			(2496)		/**< Maximum setting of CAGGHW	*/
													#define	ImproSrocag_D_IM_PRO_CAG_CAGH_MAX			(2487)		/**< Maximum setting of CAGH	*/
													#define	ImproSrocag_D_IM_PRO_CAG_CAGHW_MAX			(2480)		/**< Maximum setting of CAGHW	*/
													// --- REMOVE_ES1_HARDWARE END ---
													// --- REMOVE_ES_COMPILE_OPT BEGIN ---
													#endif // CO_ES1_HARDWARE
													#ifdef CO_ES3_HARDWARE
													// --- REMOVE_ES_COMPILE_OPT END ---
													// --- REMOVE_ES3_HARDWARE BEGIN ---
													#define	ImproSrocag_D_IM_PRO_CAG_CAGGH_MAX			(2900)		/**< Maximum setting of CAGGH	*/
													#define	ImproSrocag_D_IM_PRO_CAG_CAGGHW_MAX			(2900)		/**< Maximum setting of CAGGHW	*/
													#define	ImproSrocag_D_IM_PRO_CAG_CAGH_MAX			(2891)		/**< Maximum setting of CAGH	*/
													#define	ImproSrocag_D_IM_PRO_CAG_CAGHW_MAX			(2884)		/**< Maximum setting of CAGHW	*/
													// --- REMOVE_ES3_HARDWARE END --
													// --- REMOVE_ES_COMPILE_OPT BEGIN ---
													#endif	// CO_ES3_HARDWARE
					
					
					
						枚举:
			
													typedef enum {
														E_IM_PRO_CAG_CLIP_MODE_14BIT = 0,	/**< Data is clipped to 14bit.	*/
														E_IM_PRO_CAG_CLIP_MODE_14BIT_MAX	/**< Data is clipped to 12bit.	*/
													} E_IM_PRO_CAG_CLIP_MODE;
										修改成
													typedef enum {
														ImproSrocag_E_IM_PRO_CAG_CLIP_MODE_14BIT = 0,	/**< Data is clipped to 14bit.	*/
														ImproSrocag_E_IM_PRO_CAG_CLIP_MODE_14BIT_MAX	/**< Data is clipped to 12bit.	*/
													} EimproCagClipMode;
																


													typedef enum {
														E_IM_PRO_CAG_COR_MODE_GBGB = 0,	/**< GrGb use	*/
														E_IM_PRO_CAG_COR_MODE_G			/**< G use		*/
													} E_IM_PRO_CAG_COR_MODE;
										修改成
													typedef enum {
														ImproSrocag_E_IM_PRO_CAG_COR_MODE_GBGB = 0,	/**< GrGb use	*/
														ImproSrocag_E_IM_PRO_CAG_COR_MODE_G			/**< G use		*/
													} EimproCagCorMode;



														typedef enum {
															E_IM_PRO_CAG_PAD_MODE_DIS = 0,	/**< Disable	*/
															E_IM_PRO_CAG_PAD_MODE_EN		/**< Enable		*/
														} E_IM_PRO_CAG_PAD_MODE;
										修改成
														typedef enum {
															ImproSrocag_E_IM_PRO_CAG_PAD_MODE_DIS = 0,	/**< Disable	*/
															ImproSrocag_E_IM_PRO_CAG_PAD_MODE_EN		/**< Enable		*/
														} EimproCagPadMode;

			

														typedef enum {
															E_IM_PRO_CAG_MODE_OPT_CENTER_ONLY = 0,			/**< Optical center distance only  */
															E_IM_PRO_CAG_MODE_SURFACE_ONLY,					/**< Surface correction only */
															E_IM_PRO_CAG_MODE_OPT_CENTER_SURFACE_ADD		/**< Additional value of Optical center distance and Surface correction */
														} E_IM_PRO_CAG_MODE;
										修改成
														typedef enum {
															ImproSrocag_E_IM_PRO_CAG_MODE_OPT_CENTER_ONLY = 0,			/**< Optical center distance only  */
															ImproSrocag_E_IM_PRO_CAG_MODE_SURFACE_ONLY,					/**< Surface correction only */
															ImproSrocag_E_IM_PRO_CAG_MODE_OPT_CENTER_SURFACE_ADD		/**< Additional value of Optical center distance and Surface correction */
														} EimproCagMode;



		



							
							结构体:
							
													typedef struct {
														// --- REMOVE_ES_COMPILE_OPT BEGIN ---
														#ifdef CO_ES1_HARDWARE
														// --- REMOVE_ES_COMPILE_OPT END ---
														// --- REMOVE_ES1_HARDWARE BEGIN ---
															USHORT	g_pos_x;		/**< global Compensation horizontal direction start position<br>
																						value range		:[0 - 2496]<br>
																						target registor	:@@CAGGH */
															USHORT	g_pos_y;		/**< global Compensation vertical direction start position<br>
																						value range		:[0 - 8960] 2pixel boundary<br>
																						target registor	:@@CAGGV */
															USHORT	g_width;		/**< global horizontal size <br>
																						value range		:[18 - 2496] 2pixel boundary<br>
																						target registor	:@@CAGGHW */
															USHORT	g_lines;		/**< global vertical size<br>
																						value range		:[10 - 8960] 2pixel boundary<br>
																						target registor	:@@CAGGVW */
															USHORT	posX;			/**< Compensation horizontal direction start position<br>
																						value range		:[8 - 2487]<br>
																						target registor	:@@CAGH */
															USHORT	posY;			/**< Compensation vertical direction start position<br>
																						value range		:[4 - 8954] 2pixel boundary<br>
																						target registor	:@@CAGV */
															USHORT	width;			/**< horizontal size<br>
																						value range		:[1 - 2480]<br>
																						target registor	:@@CAGHW */
															USHORT	lines;			/**< vertical size<br>
																						value range		:[2 - 8952] 2pixel boundary<br>
																						target registor	:@@CAGVW */
														// --- REMOVE_ES1_HARDWARE END ---
														// --- REMOVE_ES_COMPILE_OPT BEGIN ---
														#endif // CO_ES1_HARDWARE
														#ifdef CO_ES3_HARDWARE
														// --- REMOVE_ES_COMPILE_OPT END ---
														// --- REMOVE_ES3_HARDWARE BEGIN ---
															USHORT	g_pos_x;		/**< global Compensation horizontal direction start position<br>
																						value range		:[0 - 2900]<br>
																						target registor	:@@CAGGH */
															USHORT	g_pos_y;		/**< global Compensation vertical direction start position<br>
																						value range		:[0 - 8960] 2pixel boundary<br>
																						target registor	:@@CAGGV */
															USHORT	g_width;		/**< global horizontal size <br>
																						value range		:[18 - 2900] 2pixel boundary<br>
																						target registor	:@@CAGGHW */
															USHORT	g_lines;		/**< global vertical size<br>
																						value range		:[10 - 8960] 2pixel boundary<br>
																						target registor	:@@CAGGVW */
															USHORT	posX;			/**< Compensation horizontal direction start position<br>
																						value range		:[8 - 2891]<br>
																						target registor	:@@CAGH */
															USHORT	posY;			/**< Compensation vertical direction start position<br>
																						value range		:[4 - 8954] 2pixel boundary<br>
																						target registor	:@@CAGV */
															USHORT	width;			/**< horizontal size<br>
																						value range		:[1 - 2884]<br>
																						target registor	:@@CAGHW */
															USHORT	lines;			/**< vertical size<br>
																						value range		:[2 - 8952] 2pixel boundary<br>
																						target registor	:@@CAGVW */
														// --- REMOVE_ES3_HARDWARE END --
														// --- REMOVE_ES_COMPILE_OPT BEGIN ---
														#endif	// CO_ES3_HARDWARE
														// --- REMOVE_ES_COMPILE_OPT END ---
														} T_IM_PRO_CAG_AREA;
											修改成
															typedef struct {
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#ifdef CO_ES1_HARDWARE
															// --- REMOVE_ES_COMPILE_OPT END ---
															// --- REMOVE_ES1_HARDWARE BEGIN ---
																USHORT	gPosX;		/**< global Compensation horizontal direction start position<br>
																							value range		:[0 - 2496]<br>
																							target registor	:@@CAGGH */
																USHORT	gPosY;		/**< global Compensation vertical direction start position<br>
																							value range		:[0 - 8960] 2pixel boundary<br>
																							target registor	:@@CAGGV */
																USHORT	gWidth;		/**< global horizontal size <br>
																							value range		:[18 - 2496] 2pixel boundary<br>
																							target registor	:@@CAGGHW */
																USHORT	gLines;		/**< global vertical size<br>
																							value range		:[10 - 8960] 2pixel boundary<br>
																							target registor	:@@CAGGVW */
																USHORT	posX;			/**< Compensation horizontal direction start position<br>
																							value range		:[8 - 2487]<br>
																							target registor	:@@CAGH */
																USHORT	posY;			/**< Compensation vertical direction start position<br>
																							value range		:[4 - 8954] 2pixel boundary<br>
																							target registor	:@@CAGV */
																USHORT	width;			/**< horizontal size<br>
																							value range		:[1 - 2480]<br>
																							target registor	:@@CAGHW */
																USHORT	lines;			/**< vertical size<br>
																							value range		:[2 - 8952] 2pixel boundary<br>
																							target registor	:@@CAGVW */
															// --- REMOVE_ES1_HARDWARE END ---
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#endif // CO_ES1_HARDWARE
															#ifdef CO_ES3_HARDWARE
															// --- REMOVE_ES_COMPILE_OPT END ---
															// --- REMOVE_ES3_HARDWARE BEGIN ---
																USHORT	gPosX;		/**< global Compensation horizontal direction start position<br>
																							value range		:[0 - 2900]<br>
																							target registor	:@@CAGGH */
																USHORT	gPosY;		/**< global Compensation vertical direction start position<br>
																							value range		:[0 - 8960] 2pixel boundary<br>
																							target registor	:@@CAGGV */
																USHORT	gWidth;		/**< global horizontal size <br>
																							value range		:[18 - 2900] 2pixel boundary<br>
																							target registor	:@@CAGGHW */
																USHORT	gLines;		/**< global vertical size<br>
																							value range		:[10 - 8960] 2pixel boundary<br>
																							target registor	:@@CAGGVW */
																USHORT	posX;			/**< Compensation horizontal direction start position<br>
																							value range		:[8 - 2891]<br>
																							target registor	:@@CAGH */
																USHORT	posY;			/**< Compensation vertical direction start position<br>
																							value range		:[4 - 8954] 2pixel boundary<br>
																							target registor	:@@CAGV */
																USHORT	width;			/**< horizontal size<br>
																							value range		:[1 - 2884]<br>
																							target registor	:@@CAGHW */
																USHORT	lines;			/**< vertical size<br>
																							value range		:[2 - 8952] 2pixel boundary<br>
																							target registor	:@@CAGVW */
															// --- REMOVE_ES3_HARDWARE END --
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#endif	// CO_ES3_HARDWARE
															// --- REMOVE_ES_COMPILE_OPT END ---
															} TimproCagArea;
																										



																typedef struct {
																	EimproCagClipMode	clip_mode;				/**< Clip select after correction<br>
																														target registor	:@@CLPSEL */
																	EimproCagCorMode	g_gap_cor_mode;			/**< gr/gb gap correction mode register<br>
																														target registor	:@@GCAMD */
																	EimproCagPadMode	g_gap_pad_mode;			/**< Processing pixel padding ring register<br>
																														target registor	:@@CAGPDD */
																	EimproCagMode		g_gap_mode;				/**< Gap correction mode register<br>
																														target registor	:@@CAMD */
																	USHORT	gradient_u_limit;						/**< upper limit to calculate the limit value of GrGb gradient correction amount.<br>
																														value range		:[0 - 16383]<br>
																														This value must be set to maintain the relationship: BFGLMTL<=BFGLMTH.<br>
																														target registor	:@@BFGLMTH	*/
																	USHORT	gradient_l_limit;						/**< lower limit to calculate the limit value of GrGb gradient correction amount.<br>
																														value range		:[0 - 16383]<br>
																														This value must be set to maintain the relationship: BFGLMTL<=BFGLMTH.<br>
																														target registor	:@@BFGLMTL	*/
																	USHORT	gradient_threshold;						/**< threshold to calculate the limit value of GrGb gradient correction amount.<br>
																														value range		:[0 - 16383]<br>
																														target registor	:@@BFGTHA	*/
																	UCHAR	gradient_threshold_gain;				/**< gain value to calculate the limit value of GrGb gradient correction amount.<br>
																														value range		:[0x00 - 0xFF(=3.984375)]<br>
																														target registor	:@@BFGTHK	*/
																} T_IM_PRO_CAG_CTRL_GLEVEL_DIFF;
											修改成
																typedef struct {
																	EimproCagClipMode	clipMode;				/**< Clip select after correction<br>
																														target registor	:@@CLPSEL */
																	EimproCagCorMode	gGapCorMode;			/**< gr/gb gap correction mode register<br>
																														target registor	:@@GCAMD */
																	EimproCagPadMode	gGapPadMode;			/**< Processing pixel padding ring register<br>
																														target registor	:@@CAGPDD */
																	EimproCagMode		gGapMode;				/**< Gap correction mode register<br>
																														target registor	:@@CAMD */
																	USHORT	gradientULimit;						/**< upper limit to calculate the limit value of GrGb gradient correction amount.<br>
																														value range		:[0 - 16383]<br>
																														This value must be set to maintain the relationship: BFGLMTL<=BFGLMTH.<br>
																														target registor	:@@BFGLMTH	*/
																	USHORT	gradientLLimit;						/**< lower limit to calculate the limit value of GrGb gradient correction amount.<br>
																														value range		:[0 - 16383]<br>
																														This value must be set to maintain the relationship: BFGLMTL<=BFGLMTH.<br>
																														target registor	:@@BFGLMTL	*/
																	USHORT	gradientThreshold;						/**< threshold to calculate the limit value of GrGb gradient correction amount.<br>
																														value range		:[0 - 16383]<br>
																														target registor	:@@BFGTHA	*/
																	UCHAR	gradientThresholdGain;				/**< gain value to calculate the limit value of GrGb gradient correction amount.<br>
																														value range		:[0x00 - 0xFF(=3.984375)]<br>
																														target registor	:@@BFGTHK	*/
																} TimproCagCtrlGlevelDiff;
							


																typedef struct {
																	USHORT	v_binning_ratio_reciprocal_num;	/**< Reciprocal number of the binning ratio of the vertical direction.<br>
																												value range		:[0 - 4095]<br>
																												target registor	:@@RBRV	*/
																	USHORT	h_binning_ratio_reciprocal_num;	/**< eciprocal number of the binning ratio of the horizontal direction.<br>
																												value range		:[0 - 4095]<br>
																												target registor	:@@RBRH	*/
																	SHORT	opt_center_pos_h[3];			/**< Optical center position and offset(horizontal)<br>
																												value range		:[0 - 65535(-16384.0 - +16383.5)]<br>
																												target registor	:@@ABOARH/@@ABOAGH/@@ABOABH	*/
																	SHORT	opt_center_pos_v[3];			/**< Optical center position and offset(vertical)<br>
																												value range		:[0 - 65535(-16384.0 - +16383.5)]<br>
																												target registor	:@@ABOARV/@@ABOAGV/@@ABOABV	*/
																	SHORT	gain[3];						/**< Gain<br>
																												value range		:[0 - 8191(-0.00000190 - +0.00000190)]<br>
																												target registor	:@@ABGAR/@@ABGAG/@@ABGAB	*/
																	SHORT	transfer_u_limit_h[3];			/**< horizontal Transfer upper limit<br>
																												value range		:[0x1800(=-8.0) - 0x0800(=+8)]<br>
																												target registor	:@@ABLRHU/@@ABLGHU/@@ABLBHU	*/
																	SHORT	transfer_l_limit_h[3];			/**< horizontal Transfer lower limit<br>
																												value range		:[0x1800(=-8.0) - 0x0800(=+8)]<br>
																												target registor	:@@ABLRHL/@@ABLGHL/@@ABLBHL	*/
																	SHORT	transfer_u_limit_v[3];			/**< vertical Transfer upper limit<br>
																												value range		:[0x0C00(=-4.0) - 0x0400(=+4.0)]<br>
																												target registor	:@@ABLRVU/@@ABLGVU/@@ABLBVU	*/
																	SHORT	transfer_l_limit_v[3];			/**< vertical Transfer lower limit<br>
																												value range		:[0x0C00(=-4.0) - 0x0400(=+4.0)]<br>
																												target registor	:@@ABLRVL/@@ABLGVL/@@ABLBVL	*/
																
																	SHORT	transfer_offset_h[3];			/**< horizontal Transfer offset<br>
																												value range		:[0 - 4095(-8.0 - +7.99609375)]<br>
																												target registor	:@@ABOFSRH/@@ABOFSGH/@@ABOFSBH	*/
																	SHORT	transfer_offset_v[3];			/**< vertical Transfer offset<br>
																												value range		:[0 - 2047(-4.0 - +3.99609375)]<br>
																												target registor	:@@ABOFSRV/@@ABOFSGV/@@ABOFSBV	*/
																	USHORT	corner_thresh_1[3];				/**< corner threshold 1<br>
																												value range		:[0 - 0xFFFF(15-bit integer part,1-bit fractional part)]<br>
																												target registor	:@@ABNLTHR1/@@ABNLTHG1/@@ABNLTHB1	*/
																	SHORT	corner_gain_1[3];				/**< corner gain 1<br>
																												value range		:[0 - 32767(-0.99993896484375 - +0.99993896484375)]<br>
																												target registor	:@@ABNLGAR1/@@ABNLGAG1/@@ABNLGAB1	*/
																	USHORT	corner_thresh_2[3];				/**< corner threshold 2<br>
																												value range		:[0 - 0xFFFF(15-bit integer part,1-bit fractional part)]<br>
																												target registor	:@@ABNLTHR2/@@ABNLTHG2/@@ABNLTHB2	*/
																	SHORT	corner_gain_2[3];				/**< corner gain 2<br>
																												value range		:[0 - 32767(-0.99993896484375 - +0.99993896484375)]<br>
																												target registor	:@@ABNLGAR2/@@ABNLGAG2/@@ABNLGAB2	*/
																	USHORT	corner_thresh_3[3];				/**< corner threshold 3<br>
																												value range		:[0 - 0xFFFF(15-bit integer part,1-bit fractional part)]<br>
																												target registor	:@@ABNLTHR3/@@ABNLTHG3/@@ABNLTHB3	*/
																	SHORT	corner_gain_3[3];				/**< corner gain 3<br>
																												value range		:[0 - 32767(-0.99993896484375 - +0.99993896484375)]<br>
																												target registor	:@@ABNLGAR3/@@ABNLGAG3/@@ABNLGAB3	*/
																	USHORT	corner_thresh_4[3];				/**< corner threshold 4<br>
																												value range		:[0 - 0xFFFF(15-bit integer part,1-bit fractional part)]<br>
																												target registor	:@@ABNLTHR4/@@ABNLTHG4/@@ABNLTHB4	*/
																	SHORT	corner_gain_4[3];				/**< corner gain 4<br>
																												value range		:[0 - 32767(-0.99993896484375 - +0.99993896484375)]<br>
																												target registor	:@@ABNLGAR4/@@ABNLGAG4/@@ABNLGAB4	*/
																} T_IM_PRO_CAG_CTRL;
											修改成
																typedef struct {
																	USHORT	vBinningRatioReciprocalNum;	/**< Reciprocal number of the binning ratio of the vertical direction.<br>
																												value range		:[0 - 4095]<br>
																												target registor	:@@RBRV	*/
																	USHORT	hBinningRatioReciprocalNum;	/**< eciprocal number of the binning ratio of the horizontal direction.<br>
																												value range		:[0 - 4095]<br>
																												target registor	:@@RBRH	*/
																	SHORT	optCenterPosH[3];			/**< Optical center position and offset(horizontal)<br>
																												value range		:[0 - 65535(-16384.0 - +16383.5)]<br>
																												target registor	:@@ABOARH/@@ABOAGH/@@ABOABH	*/
																	SHORT	optCenterPosV[3];			/**< Optical center position and offset(vertical)<br>
																												value range		:[0 - 65535(-16384.0 - +16383.5)]<br>
																												target registor	:@@ABOARV/@@ABOAGV/@@ABOABV	*/
																	SHORT	gain[3];						/**< Gain<br>
																												value range		:[0 - 8191(-0.00000190 - +0.00000190)]<br>
																												target registor	:@@ABGAR/@@ABGAG/@@ABGAB	*/
																	SHORT	transferULimitH[3];			/**< horizontal Transfer upper limit<br>
																												value range		:[0x1800(=-8.0) - 0x0800(=+8)]<br>
																												target registor	:@@ABLRHU/@@ABLGHU/@@ABLBHU	*/
																	SHORT	transferLLimitH[3];			/**< horizontal Transfer lower limit<br>
																												value range		:[0x1800(=-8.0) - 0x0800(=+8)]<br>
																												target registor	:@@ABLRHL/@@ABLGHL/@@ABLBHL	*/
																	SHORT	transferULimitV[3];			/**< vertical Transfer upper limit<br>
																												value range		:[0x0C00(=-4.0) - 0x0400(=+4.0)]<br>
																												target registor	:@@ABLRVU/@@ABLGVU/@@ABLBVU	*/
																	SHORT	transferLLimitV[3];			/**< vertical Transfer lower limit<br>
																												value range		:[0x0C00(=-4.0) - 0x0400(=+4.0)]<br>
																												target registor	:@@ABLRVL/@@ABLGVL/@@ABLBVL	*/
																
																	SHORT	transferOffsetH[3];			/**< horizontal Transfer offset<br>
																												value range		:[0 - 4095(-8.0 - +7.99609375)]<br>
																												target registor	:@@ABOFSRH/@@ABOFSGH/@@ABOFSBH	*/
																	SHORT	transferOffsetV[3];			/**< vertical Transfer offset<br>
																												value range		:[0 - 2047(-4.0 - +3.99609375)]<br>
																												target registor	:@@ABOFSRV/@@ABOFSGV/@@ABOFSBV	*/
																	USHORT	cornerThresh1[3];				/**< corner threshold 1<br>
																												value range		:[0 - 0xFFFF(15-bit integer part,1-bit fractional part)]<br>
																												target registor	:@@ABNLTHR1/@@ABNLTHG1/@@ABNLTHB1	*/
																	SHORT	cornerGain1[3];				/**< corner gain 1<br>
																												value range		:[0 - 32767(-0.99993896484375 - +0.99993896484375)]<br>
																												target registor	:@@ABNLGAR1/@@ABNLGAG1/@@ABNLGAB1	*/
																	USHORT	cornerThresh2[3];				/**< corner threshold 2<br>
																												value range		:[0 - 0xFFFF(15-bit integer part,1-bit fractional part)]<br>
																												target registor	:@@ABNLTHR2/@@ABNLTHG2/@@ABNLTHB2	*/
																	SHORT	cornerGain2[3];				/**< corner gain 2<br>
																												value range		:[0 - 32767(-0.99993896484375 - +0.99993896484375)]<br>
																												target registor	:@@ABNLGAR2/@@ABNLGAG2/@@ABNLGAB2	*/
																	USHORT	cornerThresh3[3];				/**< corner threshold 3<br>
																												value range		:[0 - 0xFFFF(15-bit integer part,1-bit fractional part)]<br>
																												target registor	:@@ABNLTHR3/@@ABNLTHG3/@@ABNLTHB3	*/
																	SHORT	cornerGain3[3];				/**< corner gain 3<br>
																												value range		:[0 - 32767(-0.99993896484375 - +0.99993896484375)]<br>
																												target registor	:@@ABNLGAR3/@@ABNLGAG3/@@ABNLGAB3	*/
																	USHORT	cornerThresh4[3];				/**< corner threshold 4<br>
																												value range		:[0 - 0xFFFF(15-bit integer part,1-bit fractional part)]<br>
																												target registor	:@@ABNLTHR4/@@ABNLTHG4/@@ABNLTHB4	*/
																	SHORT	cornerGain4[3];				/**< corner gain 4<br>
																												value range		:[0 - 32767(-0.99993896484375 - +0.99993896484375)]<br>
																												target registor	:@@ABNLGAR4/@@ABNLGAG4/@@ABNLGAB4	*/
																} TimproCagCtrl;


	
																typedef struct {
																	ULONG	CAGMD;				/**< 2840_(9818 - 981Bh) */
																	ULONG	RBR;				/**< 2840_(981C - 981Fh) */
																	ULONG	ABOARV; 			/**< 2840_(9820 - 9823h) */
																	ULONG	ABOARH; 			/**< 2840_(9824 - 9827h) */
																	ULONG	ABOAGV; 			/**< 2840_(9828 - 982Bh) */
																	ULONG	ABOAGH; 			/**< 2840_(982C - 982Fh) */
																	ULONG	ABOABV; 			/**< 2840_(9830 - 9833h) */
																	ULONG	ABOABH; 			/**< 2840_(9834 - 9837h) */
																	ULONG	ABGAR;				/**< 2840_(9838 - 983Bh) */
																	ULONG	ABGAG;				/**< 2840_(983C - 983Fh) */
																	ULONG	ABGAB;				/**< 2840_(9840 - 9843h) */
																	ULONG	ABLRV;				/**< 2840_(9844 - 9847h) */
																	ULONG	ABLRH;				/**< 2840_(9848 - 984Bh) */
																	ULONG	ABLGV;				/**< 2840_(984C - 984Fh) */
																	ULONG	ABLGH;				/**< 2840_(9850 - 9853h) */
																	ULONG	ABLBV;				/**< 2840_(9854 - 9857h) */
																	ULONG	ABLBH;				/**< 2840_(9858 - 985Bh) */
																	ULONG	ABOFSRV;			/**< 2840_(985C - 985Fh) */
																	ULONG	ABOFSRH;			/**< 2840_(9860 - 9863h) */
																	ULONG	ABOFSGV;			/**< 2840_(9864 - 9867h) */
																	ULONG	ABOFSGH;			/**< 2840_(9868 - 986Bh) */
																	ULONG	ABOFSBV;			/**< 2840_(986C - 986Fh) */
																	ULONG	ABOFSBH;			/**< 2840_(9870 - 9873h) */
																	ULONG	ABNLTHR1;			/**< 2840_(9874 - 9877h) */
																	ULONG	ABNLTHG1;			/**< 2840_(9878 - 987Bh) */
																	ULONG	ABNLTHB1;			/**< 2840_(987C - 987Fh) */
																	ULONG	ABNLGAR1;			/**< 2840_(9880 - 9883h) */
																	ULONG	ABNLGAG1;			/**< 2840_(9884 - 9887h) */
																	ULONG	ABNLGAB1;			/**< 2840_(9888 - 988Bh) */
																	ULONG	ABNLTHR2;			/**< 2840_(988C - 988Fh) */
																	ULONG	ABNLTHG2;			/**< 2840_(9890 - 9893h) */
																	ULONG	ABNLTHB2;			/**< 2840_(9894 - 9897h) */
																	ULONG	ABNLGAR2;			/**< 2840_(9898 - 989Bh) */
																	ULONG	ABNLGAG2;			/**< 2840_(989C - 989Fh) */
																	ULONG	ABNLGAB2;			/**< 2840_(98A0 - 98A3h) */
																	ULONG	ABNLTHR3;			/**< 2840_(98A4 - 98A7h) */
																	ULONG	ABNLTHG3;			/**< 2840_(98A8 - 98ABh) */
																	ULONG	ABNLTHB3;			/**< 2840_(98AC - 98AFh) */
																	ULONG	ABNLGAR3;			/**< 2840_(98B0 - 98B3h) */
																	ULONG	ABNLGAG3;			/**< 2840_(98B4 - 98B7h) */
																	ULONG	ABNLGAB3;			/**< 2840_(98B8 - 98BBh) */
																	ULONG	ABNLTHR4;			/**< 2840_(98BC - 98BFh) */
																	ULONG	ABNLTHG4;			/**< 2840_(98C0 - 98C3h) */
																	ULONG	ABNLTHB4;			/**< 2840_(98C4 - 98C7h) */
																	ULONG	ABNLGAR4;			/**< 2840_(98C8 - 98CBh) */
																	ULONG	ABNLGAG4;			/**< 2840_(98CC - 98CFh) */
																	ULONG	ABNLGAB4;			/**< 2840_(98D0 - 98D3h) */
																	ULONG	BFGLMT; 			/**< 2840_(98D4 - 98D7h) */
																	ULONG	BFGTH;				/**< 2840_(98D8 - 98DBh) */
																} T_IM_PRO_RDMA_CAG_ADDR;
											修改成
																typedef struct {
																	ULONG	cagmd;				/**< 2840_(9818 - 981Bh) */
																	ULONG	rbr;				/**< 2840_(981C - 981Fh) */
																	ULONG	aboarv; 			/**< 2840_(9820 - 9823h) */
																	ULONG	aboarh; 			/**< 2840_(9824 - 9827h) */
																	ULONG	aboagv; 			/**< 2840_(9828 - 982Bh) */
																	ULONG	aboagh; 			/**< 2840_(982C - 982Fh) */
																	ULONG	aboabv; 			/**< 2840_(9830 - 9833h) */
																	ULONG	aboabh; 			/**< 2840_(9834 - 9837h) */
																	ULONG	abgar;				/**< 2840_(9838 - 983Bh) */
																	ULONG	abgag;				/**< 2840_(983C - 983Fh) */
																	ULONG	abgab;				/**< 2840_(9840 - 9843h) */
																	ULONG	ablrv;				/**< 2840_(9844 - 9847h) */
																	ULONG	ablrh;				/**< 2840_(9848 - 984Bh) */
																	ULONG	ablgv;				/**< 2840_(984C - 984Fh) */
																	ULONG	ablgh;				/**< 2840_(9850 - 9853h) */
																	ULONG	ablbv;				/**< 2840_(9854 - 9857h) */
																	ULONG	ablbh;				/**< 2840_(9858 - 985Bh) */
																	ULONG	abofsrv;			/**< 2840_(985C - 985Fh) */
																	ULONG	abofsrh;			/**< 2840_(9860 - 9863h) */
																	ULONG	abofsgv;			/**< 2840_(9864 - 9867h) */
																	ULONG	abofsgh;			/**< 2840_(9868 - 986Bh) */
																	ULONG	abofsbv;			/**< 2840_(986C - 986Fh) */
																	ULONG	abofsbh;			/**< 2840_(9870 - 9873h) */
																	ULONG	abnlthr1;			/**< 2840_(9874 - 9877h) */
																	ULONG	abnlthg1;			/**< 2840_(9878 - 987Bh) */
																	ULONG	abnlthb1;			/**< 2840_(987C - 987Fh) */
																	ULONG	abnlgar1;			/**< 2840_(9880 - 9883h) */
																	ULONG	abnlgag1;			/**< 2840_(9884 - 9887h) */
																	ULONG	abnlgab1;			/**< 2840_(9888 - 988Bh) */
																	ULONG	abnlthr2;			/**< 2840_(988C - 988Fh) */
																	ULONG	abnlthg2;			/**< 2840_(9890 - 9893h) */
																	ULONG	abnlthb2;			/**< 2840_(9894 - 9897h) */
																	ULONG	abnlgar2;			/**< 2840_(9898 - 989Bh) */
																	ULONG	abnlgag2;			/**< 2840_(989C - 989Fh) */
																	ULONG	abnlgab2;			/**< 2840_(98A0 - 98A3h) */
																	ULONG	abnlthr3;			/**< 2840_(98A4 - 98A7h) */
																	ULONG	abnlthg3;			/**< 2840_(98A8 - 98ABh) */
																	ULONG	abnlthb3;			/**< 2840_(98AC - 98AFh) */
																	ULONG	abnlgar3;			/**< 2840_(98B0 - 98B3h) */
																	ULONG	abnlgag3;			/**< 2840_(98B4 - 98B7h) */
																	ULONG	abnlgab3;			/**< 2840_(98B8 - 98BBh) */
																	ULONG	abnlthr4;			/**< 2840_(98BC - 98BFh) */
																	ULONG	abnlthg4;			/**< 2840_(98C0 - 98C3h) */
																	ULONG	abnlthb4;			/**< 2840_(98C4 - 98C7h) */
																	ULONG	abnlgar4;			/**< 2840_(98C8 - 98CBh) */
																	ULONG	abnlgag4;			/**< 2840_(98CC - 98CFh) */
																	ULONG	abnlgab4;			/**< 2840_(98D0 - 98D3h) */
																	ULONG	bfglmt; 			/**< 2840_(98D4 - 98D7h) */
																	ULONG	bfgth;				/**< 2840_(98D8 - 98DBh) */
																} TimproRdmaCagAddr;
	
														
							公共方法:
							
										Im_PRO_CAG_Start    修改成		impro_srocag_start
										Im_PRO_CAG_Stop  修改成	impro_srocag_stop
										Im_PRO_CAG_Ctrl    修改成		impro_srocag_ctrl
										Im_PRO_CAG_Set_PAEN  修改成	impro_srocag_set_paen					
										Im_PRO_CAG_Set_Area    修改成		impro_srocag_set_area
										Im_PRO_CAG_Opt_Center_Pos_H_Ctrl    修改成		impro_srocag_opt_center_pos_h_ctrl
										Im_PRO_CAG_Ctrl_Glv_Diff    修改成		impro_srocag_ctrl_glv_diff
										Im_PRO_Get_RdmaAddr_CAG_Cntl    修改成		impro_srocag_get_rdma_addr_cag_cntl









			(15)修改类 ImproSrodpc:
					
					
					宏定义;
					
					
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCGV_MIN			(0)			/**< Minimum setting of DPCGV	*/
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCGV_MAX			(8960)		/**< Maximum setting of DPCGV	*/
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCGH_MIN			(0)			/**< Minimum setting of DPCGH	*/
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCGVW_MIN			(10)		/**< Minimum setting of DPCGVW	*/
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCGVW_MAX			(8960)		/**< Maximum setting of DPCGVW	*/
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCGHW_MIN			(10)		/**< Minimum setting of DPCGHW	*/
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCV_MIN			(0)			/**< Minimum setting of DPCV	*/
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCV_MAX			(8950)		/**< Maximum setting of DPCV	*/
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCH_MIN			(0)			/**< Minimum setting of DPCH	*/
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCVW_MIN			(10)		/**< Minimum setting of DPCVW	*/
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCVW_MAX			(8960)		/**< Maximum setting of DPCVW	*/
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCHW_MIN			(10)		/**< Minimum setting of DPCHW	*/
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCBLW_MIN			(0)			/**< Minimum setting of DPCBLWP/M	*/
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCBLW_MAX			(15)		/**< Maximum setting of DPCBLWP/M	*/
													
													// --- REMOVE_ES_COMPILE_OPT BEGIN ---
													#ifdef CO_ES1_HARDWARE
													// --- REMOVE_ES_COMPILE_OPT END ---
													// --- REMOVE_ES1_HARDWARE BEGIN ---
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCGH_MAX			(2496)		/**< Maximum setting of DPCGH	*/
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCGHW_MAX			(2496)		/**< Maximum setting of DPCGHW	*/
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCH_MAX			(2486)		/**< Maximum setting of DPCH	*/
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCHW_MAX			(2496)		/**< Maximum setting of DPCHW	*/
													// --- REMOVE_ES1_HARDWARE END ---
													// --- REMOVE_ES_COMPILE_OPT BEGIN ---
													#endif // CO_ES1_HARDWARE
													#ifdef CO_ES3_HARDWARE
													// --- REMOVE_ES_COMPILE_OPT END ---
													// --- REMOVE_ES3_HARDWARE BEGIN ---
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCGH_MAX			(2900)		/**< Maximum setting of DPCGH	*/
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCGHW_MAX			(2900)		/**< Maximum setting of DPCGHW	*/
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCH_MAX			(2890)		/**< Maximum setting of DPCH	*/
													#define	ImproSrodpc_D_IM_PRO_DPC_DPCHW_MAX			(2900)		/**< Maximum setting of DPCHW	*/
													// --- REMOVE_ES3_HARDWARE END --
													// --- REMOVE_ES_COMPILE_OPT BEGIN ---
													#endif	// CO_ES3_HARDWARE
					
					
						枚举:
			
													typedef enum {
														E_IM_PRO_DPC_MODE_0 = 0,		/**< Defect correction mode0.	*/
														E_IM_PRO_DPC_MODE_1,			/**< Defect correction mode1.	*/
														E_IM_PRO_DPC_MODE_2,			/**< Defect correction mode2.	*/
														E_IM_PRO_DPC_MODE_3,			/**< Defect correction mode3.	*/
														E_IM_PRO_DPC_MODE_4,			/**< Defect correction mode4.	*/
														E_IM_PRO_DPC_MODE_5,			/**< Defect correction mode5.	*/
													} E_IM_PRO_DPC_MODE;
										修改成
													typedef enum {
														ImproSrodpc_E_IM_PRO_DPC_MODE_0 = 0,		/**< Defect correction mode0.	*/
														ImproSrodpc_E_IM_PRO_DPC_MODE_1,			/**< Defect correction mode1.	*/
														ImproSrodpc_E_IM_PRO_DPC_MODE_2,			/**< Defect correction mode2.	*/
														ImproSrodpc_E_IM_PRO_DPC_MODE_3,			/**< Defect correction mode3.	*/
														ImproSrodpc_E_IM_PRO_DPC_MODE_4,			/**< Defect correction mode4.	*/
														ImproSrodpc_E_IM_PRO_DPC_MODE_5,			/**< Defect correction mode5.	*/
													} EimproDpcMode;
																


													typedef enum {
														E_IM_PRO_DPC_THRE_CONV_0_DIS = 0,	/**< Dynamic defect determination threshold is not converted to zero.	*/
														E_IM_PRO_DPC_THRE_CONV_0_EN,		/**< Dynamic defect determination threshold is converted to zero.	*/
													} E_IM_PRO_DPC_THRE_CONV_TO_ZERO;
										修改成
													typedef enum {
														ImproSrodpc_E_IM_PRO_DPC_THRE_CONV_0_DIS = 0,	/**< Dynamic defect determination threshold is not converted to zero.	*/
														ImproSrodpc_E_IM_PRO_DPC_THRE_CONV_0_EN,		/**< Dynamic defect determination threshold is converted to zero.	*/
													} EimproDpcThreConvToZero;



														typedef enum {
															E_IM_PRO_DPC_DD_GRGB_UNITED = 0,				/**< GrGb united.	*/
															E_IM_PRO_DPC_DD_GRGB_INDEPENDENT,				/**< GrGb independent.	*/
														} E_IM_PRO_DPC_DD_GRGB;
										修改成
														typedef enum {
															ImproSrodpc_E_IM_PRO_DPC_DD_GRGB_UNITED = 0,				/**< GrGb united.	*/
															ImproSrodpc_E_IM_PRO_DPC_DD_GRGB_INDEPENDENT,				/**< GrGb independent.	*/
														} EimproDpcDdGrgb;

			

														typedef enum {
															E_IM_PRO_DPC_DD_MODE_G_SINGLE_DEFECT = 0,		/**< G pixel single defect support.	*/
															E_IM_PRO_DPC_DD_MODE_G_2_CONSECUTIVE_DEFECT,	/**< G pixel 2-consecutive defects support.	*/
														} E_IM_PRO_DPC_DD_MODE_G;
										修改成
														typedef enum {
															ImproSrodpc_E_IM_PRO_DPC_DD_MODE_G_SINGLE_DEFECT = 0,		/**< G pixel single defect support.	*/
															ImproSrodpc_E_IM_PRO_DPC_DD_MODE_G_2_CONSECUTIVE_DEFECT,	/**< G pixel 2-consecutive defects support.	*/
														} EimproDpcDdModeG;



													typedef enum {
														E_IM_PRO_DPC_DD_MODE_RB_SINGLE_DEFECT = 0,		/**< rr/bb pixel single defect support.	*/
														E_IM_PRO_DPC_DD_MODE_RB_2_CONSECUTIVE_DEFECT,	/**< rr/bb pixel 2-consecutive defects support.	*/
													} E_IM_PRO_DPC_DD_MODE_RB;
										修改成
														typedef enum {
															ImproSrodpc_E_IM_PRO_DPC_DD_MODE_RB_SINGLE_DEFECT = 0,		/**< rr/bb pixel single defect support.	*/
															ImproSrodpc_E_IM_PRO_DPC_DD_MODE_RB_2_CONSECUTIVE_DEFECT,	/**< rr/bb pixel 2-consecutive defects support.	*/
														} EimproDpcDdModeRb;



													typedef enum {
														E_IM_PRO_DPC_DD_USE_MDD_DIS = 0,				/**< Mis-determination degree for correction is not used.	*/
														E_IM_PRO_DPC_DD_USE_MDD_EN,						/**< Mis-determination degree for correction is used.	*/
													} E_IM_PRO_DPC_DD_USE_MDD;
										修改成
													typedef enum {
														ImproSrodpc_E_IM_PRO_DPC_DD_USE_MDD_DIS = 0,				/**< Mis-determination degree for correction is not used.	*/
														ImproSrodpc_E_IM_PRO_DPC_DD_USE_MDD_EN,						/**< Mis-determination degree for correction is used.	*/
													} EimproDpcDdUseMdd;



													typedef enum {
														E_IM_PRO_DPC_DD_MDD_2CONSECUTIVE_DEFECT_DIS = 0,/**< When mis-determination degree for correction is used, horizontal and vertical 2-consecutive defect support is not included.	*/
														E_IM_PRO_DPC_DD_MDD_2CONSECUTIVE_DEFECT_EN,		/**< When mis-determination degree for correction is used, horizontal and vertical 2-consecutive defect support is included.	*/
													} E_IM_PRO_DPC_DD_MDD_2CONSECUTIVE_DEFECT;
										修改成
												typedef enum {
													ImproSrodpc_E_IM_PRO_DPC_DD_MDD_2CONSECUTIVE_DEFECT_DIS = 0,/**< When mis-determination degree for correction is used, horizontal and vertical 2-consecutive defect support is not included.	*/
													ImproSrodpc_E_IM_PRO_DPC_DD_MDD_2CONSECUTIVE_DEFECT_EN,		/**< When mis-determination degree for correction is used, horizontal and vertical 2-consecutive defect support is included.	*/
												} EimproDpcDdMdd2consecutiveDefect;


												typedef enum {
													E_IM_PRO_DPC_ESD_MODE_0 = 0,		/**< Edge storage defect correction mode0.	*/
													E_IM_PRO_DPC_ESD_MODE_1,			/**< Edge storage defect correction mode1.	*/
													E_IM_PRO_DPC_ESD_MODE_2,			/**< Edge storage defect correction mode2.	*/
													E_IM_PRO_DPC_ESD_MODE_3,			/**< Edge storage defect correction mode3.	*/
												} E_IM_PRO_DPC_ESD_MODE;
										修改成
												typedef enum {
													ImproSrodpc_E_IM_PRO_DPC_ESD_MODE_0 = 0,		/**< Edge storage defect correction mode0.	*/
													ImproSrodpc_E_IM_PRO_DPC_ESD_MODE_1,			/**< Edge storage defect correction mode1.	*/
													ImproSrodpc_E_IM_PRO_DPC_ESD_MODE_2,			/**< Edge storage defect correction mode2.	*/
													ImproSrodpc_E_IM_PRO_DPC_ESD_MODE_3,			/**< Edge storage defect correction mode3.	*/
												} EimproDpcEsdMode;
	



												typedef enum {
													E_IM_PRO_DPC_ESD_USE_RB_JUDGE_DIS = 0,				/**< G pixel is not used in RB judgment of edge storage defect correction.	*/
													E_IM_PRO_DPC_ESD_USE_RB_JUDGE_EN,					/**< G pixel is used in RB judgment of edge storage defect correction.	*/
												} E_IM_PRO_DPC_ESD_USE_RB_JUDGE;
										修改成
												typedef enum {
													ImproSrodpc_E_IM_PRO_DPC_ESD_USE_RB_JUDGE_DIS = 0,				/**< G pixel is not used in RB judgment of edge storage defect correction.	*/
													ImproSrodpc_E_IM_PRO_DPC_ESD_USE_RB_JUDGE_EN,					/**< G pixel is used in RB judgment of edge storage defect correction.	*/
												} EimproDpcEsdUseRbJudge;



												typedef enum {
													E_IM_PRO_DPC_ESD_USE_OCD_DIS = 0,					/**< Over-correction degree for correction is not used in edge storage defect correction.	*/
													E_IM_PRO_DPC_ESD_USE_OCD_EN,						/**< Over-correction degree for correction is used in edge storage defect correction.	*/
												} E_IM_PRO_DPC_ESD_USE_OCD;
										修改成
												typedef enum {
													ImproSrodpc_E_IM_PRO_DPC_ESD_USE_OCD_DIS = 0,					/**< Over-correction degree for correction is not used in edge storage defect correction.	*/
													ImproSrodpc_E_IM_PRO_DPC_ESD_USE_OCD_EN,						/**< Over-correction degree for correction is used in edge storage defect correction.	*/
												} EimproDpcEsdUseOcd;



													typedef enum {
														E_IM_PRO_DPC_MDC_USE_OCD_DIS = 0,				/**< Over-correction degree for correction is not used in pixel value magnitude defect correction.	*/
														E_IM_PRO_DPC_MDC_USE_OCD_EN,					/**< Over-correction degree for correction is used in pixel value magnitude defect correction.	*/
													} E_IM_PRO_DPC_MDC_USE_OCD;
										修改成
												typedef enum {
													ImproSrodpc_E_IM_PRO_DPC_MDC_USE_OCD_DIS = 0,				/**< Over-correction degree for correction is not used in pixel value magnitude defect correction.	*/
													ImproSrodpc_E_IM_PRO_DPC_MDC_USE_OCD_EN,					/**< Over-correction degree for correction is used in pixel value magnitude defect correction.	*/
												} EimproDpcMdcUseOcd;



							
							结构体:
							
															typedef struct {
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#ifdef CO_ES1_HARDWARE
															// --- REMOVE_ES_COMPILE_OPT END ---
															// --- REMOVE_ES1_HARDWARE BEGIN ---
																USHORT	gPosX;		/**< global Compensation horizontal direction start position<br>
																							value range		:[0 - 2496]<br>
																							target registor	:@@DPCGH	*/
																USHORT	gPosY;		/**< global Compensation vertical direction start position<br>
																							value range		:[0 - 8960] 2pixel boundary<br>
																							target registor	:@@DPCGV	*/
																USHORT	gWidth;		/**< global horizontal size<br>
																							value range		:[10 - 2496] 2byte boundary<br>
																							target registor	:@@DPCGHW	*/
																USHORT	gLines;		/**< global vertical size<br>
																							value range		:[10 - 8960] 2pixel boundary<br>
																							target registor	:@@DPCGVW	*/
																USHORT	posX;			/**< Compensation horizontal direction start position<br>
																							value range		:[0 - 2486] 2pixel boundary<br>
																							target registor	:@@DPCH		*/
																USHORT	posY;			/**< Compensation vertical direction start position<br>
																							value range		:[0 - 8950] 2pixel boundary<br>
																							target registor	:@@DPCV		*/
																USHORT	width;			/**< horizontal size<br>
																							value range		:[10 - 2496] 2byte boundary<br>
																							target registor	:@@DPCHW	*/
																USHORT	lines;			/**< vertical size<br>
																							value range		:[10 - 8960] 2pixel boundary<br>
																							target registor	:@@DPCVW	*/
															// --- REMOVE_ES1_HARDWARE END ---
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#endif // CO_ES1_HARDWARE
															
															#ifdef CO_ES3_HARDWARE
														// --- REMOVE_ES_COMPILE_OPT END ---
														// --- REMOVE_ES3_HARDWARE BEGIN ---
															USHORT	gPosX;		/**< global Compensation horizontal direction start position<br>
																						value range		:[0 - 2900]<br>
																						target registor	:@@DPCGH	*/
															USHORT	gPosY;		/**< global Compensation vertical direction start position<br>
																						value range		:[0 - 8960] 2pixel boundary<br>
																						target registor	:@@DPCGV	*/
															USHORT	gWidth;		/**< global horizontal size<br>
																						value range		:[10 - 2900] 2byte boundary<br>
																						target registor	:@@DPCGHW	*/
															USHORT	gLines;		/**< global vertical size<br>
																						value range		:[10 - 8960] 2pixel boundary<br>
																						target registor	:@@DPCGVW	*/
															USHORT	posX;			/**< Compensation horizontal direction start position<br>
																						value range		:[0 - 2890] 2pixel boundary<br>
																						target registor	:@@DPCH		*/
															USHORT	posY;			/**< Compensation vertical direction start position<br>
																						value range		:[0 - 8950] 2pixel boundary<br>
																						target registor	:@@DPCV		*/
															USHORT	width;			/**< horizontal size<br>
																						value range		:[10 - 2900] 2byte boundary<br>
																						target registor	:@@DPCHW	*/
															USHORT	lines;			/**< vertical size<br>
																						value range		:[10 - 8960] 2pixel boundary<br>
																						target registor	:@@DPCVW	*/
														// --- REMOVE_ES3_HARDWARE END --
														// --- REMOVE_ES_COMPILE_OPT BEGIN ---
														#endif	// CO_ES3_HARDWARE
														// --- REMOVE_ES_COMPILE_OPT END ---
														} T_IM_PRO_DPC_AREA;
											修改成
																	typedef struct {
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#ifdef CO_ES1_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES1_HARDWARE BEGIN ---
																		USHORT	gPosX;		/**< global Compensation horizontal direction start position<br>
																									value range		:[0 - 2496]<br>
																									target registor	:@@DPCGH	*/
																		USHORT	gPosY;		/**< global Compensation vertical direction start position<br>
																									value range		:[0 - 8960] 2pixel boundary<br>
																									target registor	:@@DPCGV	*/
																		USHORT	gWidth;		/**< global horizontal size<br>
																									value range		:[10 - 2496] 2byte boundary<br>
																									target registor	:@@DPCGHW	*/
																		USHORT	gLines;		/**< global vertical size<br>
																									value range		:[10 - 8960] 2pixel boundary<br>
																									target registor	:@@DPCGVW	*/
																		USHORT	posX;			/**< Compensation horizontal direction start position<br>
																									value range		:[0 - 2486] 2pixel boundary<br>
																									target registor	:@@DPCH		*/
																		USHORT	posY;			/**< Compensation vertical direction start position<br>
																									value range		:[0 - 8950] 2pixel boundary<br>
																									target registor	:@@DPCV		*/
																		USHORT	width;			/**< horizontal size<br>
																									value range		:[10 - 2496] 2byte boundary<br>
																									target registor	:@@DPCHW	*/
																		USHORT	lines;			/**< vertical size<br>
																									value range		:[10 - 8960] 2pixel boundary<br>
																									target registor	:@@DPCVW	*/
																	// --- REMOVE_ES1_HARDWARE END ---
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif // CO_ES1_HARDWARE
																	
																	#ifdef CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES3_HARDWARE BEGIN ---
																		USHORT	gPosX;		/**< global Compensation horizontal direction start position<br>
																									value range		:[0 - 2900]<br>
																									target registor	:@@DPCGH	*/
																		USHORT	gPosY;		/**< global Compensation vertical direction start position<br>
																									value range		:[0 - 8960] 2pixel boundary<br>
																									target registor	:@@DPCGV	*/
																		USHORT	gWidth;		/**< global horizontal size<br>
																									value range		:[10 - 2900] 2byte boundary<br>
																									target registor	:@@DPCGHW	*/
																		USHORT	gLines;		/**< global vertical size<br>
																									value range		:[10 - 8960] 2pixel boundary<br>
																									target registor	:@@DPCGVW	*/
																		USHORT	posX;			/**< Compensation horizontal direction start position<br>
																									value range		:[0 - 2890] 2pixel boundary<br>
																									target registor	:@@DPCH		*/
																		USHORT	posY;			/**< Compensation vertical direction start position<br>
																									value range		:[0 - 8950] 2pixel boundary<br>
																									target registor	:@@DPCV		*/
																		USHORT	width;			/**< horizontal size<br>
																									value range		:[10 - 2900] 2byte boundary<br>
																									target registor	:@@DPCHW	*/
																		USHORT	lines;			/**< vertical size<br>
																									value range		:[10 - 8960] 2pixel boundary<br>
																									target registor	:@@DPCVW	*/
																	// --- REMOVE_ES3_HARDWARE END --
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif	// CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	} TimproDpcArea;
																										



															typedef struct {
																EimproDpcMode					dpc_mode;							/**< Defect correction mode.<br>
																																			target registor	:@@DPCMD */
																EimproDpcThreConvToZero		thre_conv_0;						/**< Dynamic defect determination threshold zero conversion for registration defective pixel.<br>
																																			target registor	:@@DPCRTZ */
															} T_IM_PRO_DPC_CTRL;
											修改成
														typedef struct {
															EimproDpcMode					dpcMode;							/**< Defect correction mode.<br>
																																		target registor	:@@DPCMD */
															EimproDpcThreConvToZero		threConv0;						/**< Dynamic defect determination threshold zero conversion for registration defective pixel.<br>
																																		target registor	:@@DPCRTZ */
														} TimproDpcCtrl;
							


																typedef struct {
																	UCHAR								alpha_blend_transition_width_p;		/**< alpha blend transition width (plus side)<br>
																																				value range		:[0 - 15]<br>
																																				target registor	:@@DPCBLWP */
																	USHORT								alpha_blend_start_pos_p;			/**< alpha blend start position (plus side)<br>
																																				value range		:[0 - 16383]<br>
																																				target registor	:@@DPCBLSP */
																	UCHAR								alpha_blend_transition_width_m;		/**< alpha blend transition width (minus side)<br>
																																				value range		:[0 - 15]<br>
																																				target registor	:@@DPCBLWM */
																	USHORT								alpha_blend_start_pos_m;			/**< alpha blend transition position (minus side)<br>
																																				value range		:[0 - 16383]<br>
																																				target registor	:@@DPCBLSM */
																} T_IM_PRO_DPC_AB_CTRL;
											修改成
																typedef struct {
																	UCHAR								alphaBlendTransitionWidthP;		/**< alpha blend transition width (plus side)<br>
																																				value range		:[0 - 15]<br>
																																				target registor	:@@DPCBLWP */
																	USHORT								alphaBlendStartPosP;			/**< alpha blend start position (plus side)<br>
																																				value range		:[0 - 16383]<br>
																																				target registor	:@@DPCBLSP */
																	UCHAR								alphaBlendTransitionWidthM;		/**< alpha blend transition width (minus side)<br>
																																				value range		:[0 - 15]<br>
																																				target registor	:@@DPCBLWM */
																	USHORT								alphaBlendStartPosM;			/**< alpha blend transition position (minus side)<br>
																																				value range		:[0 - 16383]<br>
																																				target registor	:@@DPCBLSM */
																} TimproDpcAbCtrl;


	
																	typedef struct {
																		EimproDpcDdGrgb						grgb_independent_setting;				/**< reference mode of gr/gb pixel in the defect dynamic detection and pixel value magnitude defect correction.<br>
																																								target registor	:@@DFGRGB */
																		EimproDpcDdModeG						g_mode;									/**< dynamic detection mode of G pixel in the defect dynamic detection.<br>
																																								target registor	:@@DFMDG */
																		EimproDpcDdModeRb						rb_mode;								/**< dynamic detection mode of rr/bb pixel in the defect dynamic detection.<br>
																																								target registor	:@@DFMDRB */
																		UCHAR										upper_limit_Local_registration;			/**< limit value of the registration defective pixel existing in the surrounding of the focus pixel in the defect dynamic detection.<br>
																																								value range		:[0 - 6]<br>
																																								target registor	:@@DFDCNT */
																		EimproDpcDdUseMdd						use_mdd;								/**< Use of mis-determination degree for correction.<br>
																																								target registor	:@@DFRBUG */
																		EimproDpcDdMdd2consecutiveDefect		support_2concecutive_defect;			/**< Mis-determination degree for correction  horizontal and vertical 2-concecutive defect support.<br>
																																								target registor	:@@DFAGND */
																		USHORT										p_threshold_start_pos[3];				/**< value of the start position related to the dynamic defect determination threshold for each rr/G/bb pixel at the plus side.<br>
																																								value range		:[0 - 16383]<br>
																																								target registor	:@@DFSRP/GP/BP */
																		USHORT										m_threshold_start_pos[3];				/**< value of the start position related to the dynamic defect determination threshold for each rr/G/bb pixel at the minus side.<br>
																																								value range		:[0 - 16383]<br>
																																								target registor	:@@DFSRM/GM/BM */
																		USHORT										p_threshold_start_offset[3];			/**< offset value related to the dynamic defect determination threshold for each rr/G/bb pixel at the plus side.<br>
																																								value range		:[0 - 16383]<br>
																																								target registor	:@@DFORP/GP/BP */
																		USHORT										m_threshold_start_offset[3];			/**< offset value related to the dynamic defect determination threshold for each rr/G/bb pixel at the minus side.<br>
																																								value range		:[0 - 16383]<br>
																																								target registor	:@@DFORM/GM/BM */
																		UCHAR										p_threshold_gain[3];					/**< gain value related to the dynamic defect determination threshold for each rr/G/bb pixel at the plus side.<br>
																																								value range		:[0 - 63(=3.9375)]<br>
																																								target registor	:@@DFKRP/GP/BP */
																		UCHAR										m_threshold_gain[3];					/**< gain value related to the dynamic defect determination threshold for each rr/G/bb pixel at the minus side.<br>
																																								value range		:[0 - 63(=3.9375)]<br>
																																								target registor	:@@DFKRM/GM/BM */
																		USHORT										p_threshold_upper_limit[3];				/**< upper limit value of the dynamic defect determination threshold for each rr/G/bb pixel at the plus side.<br>
																																								value range		:[0 - 16383]<br>
																																								target registor	:@@DFHRP/GP/BP */
																		USHORT										m_threshold_upper_limit[3];				/**< upper limit value of the dynamic defect determination threshold for each rr/G/bb pixel at the minus side.<br>
																																								value range		:[0 - 16383]<br>
																																								target registor	:@@DFHRM/GM/BM */
																	
																		UCHAR										p_threshold_2consecutive;				/**<  plus side setting value of the threshold used to determine the 2-consecutive defect pixels.<br>
																																								value range		:[0 - 63]<br>
																																								target registor	:@@DFCSRP */
																		UCHAR										m_threshold_2consecutive;				/**< minus side setting value of the threshold used to determine the 2-consecutive defect pixels.<br>
																																								value range		:[0 - 63]<br>
																																								target registor	:@@DFCSRM */
																		USHORT										threshold_2consecutive_bright_pix[3];	/**< setting values of the threshold used to determine the 2-consecutive bright spot pixels.<br>
																																								value range		:[0 - 4095]<br>
																																								target registor	:@@DFLSTHR/G/bb */
																	} T_IM_PRO_DPC_DDD_CTRL;
											修改成
															typedef struct {
																	EimproDpcDdGrgb						grgbIndependentSetting;				/**< reference mode of gr/gb pixel in the defect dynamic detection and pixel value magnitude defect correction.<br>
																																							target registor	:@@DFGRGB */
																	EimproDpcDdModeG						gMode;									/**< dynamic detection mode of G pixel in the defect dynamic detection.<br>
																																							target registor	:@@DFMDG */
																	EimproDpcDdModeRb						rbMode;								/**< dynamic detection mode of rr/bb pixel in the defect dynamic detection.<br>
																																							target registor	:@@DFMDRB */
																	UCHAR										upperLimitLocalRegistration;			/**< limit value of the registration defective pixel existing in the surrounding of the focus pixel in the defect dynamic detection.<br>
																																							value range		:[0 - 6]<br>
																																							target registor	:@@DFDCNT */
																	EimproDpcDdUseMdd						useMdd;								/**< Use of mis-determination degree for correction.<br>
																																							target registor	:@@DFRBUG */
																	EimproDpcDdMdd2consecutiveDefect		support2concecutiveDefect;			/**< Mis-determination degree for correction  horizontal and vertical 2-concecutive defect support.<br>
																																							target registor	:@@DFAGND */
																	USHORT										pThresholdStartPos[3];				/**< value of the start position related to the dynamic defect determination threshold for each rr/G/bb pixel at the plus side.<br>
																																							value range		:[0 - 16383]<br>
																																							target registor	:@@DFSRP/GP/BP */
																	USHORT										mThresholdStartPos[3];				/**< value of the start position related to the dynamic defect determination threshold for each rr/G/bb pixel at the minus side.<br>
																																							value range		:[0 - 16383]<br>
																																							target registor	:@@DFSRM/GM/BM */
																	USHORT										pThresholdStartOffset[3];			/**< offset value related to the dynamic defect determination threshold for each rr/G/bb pixel at the plus side.<br>
																																							value range		:[0 - 16383]<br>
																																							target registor	:@@DFORP/GP/BP */
																	USHORT										mThresholdStartOffset[3];			/**< offset value related to the dynamic defect determination threshold for each rr/G/bb pixel at the minus side.<br>
																																							value range		:[0 - 16383]<br>
																																							target registor	:@@DFORM/GM/BM */
																	UCHAR										pThresholdGain[3];					/**< gain value related to the dynamic defect determination threshold for each rr/G/bb pixel at the plus side.<br>
																																							value range		:[0 - 63(=3.9375)]<br>
																																							target registor	:@@DFKRP/GP/BP */
																	UCHAR										mThresholdGain[3];					/**< gain value related to the dynamic defect determination threshold for each rr/G/bb pixel at the minus side.<br>
																																							value range		:[0 - 63(=3.9375)]<br>
																																							target registor	:@@DFKRM/GM/BM */
																	USHORT										pThresholdUpperLimit[3];				/**< upper limit value of the dynamic defect determination threshold for each rr/G/bb pixel at the plus side.<br>
																																							value range		:[0 - 16383]<br>
																																							target registor	:@@DFHRP/GP/BP */
																	USHORT										mThresholdUpperLimit[3];				/**< upper limit value of the dynamic defect determination threshold for each rr/G/bb pixel at the minus side.<br>
																																							value range		:[0 - 16383]<br>
																																							target registor	:@@DFHRM/GM/BM */
																
																	UCHAR										pthreshold2consecutive;				/**<  plus side setting value of the threshold used to determine the 2-consecutive defect pixels.<br>
																																							value range		:[0 - 63]<br>
																																							target registor	:@@DFCSRP */
																	UCHAR										mthreshold2consecutive;				/**< minus side setting value of the threshold used to determine the 2-consecutive defect pixels.<br>
																																							value range		:[0 - 63]<br>
																																							target registor	:@@DFCSRM */
																	USHORT										threshold2consecutiveBrightPix[3];	/**< setting values of the threshold used to determine the 2-consecutive bright spot pixels.<br>
																																							value range		:[0 - 4095]<br>
																																							target registor	:@@DFLSTHR/G/bb */
																} TimproDpcDddCtrl;
	


																		typedef struct {
																			UCHAR										p_mdd_effect;							/**< parameter of the plus side related to the calculation of mis-determination degree effect for correction.<br>
																																									value range		:[0 - 7]<br>
																																									target registor	:@@DFAGEFP */
																			UCHAR										m_mdd_effect;							/**< parameter of the minus side related to the calculation of mis-determination degree effect for correction.<br>
																																									value range		:[0 - 7]<br>
																																									target registor	:@@DFAGEFM */
																			UCHAR										p_mdd_effect2;							/**< parameter of the plus side related to the calculation of mis-determination degree effect2 for correction.<br>
																																									value range		:[0 - 3]<br>
																																									target registor	:@@DFAGEFP2 */
																			UCHAR										m_mdd_effect2;							/**< parameter of the minus side related to the calculation of mis-determination degree effect2 for correction.<br>
																																									value range		:[0 - 3]<br>
																																									target registor	:@@DFAGEFM2 */
																			USHORT										p_threshold_offset;						/**< offset value of the plus side related to the mis-determination degree threshold for correction.<br>
																																									value range		:[0 - 1023]<br>
																																									target registor	:@@DFAGTHP */
																			USHORT										m_threshold_offset;						/**< offset value of the minus side related to the mis-determination degree threshold for correction.<br>
																																									value range		:[0 - 1023]<br>
																																									target registor	:@@DFAGTHM */
																			UCHAR										pThresholdGain;						/**< gain value of the plus side related to the mis-determination degree threshold for correction.<br>
																																									value range		:[0 - 63(=0.984375)]<br>
																																									target registor	:@@DFAGTHKP */
																			UCHAR										mThresholdGain;						/**< gain value of the minus side related to the mis-determination degree threshold for correction.<br>
																																									value range		:[0 - 63(=0.984375)]<br>
																																									target registor	:@@DFAGTHKM */
																		} T_IM_PRO_DPC_MDD_CTRL;
											修改成
																		typedef struct {
																			UCHAR										pMddEffect;							/**< parameter of the plus side related to the calculation of mis-determination degree effect for correction.<br>
																																									value range		:[0 - 7]<br>
																																									target registor	:@@DFAGEFP */
																			UCHAR										mMddEffect;							/**< parameter of the minus side related to the calculation of mis-determination degree effect for correction.<br>
																																									value range		:[0 - 7]<br>
																																									target registor	:@@DFAGEFM */
																			UCHAR										pMddEffect2;							/**< parameter of the plus side related to the calculation of mis-determination degree effect2 for correction.<br>
																																									value range		:[0 - 3]<br>
																																									target registor	:@@DFAGEFP2 */
																			UCHAR										mMddEffect2;							/**< parameter of the minus side related to the calculation of mis-determination degree effect2 for correction.<br>
																																									value range		:[0 - 3]<br>
																																									target registor	:@@DFAGEFM2 */
																			USHORT										pThresholdOffset;						/**< offset value of the plus side related to the mis-determination degree threshold for correction.<br>
																																									value range		:[0 - 1023]<br>
																																									target registor	:@@DFAGTHP */
																			USHORT										mThresholdOffset;						/**< offset value of the minus side related to the mis-determination degree threshold for correction.<br>
																																									value range		:[0 - 1023]<br>
																																									target registor	:@@DFAGTHM */
																			UCHAR										pThresholdGain;						/**< gain value of the plus side related to the mis-determination degree threshold for correction.<br>
																																									value range		:[0 - 63(=0.984375)]<br>
																																									target registor	:@@DFAGTHKP */
																			UCHAR										mThresholdGain;						/**< gain value of the minus side related to the mis-determination degree threshold for correction.<br>
																																									value range		:[0 - 63(=0.984375)]<br>
																																									target registor	:@@DFAGTHKM */
																		} TimproDpcMddCtrl;
	


																	typedef struct {
																		EimproDpcEsdMode						esd_mode;								/**< reference mode of gr/gb pixel in the edge storage defect correction.<br>
																																								target registor	:@@DEGRGB */
																		EimproDpcEsdUseRbJudge				use_rb_jdge;							/**< Use of G pixel in RB judgment of edge storage defect correction.<br>
																																								target registor	:@@DERBUG */
																		EimproDpcEsdUseOcd					use_ocd;								/**< Use of G pixel in RB judgment of edge storage defect correction.<br>
																																								target registor	:@@DEGUG */
																		USHORT										threshold_start_pos;					/**< start position related to the noise determination threshold of the edge storage defect correction.<br>
																																								value range		:[0 - 16383]<br>
																																								target registor	:@@DENSS */
																		USHORT										threshold_offset;						/**< offset related to the noise determination threshold of the edge storage defect correction.<br>
																																								value range		:[0 - 16383]<br>
																																								target registor	:@@DENSO */
																		UCHAR										threshold_gain;							/**< gain related to the noise determination threshold of the edge storage defect correction.<br>
																																								value range		:[0 - 255(=3.984375)]<br>
																																								target registor	:@@DENSK */
																		USHORT										threshold_upper_limit;					/**< upper limit value related to the noise determination threshold of the edge storage defect correction.<br>
																																								value range		:[0 - 16383]<br>
																																								target registor	:@@DENSH */
																		UCHAR										noise_tolerance;						/**< value related to the noise tolerance of the edge storage defect correction.<br>
																																								value range		:[1 - 5]<br>
																																								target registor	:@@DENSMGN */
																		USHORT										threshold_calculation;					/**< threshold used to calculate the correction value in the edge storage defect correction.<br>
																																								value range		:[0 - 16383]<br>
																																								target registor	:@@DENDCTH */
																		UCHAR										p_correction_level_on_ocd;				/**< correction level (the degree to soften the correction) based on the over-correction degree(plus side) for correction in the edge storage defect correction.<br>
																																								value range		:[0 - 63(=3.9375)]<br>
																																								target registor	:@@DEAGKP */
																		UCHAR										m_correction_level_on_ocd;				/**< correction level (the degree to soften the correction) based on the over-correction degree(minus side) for correction in the edge storage defect correction.<br>
																																								value range		:[0 - 63(=3.9375)]<br>
																																								target registor	:@@DEAGKM */
																	} T_IM_PRO_DPC_ESDC_CTRL;
											修改成
																typedef struct {
																	EimproDpcEsdMode						esdMode;								/**< reference mode of gr/gb pixel in the edge storage defect correction.<br>
																																							target registor	:@@DEGRGB */
																	EimproDpcEsdUseRbJudge				useRbJdge;							/**< Use of G pixel in RB judgment of edge storage defect correction.<br>
																																							target registor	:@@DERBUG */
																	EimproDpcEsdUseOcd					useOcd;								/**< Use of G pixel in RB judgment of edge storage defect correction.<br>
																																							target registor	:@@DEGUG */
																	USHORT										thresholdStartPos;					/**< start position related to the noise determination threshold of the edge storage defect correction.<br>
																																							value range		:[0 - 16383]<br>
																																							target registor	:@@DENSS */
																	USHORT										thresholdOffset;						/**< offset related to the noise determination threshold of the edge storage defect correction.<br>
																																							value range		:[0 - 16383]<br>
																																							target registor	:@@DENSO */
																	UCHAR										thresholdGain;							/**< gain related to the noise determination threshold of the edge storage defect correction.<br>
																																							value range		:[0 - 255(=3.984375)]<br>
																																							target registor	:@@DENSK */
																	USHORT										thresholdUpperLimit;					/**< upper limit value related to the noise determination threshold of the edge storage defect correction.<br>
																																							value range		:[0 - 16383]<br>
																																							target registor	:@@DENSH */
																	UCHAR										noiseTolerance;						/**< value related to the noise tolerance of the edge storage defect correction.<br>
																																							value range		:[1 - 5]<br>
																																							target registor	:@@DENSMGN */
																	USHORT										thresholdCalculation;					/**< threshold used to calculate the correction value in the edge storage defect correction.<br>
																																							value range		:[0 - 16383]<br>
																																							target registor	:@@DENDCTH */
																	UCHAR										pCorrectionLevelOnOcd;				/**< correction level (the degree to soften the correction) based on the over-correction degree(plus side) for correction in the edge storage defect correction.<br>
																																							value range		:[0 - 63(=3.9375)]<br>
																																							target registor	:@@DEAGKP */
																	UCHAR										mCorrectionLevelOnOcd;				/**< correction level (the degree to soften the correction) based on the over-correction degree(minus side) for correction in the edge storage defect correction.<br>
																																							value range		:[0 - 63(=3.9375)]<br>
																																							target registor	:@@DEAGKM */
																} TimproDpcEsdcCtrl;




															typedef struct {
																UCHAR										p_ocd_effect;							/**< parameters related to the calculation of over-correction degree(plus side) for correction.<br>They are used both in the pixel value magnitude defect correction and the edge storage defect correction.<br>
																																						value range		:[0 - 7]<br>
																																						target registor	:@@DCAGEFP */
																UCHAR										m_ocd_effect;							/**< parameters related to the calculation of over-correction degree(minus side) for correction.<br>They are used both in the pixel value magnitude defect correction and the edge storage defect correction.<br>
																																						value range		:[0 - 7]<br>
																																						target registor	:@@DCAGEFM */
																USHORT										p_threshold;							/**< threshold for over-correction degree(plus side) for correction. They are used both in the pixel value magnitude defect correction and the edge storage defect correction.<br>
																																						value range		:[0 - 16383]<br>
																																						target registor	:@@DCAGTHP */
																USHORT										m_threshold;							/**< threshold for over-correction degree(minus side) for correction. They are used both in the pixel value magnitude defect correction and the edge storage defect correction.<br>
																																						value range		:[0 - 16383]<br>
																																						target registor	:@@DCAGTHM */
															} T_IM_PRO_DPC_OCD_CTRL;
											修改成
															typedef struct {
																UCHAR										pOcdEffect;							/**< parameters related to the calculation of over-correction degree(plus side) for correction.<br>They are used both in the pixel value magnitude defect correction and the edge storage defect correction.<br>
																																						value range		:[0 - 7]<br>
																																						target registor	:@@DCAGEFP */
																UCHAR										mOcdEffect;							/**< parameters related to the calculation of over-correction degree(minus side) for correction.<br>They are used both in the pixel value magnitude defect correction and the edge storage defect correction.<br>
																																						value range		:[0 - 7]<br>
																																						target registor	:@@DCAGEFM */
																USHORT										pThreshold;							/**< threshold for over-correction degree(plus side) for correction. They are used both in the pixel value magnitude defect correction and the edge storage defect correction.<br>
																																						value range		:[0 - 16383]<br>
																																						target registor	:@@DCAGTHP */
																USHORT										mThreshold;							/**< threshold for over-correction degree(minus side) for correction. They are used both in the pixel value magnitude defect correction and the edge storage defect correction.<br>
																																						value range		:[0 - 16383]<br>
																																						target registor	:@@DCAGTHM */
															} TimproDpcOcdCtrl;



															typedef struct {
																EimproDpcMdcUseOcd					useOcd;								/**< Use of over-correction degree for pixel value magnitude defect correction.<br>
																																						target registor	:@@DMGUG */
																USHORT										p_manual_adj_val_single;				/**< amount to soften the correction in single defective pixel correction of pixel value(plus side) magnitude defect correction.<br>
																																						value range		:[0 - 1023]<br>
																																						target registor	:@@DMWKSP */
																USHORT										m_manual_adj_val_single;				/**< amount to soften the correction in single defective pixel correction of pixel value(minus side) magnitude defect correction.<br>
																																						value range		:[0 - 1023]<br>
																																						target registor	:@@DMWKSM */
																USHORT										p_manual_adj_val_2consecutive;			/**< amount to soften the correction in 2-concecutive defective pixel correction of pixel value(plus side) magnitude defect correction.<br>
																																						value range		:[0 - 1023]<br>
																																						target registor	:@@DMWKDP */
																USHORT										m_manual_adj_val_2consecutive;			/**< amount to soften the correction in 2-concecutive defective pixel correction of pixel value(minus side) magnitude defect correction.<br>
																																						value range		:[0 - 1023]<br>
																																						target registor	:@@DMWKDM */
																UCHAR										pCorrectionLevelOnOcd;				/**< correction level (the degree to soften the correction) based on the over-correction degree for correction in the pixel value(plus side) magnitude defect correction.<br>
																																						value range		:[0 - 63(=3.9375)]<br>
																																						target registor	:@@DMAGKP */
																UCHAR										mCorrectionLevelOnOcd;				/**< correction level (the degree to soften the correction) based on the over-correction degree for correction in the pixel value(minus side) magnitude defect correction.<br>
																																						value range		:[0 - 63(=3.9375)]<br>
																																						target registor	:@@DMAGKM */
															} T_IM_PRO_DPC_MDC_CTRL;
											修改成
														typedef struct {
															EimproDpcMdcUseOcd					useOcd;								/**< Use of over-correction degree for pixel value magnitude defect correction.<br>
																																					target registor	:@@DMGUG */
															USHORT										pManualAdjValSingle;				/**< amount to soften the correction in single defective pixel correction of pixel value(plus side) magnitude defect correction.<br>
																																					value range		:[0 - 1023]<br>
																																					target registor	:@@DMWKSP */
															USHORT										mManualAdjValSingle;				/**< amount to soften the correction in single defective pixel correction of pixel value(minus side) magnitude defect correction.<br>
																																					value range		:[0 - 1023]<br>
																																					target registor	:@@DMWKSM */
															USHORT										pManualAdjVal2consecutive;			/**< amount to soften the correction in 2-concecutive defective pixel correction of pixel value(plus side) magnitude defect correction.<br>
																																					value range		:[0 - 1023]<br>
																																					target registor	:@@DMWKDP */
															USHORT										mManualAdjVal2consecutive;			/**< amount to soften the correction in 2-concecutive defective pixel correction of pixel value(minus side) magnitude defect correction.<br>
																																					value range		:[0 - 1023]<br>
																																					target registor	:@@DMWKDM */
															UCHAR										pCorrectionLevelOnOcd;				/**< correction level (the degree to soften the correction) based on the over-correction degree for correction in the pixel value(plus side) magnitude defect correction.<br>
																																					value range		:[0 - 63(=3.9375)]<br>
																																					target registor	:@@DMAGKP */
															UCHAR										mCorrectionLevelOnOcd;				/**< correction level (the degree to soften the correction) based on the over-correction degree for correction in the pixel value(minus side) magnitude defect correction.<br>
																																					value range		:[0 - 63(=3.9375)]<br>
																																					target registor	:@@DMAGKM */
														} TimproDpcMdcCtrl;



															typedef struct {
																ULONG	DPCMD;				/**< 2840_(9118 - 911Bh) */
																ULONG	DPCBLP; 			/**< 2840_(911C - 911Fh) */
																ULONG	DPCBLM; 			/**< 2840_(9120 - 9123h) */
																ULONG	DFCTL;				/**< 2840_(9124 - 9127h) */
																ULONG	DFS1;				/**< 2840_(9130 - 9133h) */
																ULONG	DFS2;				/**< 2840_(9134 - 9137h) */
																ULONG	DFS3;				/**< 2840_(9138 - 913Bh) */
																ULONG	DFO1;				/**< 2840_(9140 - 9143h) */
																ULONG	DFO2;				/**< 2840_(9144 - 9147h) */
																ULONG	DFO3;				/**< 2840_(9148 - 914Bh) */
																ULONG	DFK1;				/**< 2840_(9150 - 9153h) */
																ULONG	DFK2;				/**< 2840_(9154 - 9157h) */
																ULONG	DFK3;				/**< 2840_(9158 - 915Bh) */
																ULONG	DFH1;				/**< 2840_(9160 - 9163h) */
																ULONG	DFH2;				/**< 2840_(9164 - 9167h) */
																ULONG	DFH3;				/**< 2840_(9168 - 916Bh) */
																ULONG	DFCSR;				/**< 2840_(9170 - 9173h) */
																ULONG	DFLSTH1; 			/**< 2840_(9178 - 917Bh) */
																ULONG	DFLSTH2; 			/**< 2840_(917C - 917Fh) */
																ULONG	DFAGEF; 			/**< 2840_(9180 - 9183h) */
																ULONG	DFAGEF2;			/**< 2840_(9184 - 9187h) */
																ULONG	DFAGTH; 			/**< 2840_(9188 - 918Bh) */
																ULONG	DFAGTHK;			/**< 2840_(918C - 918Fh) */
																ULONG	DMCTL;				/**< 2840_(9190 - 9193h) */
																ULONG	DMWKS;				/**< 2840_(9194 - 9197h) */
																ULONG	DMWKD;				/**< 2840_(9198 - 919Bh) */
																ULONG	DMAGK;				/**< 2840_(919C - 919Fh) */
																ULONG	DECTL;				/**< 2840_(91A0 - 91A3h) */
																ULONG	DENSS;				/**< 2840_(91A4 - 91A7h) */
																ULONG	DENSO;				/**< 2840_(91A8 - 91ABh) */
																ULONG	DENSK;				/**< 2840_(91AC - 91AFh) */
																ULONG	DENSH;				/**< 2840_(91B0 - 91B3h) */
																ULONG	DENSMGN;			/**< 2840_(91B4 - 91B7h) */
																ULONG	DENDCTH;			/**< 2840_(91B8 - 91BBh) */
																ULONG	DEAGK;				/**< 2840_(91BC - 91BFh) */
																ULONG	DCAGEF; 			/**< 2840_(91C0 - 91C3h) */
																ULONG	DCAGTH; 			/**< 2840_(91C4 - 91C7h) */
															} T_IM_PRO_RDMA_DPC_ADDR;
											修改成
															typedef struct {
																ULONG	dpcmd;				/**< 2840_(9118 - 911Bh) */
																ULONG	dpcblp; 			/**< 2840_(911C - 911Fh) */
																ULONG	dpcblm; 			/**< 2840_(9120 - 9123h) */
																ULONG	dfctl;				/**< 2840_(9124 - 9127h) */
																ULONG	dfs1;				/**< 2840_(9130 - 9133h) */
																ULONG	dfs2;				/**< 2840_(9134 - 9137h) */
																ULONG	dfs3;				/**< 2840_(9138 - 913Bh) */
																ULONG	dfo1;				/**< 2840_(9140 - 9143h) */
																ULONG	dfo2;				/**< 2840_(9144 - 9147h) */
																ULONG	dfo3;				/**< 2840_(9148 - 914Bh) */
																ULONG	dfk1;				/**< 2840_(9150 - 9153h) */
																ULONG	dfk2;				/**< 2840_(9154 - 9157h) */
																ULONG	dfk3;				/**< 2840_(9158 - 915Bh) */
																ULONG	dfh1;				/**< 2840_(9160 - 9163h) */
																ULONG	dfh2;				/**< 2840_(9164 - 9167h) */
																ULONG	dfh3;				/**< 2840_(9168 - 916Bh) */
																ULONG	dfcsr;				/**< 2840_(9170 - 9173h) */
																ULONG	dflsth1; 			/**< 2840_(9178 - 917Bh) */
																ULONG	dflsth2; 			/**< 2840_(917C - 917Fh) */
																ULONG	dfagef; 			/**< 2840_(9180 - 9183h) */
																ULONG	dfagef2;			/**< 2840_(9184 - 9187h) */
																ULONG	dfagth; 			/**< 2840_(9188 - 918Bh) */
																ULONG	dfagthk;			/**< 2840_(918C - 918Fh) */
																ULONG	dmctl;				/**< 2840_(9190 - 9193h) */
																ULONG	dmwks;				/**< 2840_(9194 - 9197h) */
																ULONG	dmwkd;				/**< 2840_(9198 - 919Bh) */
																ULONG	dmagk;				/**< 2840_(919C - 919Fh) */
																ULONG	dectl;				/**< 2840_(91A0 - 91A3h) */
																ULONG	denss;				/**< 2840_(91A4 - 91A7h) */
																ULONG	denso;				/**< 2840_(91A8 - 91ABh) */
																ULONG	densk;				/**< 2840_(91AC - 91AFh) */
																ULONG	densh;				/**< 2840_(91B0 - 91B3h) */
																ULONG	densmgn;			/**< 2840_(91B4 - 91B7h) */
																ULONG	dendcth;			/**< 2840_(91B8 - 91BBh) */
																ULONG	deagk;				/**< 2840_(91BC - 91BFh) */
																ULONG	dcagef; 			/**< 2840_(91C0 - 91C3h) */
																ULONG	dcagth; 			/**< 2840_(91C4 - 91C7h) */
															} TimproRdmaDpcAddr;













														
							公共方法:
							
										Im_PRO_DPC_Start    修改成		impro_srodpc_start
										Im_PRO_DPC_Stop  修改成	impro_srodpc_stop
										Im_PRO_DPC_Ctrl    修改成		impro_srodpc_ctrl
										Im_PRO_DPC_Set_PAEN  修改成	impro_srodpc_set_paen					
										Im_PRO_DPC_Set_Area    修改成		impro_srodpc_set_area
										Im_PRO_DPC_Alpha_Blend_Ctrl    修改成		impro_srodpc_alpha_blend_ctrl
										Im_PRO_DPC_Dynamic_Detect_Ctrl    修改成		impro_srodpc_dynamic_detect_ctrl
										Im_PRO_DPC_Mis_Determination_Calc_Ctrl    修改成		impro_srodpc_mis_determination_calc_ctrl
										Im_PRO_DPC_Magnitude_Defect_Ctrl    修改成		impro_srodpc_magnitude_defect_ctrl
										Im_PRO_DPC_Edge_Storage_Ctrl    修改成		impro_srodpc_edge_storage_ctrl
										Im_PRO_DPC_Over_Correction_Detect_Ctrl    修改成		impro_srodpc_over_correction_detect_ctrl
										Im_PRO_Get_RdmaAddr_DPC_Cntl    修改成		impro_srodpc_get_rdma_addr_dpc_cntl







			(16)修改类 ImproSroff:
					
					
					宏定义;
					
					
									#define ImproSroff_D_IM_PRO_SRO_FF_CH_NUM			(E_IM_PRO_FF_CH1 + 1)				/**< Number of SRO FF		*/
									/** @addtogroup im_pro_sro_ff FF
									
									#define	ImproSroff_D_IM_PRO_FF_FFV_MIN				(0)			/**< Minimum setting of FFV	*/
									#define	ImproSroff_D_IM_PRO_FF_FFV_MAX				(8191)		/**< Maximum setting of FFV	*/
									#define	ImproSroff_D_IM_PRO_FF_FFH_MIN				(0)			/**< Minimum setting of FFH	*/
									#define	ImproSroff_D_IM_PRO_FF_FFH_MAX				(12287)		/**< Maximum setting of FFH	*/
									#define	ImproSroff_D_IM_PRO_FF_FFVW_MIN			(4)			/**< Minimum setting of FFVW	*/
									#define	ImproSroff_D_IM_PRO_FF_FFVW_MAX			(8192)		/**< Maximum setting of FFVW	*/
									#define	ImproSroff_D_IM_PRO_FF_FFHW_MIN			(4)			/**< Minimum setting of FFHW	*/
									#define	ImproSroff_D_IM_PRO_FF_FFHW_MAX			(12288)		/**< Maximum setting of FFHW	*/								
					
					
						枚举:
			
													typedef enum {
														E_IM_PRO_FF_CH0 = 0,	/**< FF0 */
														E_IM_PRO_FF_CH1			/**< FF1 */
													} E_IM_PRO_FF_CH;
										修改成
													typedef enum {
														ImproSroff_E_IM_PRO_FF_CH0 = 0,	/**< FF0 */
														ImproSroff_E_IM_PRO_FF_CH1			/**< FF1 */
													} EimproFfCh;
																





							
							结构体:
							
	

															typedef struct {
																USHORT ffdefts;				/**< threshold to perform white noise determination of the input image during the frame filter processing.<br>
																								value range :[0 - 16383]<br>
																								target registor :@@FFDEFTS	*/
																SHORT mnwgt;				/**< Main line input fixed coefficient.<br>
																								value range :[-512 - 511]<br>
																								target registor :@@FFMNWGT			*/
																SHORT sbwgt;				/**< FF input fixed coefficient.<br>
																								value range :[-512 - 511]<br>
																								target registor :@@FFSBWGT			*/
															} T_IM_PRO_FF_CTRL;
											修改成
															typedef struct {
																USHORT ffdefts;				/**< threshold to perform white noise determination of the input image during the frame filter processing.<br>
																								value range :[0 - 16383]<br>
																								target registor :@@FFDEFTS	*/
																SHORT mnwgt;				/**< Main line input fixed coefficient.<br>
																								value range :[-512 - 511]<br>
																								target registor :@@FFMNWGT			*/
																SHORT sbwgt;				/**< FF input fixed coefficient.<br>
																								value range :[-512 - 511]<br>
																								target registor :@@FFSBWGT			*/
															} TimproFfCtrl;



														typedef struct {
															UCHAR	b0;					 /**< Frame filter coefficient b0 for LPF<br>
																							value range :[0 - 255]<br>
																							target registor :@@FFLPB0	*/
															UCHAR	b1;					 /**< Frame filter coefficient b1 for LPF<br>
																							value range :[0 - 255]<br>
																							target registor :@@FFLPB1	*/
															UCHAR	b2;					 /**< Frame filter coefficient b2 for LPF<br>
																							value range :[0 - 255]<br>
																							target registor :@@FFLPB2	*/
														} T_IM_PRO_FF_LPF_CTRL;
											修改成
														typedef struct {
															UCHAR	b0;					 /**< Frame filter coefficient b0 for LPF<br>
																							value range :[0 - 255]<br>
																							target registor :@@FFLPB0	*/
															UCHAR	b1;					 /**< Frame filter coefficient b1 for LPF<br>
																							value range :[0 - 255]<br>
																							target registor :@@FFLPB1	*/
															UCHAR	b2;					 /**< Frame filter coefficient b2 for LPF<br>
																							value range :[0 - 255]<br>
																							target registor :@@FFLPB2	*/
														} TimproFfLpfCtrl;
	


														
							公共方法:
							
										Im_PRO_FF_Start    修改成		impro_sroff_start
										Im_PRO_FF_Stop  修改成	impro_sroff_stop
										Im_PRO_FF_Ctrl    修改成		impro_sroff_ctrl
										Im_PRO_FF_Set_Area  修改成	impro_sroff_area					
										Im_PRO_FF_Set_FIR_Filter    修改成		impro_sroff_set_fir_filter



(17)修改类 ImproSroffc:
					
					
					宏定义;
					
					
													#define	ImproSroffc_D_IM_PRO_FFC_FCV_MIN			(2)			/**< Minimum setting of FCV			*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCV_MAX			(8960)		/**< Maximum setting of FCV			*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCH_MIN			(0)			/**< Minimum setting of FCH			*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCH_MAX			(4095)		/**< Maximum setting of FCH			*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCVW_MIN			(4)			/**< Minimum setting of FCVW		*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCVW_MAX			(8960)		/**< Maximum setting of FCVW		*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCHW_MIN			(4)			/**< Minimum setting of FCHW		*/
													// --- REMOVE_ES_COMPILE_OPT BEGIN ---
													#ifdef CO_ES1_HARDWARE
													// --- REMOVE_ES_COMPILE_OPT END ---
													// --- REMOVE_ES1_HARDWARE BEGIN ---
													#define	ImproSroffc_D_IM_PRO_FFC_FCHW_MAX			(2496)		/**< Maximum setting of FCHW		*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCSUBPRH_MAX		(314)		/**< Maximum setting of FCSUBPRH	*/
													// --- REMOVE_ES1_HARDWARE END ---
													// --- REMOVE_ES_COMPILE_OPT BEGIN ---
													#endif // CO_ES1_HARDWARE
													#ifdef CO_ES3_HARDWARE
													// --- REMOVE_ES_COMPILE_OPT END ---
													// --- REMOVE_ES3_HARDWARE BEGIN ---
													#define	ImproSroffc_D_IM_PRO_FFC_FCHW_MAX			(2900)		/**< Maximum setting of FCHW		*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCSUBPRH_MAX		(366)		/**< Maximum setting of FCSUBPRH	*/
													// --- REMOVE_ES3_HARDWARE END --
													// --- REMOVE_ES_COMPILE_OPT BEGIN ---
													#endif	// CO_ES3_HARDWARE
													// --- REMOVE_ES_COMPILE_OPT END ---
													#define	ImproSroffc_D_IM_PRO_FFC_FCSUBPRH_MIN		(4)			/**< Minimum setting of FCSUBPRH	*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCSUBPRV_MIN		(4)			/**< Minimum setting of FCSUBPRV	*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCSUBPRV_MAX		(1122)		/**< Maximum setting of FCSUBPRV	*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCSUBSPH_MIN		(16)		/**< Minimum setting of FCSUBSPH	*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCSUBSPH_MAX		(724)		/**< Maximum setting of FCSUBSPH	*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCSUBSPV_MIN		(16)		/**< Minimum setting of FCSUBSPV	*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCSUBSPV_MAX		(724)		/**< Maximum setting of FCSUBSPV	*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCSUBSTH_MIN		(0)			/**< Minimum setting of FCSUBSTH	*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCSUBSTH_MAX		(722)		/**< Maximum setting of FCSUBSTH	*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCSUBSTV_MIN		(0)			/**< Minimum setting of FCSUBSTV	*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCSUBSTV_MAX		(722)		/**< Maximum setting of FCSUBSTV	*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCWRIC_MIN			(4)			/**< Minimum setting of FCWRIC		*/
													#define	ImproSroffc_D_IM_PRO_FFC_FCWRIC_MAX			(1023)		/**< Maximum setting of FCWRIC		*/

					
							枚举:
			
							
							结构体:
							
	

												typedef struct {
													USHORT					coef_horizontal_size;	/**< Frame correction coefficient horizontal size<br>
												// --- REMOVE_ES_COMPILE_OPT BEGIN ---
												#ifdef CO_ES1_HARDWARE
												// --- REMOVE_ES_COMPILE_OPT END ---
												// --- REMOVE_ES1_HARDWARE BEGIN ---
																										value range		:[4 - 314] 2pixel boundary<br>
												// --- REMOVE_ES1_HARDWARE END ---
												// --- REMOVE_ES_COMPILE_OPT BEGIN ---
												#endif // CO_ES1_HARDWARE
												#ifdef CO_ES3_HARDWARE
												// --- REMOVE_ES_COMPILE_OPT END ---
												// --- REMOVE_ES3_HARDWARE BEGIN ---
																										value range		:[4 - 366] 2pixel boundary<br>
												// --- REMOVE_ES3_HARDWARE END --
												// --- REMOVE_ES_COMPILE_OPT BEGIN ---
												#endif	// CO_ES3_HARDWARE
												// --- REMOVE_ES_COMPILE_OPT END ---
																										target registor	:@@FCSUBPRH	*/
													USHORT					coef_vertical_size;		/**< Frame correction coefficient vertical size<br>
																										value range		:[4 - 1122] 2pixel boundary<br>
																										target registor	:@@FCSUBPRV	*/
													USHORT					horizontalPixel;		/**< Frame correction interpolation horizontal pixels unit<br>
																										value range		:[16 - 724] 2pixel boundary<br>
																										target registor	:@@FCSUBSPH */
													USHORT					verticalPixel;			/**< Frame correction interpolation vertical pixels unit<br>
																										value range		:[16 - 724] 2pixel boundary<br>
																										target registor	:@@FCSUBSPV */
													USHORT					inverse_base;			/**< Inverse coefficient correction interpolation (base unit)<br>
																										value range		:[0 - 65535] <br>
																										target registor	:@@FCSUBDRM */
													USHORT					inverse_exponent;		/**< Inverse coefficient correction interpolation (Exponent part)<br>
																										value range		:[0 - 11] <br>
																										target registor	:@@FCSUBDRE */
													USHORT					coef_pos_x;				/**< Frame correction coefficient horizontal start position<br>
																										value range		:[0 - 722] 2pixel boundary<br>
																										target registor	:@@FCSUBSTH	*/
													USHORT					coef_pos_y;				/**< Frame correction coefficient vertical start position<br>
																										value range		:[0 - 722] 2pixel boundary<br>
																										target registor	:@@FCSUBSTV	*/
												} T_IM_PRO_FFC_CTRL;
											修改成
																	typedef struct {
																		USHORT					coefHorizontalSize;	/**< Frame correction coefficient horizontal size<br>
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#ifdef CO_ES1_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES1_HARDWARE BEGIN ---
																															value range		:[4 - 314] 2pixel boundary<br>
																	// --- REMOVE_ES1_HARDWARE END ---
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif // CO_ES1_HARDWARE
																	#ifdef CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES3_HARDWARE BEGIN ---
																															value range		:[4 - 366] 2pixel boundary<br>
																	// --- REMOVE_ES3_HARDWARE END --
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif	// CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																															target registor	:@@FCSUBPRH	*/
																		USHORT					coefVorizontalSize;		/**< Frame correction coefficient vertical size<br>
																															value range		:[4 - 1122] 2pixel boundary<br>
																															target registor	:@@FCSUBPRV	*/
																		USHORT					horizontalPixel;		/**< Frame correction interpolation horizontal pixels unit<br>
																															value range		:[16 - 724] 2pixel boundary<br>
																															target registor	:@@FCSUBSPH */
																		USHORT					verticalPixel;			/**< Frame correction interpolation vertical pixels unit<br>
																															value range		:[16 - 724] 2pixel boundary<br>
																															target registor	:@@FCSUBSPV */
																		USHORT					inverseBase;			/**< Inverse coefficient correction interpolation (base unit)<br>
																															value range		:[0 - 65535] <br>
																															target registor	:@@FCSUBDRM */
																		USHORT					inverseExponent;		/**< Inverse coefficient correction interpolation (Exponent part)<br>
																															value range		:[0 - 11] <br>
																															target registor	:@@FCSUBDRE */
																		USHORT					coefPosX;				/**< Frame correction coefficient horizontal start position<br>
																															value range		:[0 - 722] 2pixel boundary<br>
																															target registor	:@@FCSUBSTH	*/
																		USHORT					coefPosY;				/**< Frame correction coefficient vertical start position<br>
																															value range		:[0 - 722] 2pixel boundary<br>
																															target registor	:@@FCSUBSTV	*/
																	} TimproFfcCtrl;



														typedef struct {
															SHORT	blend_ratio_0;				/**< Frame correction expansion blend ratio 0<br>
																									value range		:[-512 - +511]<br>
																									target registor	:@@FCBC0	*/
															SHORT	blend_ratio_1;				/**< Frame correction expansion blend ratio 1<br>
																									value range		:[-512 - +511]<br>
																									target registor	:@@FCBC1	*/
														} T_IM_PRO_FFC_BLEND_CTRL;
											修改成
															typedef struct {
																SHORT	blendRatio0;				/**< Frame correction expansion blend ratio 0<br>
																										value range		:[-512 - +511]<br>
																										target registor	:@@FCBC0	*/
																SHORT	blendRatio1;				/**< Frame correction expansion blend ratio 1<br>
																										value range		:[-512 - +511]<br>
																										target registor	:@@FCBC1	*/
															} TimproFfcBlendCtrl;



														typedef struct {
															USHORT	posX;		/**< Frame correction expansion horizontal start position<br>
																					value range		:[0 - 4095]<br>
																					target registor	:@@FCH */
															USHORT	posY;		/**< Frame correction expansion vertical start position<br>
																					value range		:[2 - 8960] 2line boundary<br>
																					target registor	:@@FCV */
															USHORT	width;		/**< horizontal size<br>
														// --- REMOVE_ES_COMPILE_OPT BEGIN ---
														#ifdef CO_ES1_HARDWARE
														// --- REMOVE_ES_COMPILE_OPT END ---
														// --- REMOVE_ES1_HARDWARE BEGIN ---
																					value range		:[4 - 2496] 4pixel boundary<br>
														// --- REMOVE_ES1_HARDWARE END ---
														// --- REMOVE_ES_COMPILE_OPT BEGIN ---
														#endif // CO_ES1_HARDWARE
														#ifdef CO_ES3_HARDWARE
														// --- REMOVE_ES_COMPILE_OPT END ---
														// --- REMOVE_ES3_HARDWARE BEGIN ---
																					value range		:[4 - 2900] 4pixel boundary<br>
														// --- REMOVE_ES3_HARDWARE END --
														// --- REMOVE_ES_COMPILE_OPT BEGIN ---
														#endif	// CO_ES3_HARDWARE
														// --- REMOVE_ES_COMPILE_OPT END ---
																					target registor	:@@FCHW */
															USHORT	lines;		/**< vertical size<br>
																					value range		:[4 - 8960] 4pixel boundary<br>
																					target registor	:@@FCVW */
														} T_IM_PRO_FFC_AREA;
											修改成
															typedef struct {
																USHORT	posX;		/**< Frame correction expansion horizontal start position<br>
																						value range		:[0 - 4095]<br>
																						target registor	:@@FCH */
																USHORT	posY;		/**< Frame correction expansion vertical start position<br>
																						value range		:[2 - 8960] 2line boundary<br>
																						target registor	:@@FCV */
																USHORT	width;		/**< horizontal size<br>
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#ifdef CO_ES1_HARDWARE
															// --- REMOVE_ES_COMPILE_OPT END ---
															// --- REMOVE_ES1_HARDWARE BEGIN ---
																						value range		:[4 - 2496] 4pixel boundary<br>
															// --- REMOVE_ES1_HARDWARE END ---
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#endif // CO_ES1_HARDWARE
															#ifdef CO_ES3_HARDWARE
															// --- REMOVE_ES_COMPILE_OPT END ---
															// --- REMOVE_ES3_HARDWARE BEGIN ---
																						value range		:[4 - 2900] 4pixel boundary<br>
															// --- REMOVE_ES3_HARDWARE END --
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#endif	// CO_ES3_HARDWARE
															// --- REMOVE_ES_COMPILE_OPT END ---
																						target registor	:@@FCHW */
																USHORT	lines;		/**< vertical size<br>
																						value range		:[4 - 8960] 4pixel boundary<br>
																						target registor	:@@FCVW */
															} TimproFfcArea;



															typedef struct {
																ULONG	FCBC;				/**< 2840_(971C - 971Fh) */
																ULONG	FCSUBPR;			/**< 2840_(9734 - 9737h) */
																ULONG	FCSUBSP;			/**< 2840_(9738 - 973Bh) */
																ULONG	FCSUBDR;			/**< 2840_(973C - 973Fh) */
																ULONG	FCSUBST;			/**< 2840_(9740 - 9743h) */
															} T_IM_PRO_RDMA_FFC_ADDR;
											修改成
															typedef struct {
																ULONG	fcbc;				/**< 2840_(971C - 971Fh) */
																ULONG	fcsubpr;			/**< 2840_(9734 - 9737h) */
																ULONG	fcsubsp;			/**< 2840_(9738 - 973Bh) */
																ULONG	fcsubdr;			/**< 2840_(973C - 973Fh) */
																ULONG	fcsubst;			/**< 2840_(9740 - 9743h) */
															} TimproRdmaFfcAddr;


														
							公共方法:
							
										Im_PRO_FFC_Start    修改成		impro_sroffc_start
										Im_PRO_FFC_Stop  修改成	impro_sroffc_stop
										Im_PRO_FFC_Ctrl    修改成		impro_sroffc_ctrl
										Im_PRO_FFC_Set_Blend  修改成	impro_sroffc_set_blend					
										Im_PRO_FFC_Set_PAEN    修改成		impro_sroffc_set_paen
										Im_PRO_FFC_Set_Area    修改成		impro_sroffc_set_area
										Im_PRO_FFC_Set_Coeff_Read_Line_Wait  修改成	impro_sroffc_set_coeff_read_line_wait					
										Im_PRO_Get_RdmaAddr_FFC_Cntl    修改成		impro_sroffc_get_rdma_addr_ffc_cntl




(18)修改类 ImproSroffsh:
					
					
					宏定义;
					
					
																	#define ImproSroffsh_D_IM_PRO_SRO_FFSH_CH_NUM		(E_IM_PRO_FFSH_CH1 + 1)				/**< Number of SRO FFSH		*/
																	
																	/** @addtogroup im_pro_sro_ffsh FFSH
																	@{
																	*/
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHV_MIN			(2)			/**< Minimum setting of FFSHV	*/
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHV_MAX			(8960)		/**< Maximum setting of FFSHV	*/
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHH_MIN			(0)			/**< Minimum setting of FFSHH	*/
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHH_MAX			(4095)		/**< Maximum setting of FFSHH	*/
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHVW_MIN		(4)			/**< Minimum setting of FFSHVW	*/
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHVW_MAX		(8960)		/**< Maximum setting of FFSHVW	*/
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHHW_MIN		(4)			/**< Minimum setting of FFSHHW	*/
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#ifdef CO_ES1_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES1_HARDWARE BEGIN ---
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHHW_MAX		(2496)		/**< Maximum setting of FFSHHW	*/
																	// --- REMOVE_ES1_HARDWARE END ---
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif // CO_ES1_HARDWARE
																	#ifdef CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES3_HARDWARE BEGIN ---
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHHW_MAX		(2900)		/**< Maximum setting of FFSHHW	*/
																	// --- REMOVE_ES3_HARDWARE END --
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif	// CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHSUBPRH_MIN	(4)			/**< Minimum setting of FFSHSUBPRH	*/
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#ifdef CO_ES1_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES1_HARDWARE BEGIN ---
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHSUBPRH_MAX	(314)		/**< Maximum setting of FFSHSUBPRH	*/
																	// --- REMOVE_ES1_HARDWARE END ---
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif // CO_ES1_HARDWARE
																	#ifdef CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES3_HARDWARE BEGIN ---
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHSUBPRH_MAX	(366)		/**< Maximum setting of FFSHSUBPRH	*/
																	// --- REMOVE_ES3_HARDWARE END --
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif	// CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHSUBPRV_MIN	(4)			/**< Minimum setting of FFSHSUBPRV	*/
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHSUBPRV_MAX	(1122)		/**< Maximum setting of FFSHSUBPRV	*/
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHSUBSPH_MIN	(16)		/**< Minimum setting of FFSHSUBSPH	*/
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHSUBSPH_MAX	(724)		/**< Maximum setting of FFSHSUBSPH	*/
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHSUBSPV_MIN	(16)		/**< Minimum setting of FFSHSUBSPV	*/
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHSUBSPV_MAX	(724)		/**< Maximum setting of FFSHSUBSPV	*/
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHSUBSTH_MIN	(0)			/**< Minimum setting of FFSHSUBSTH	*/
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHSUBSTH_MAX	(722)		/**< Maximum setting of FFSHSUBSTH	*/
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHSUBSTV_MIN	(0)			/**< Minimum setting of FFSHSUBSTV	*/
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHSUBSTV_MAX	(722)		/**< Maximum setting of FFSHSUBSTV	*/
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHWRIC_MIN		(4)			/**< Minimum setting of FFSHWRIC	*/
																	#define	ImproSroffsh_D_IM_PRO_FFSH_FFSHWRIC_MAX		(1023)		/**< Maximum setting of FFSHWRIC	*/

					
							枚举:
											typedef enum {
												E_IM_PRO_FFSH_CH0 = 0,		/**< FFSH0 */
												E_IM_PRO_FFSH_CH1			/**< FFSH1 */
											} E_IM_PRO_FFSH_CH;
								修改成
											typedef enum {
												ImproSroffsh_E_IM_PRO_FFSH_CH0 = 0,		/**< FFSH0 */
												ImproSroffsh_E_IM_PRO_FFSH_CH1			/**< FFSH1 */
											} EimproFfshCh;	
																				
							
							结构体:
							
	

																	typedef struct {
																		SHORT							frame_correction_blend_0;			/**< Frame correction expansion blend ratio 0<br>
																																				value range		:[-512 - +511] <br>
																																				target registor	:@@FFSHBC0 */
																		SHORT							frame_correction_blend_1;			/**< Frame correction expansion blend ratio 1<br>
																																				value range		:[-512 - +511] <br>
																																				target registor	:@@FFSHBC1 */
																	} T_IM_PRO_FFSH_BLEND_CTRL;
											修改成
																	typedef struct {
																		SHORT							frameCorrectionBlend0;			/**< Frame correction expansion blend ratio 0<br>
																																				value range		:[-512 - +511] <br>
																																				target registor	:@@FFSHBC0 */
																		SHORT							frameCorrectionBlend1;			/**< Frame correction expansion blend ratio 1<br>
																																				value range		:[-512 - +511] <br>
																																				target registor	:@@FFSHBC1 */
																	} TimproFfshBlendCtrl;



																	typedef struct {
																		USHORT							h_size_correction_coeff;			/**< horizontal data size of the correction coefficient of the frame correction expansion processing in units of 2 pixels.<br>
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#ifdef CO_ES1_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES1_HARDWARE BEGIN ---
																																				value range		:[4 - 314]<br>
																	// --- REMOVE_ES1_HARDWARE END ---
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif // CO_ES1_HARDWARE
																	#ifdef CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES3_HARDWARE BEGIN ---
																																				value range		:[4 - 366]<br>
																	// --- REMOVE_ES3_HARDWARE END --
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif // CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																																				target registor	:@@FFSHSUBPRH */
																		USHORT							v_size_correction_coeff;			/**< vertical data size of the correction coefficient of the frame correction expansion processing in units of 2 pixels.<br>
																																				value range		:[4 - 1122]<br>
																																				target registor	:@@FFSHSUBPRV */
																		USHORT							h_pixel_unit_interpolation;			/**< horizontal pixel unit in units of 2 pixels when performing bilinear interpolation for the correction coefficient data in the frame correction expansion processing.<br>
																																				value range		:[16 - 724]<br>
																																				target registor	:@@FFSHSUBSPH */
																		USHORT							v_pixel_unit_interpolation;			/**< vertical pixel unit in units of 2 pixels when performing bilinear interpolation for the correction coefficient data in the frame correction expansion processing.<br>
																																				value range		:[16 - 724<br>
																																				target registor	:@@FFSHSUBSPV */
																		USHORT							rad_inverse_coeff_interpolation;	/**< radix part of the reciprocal number of the divisor which is used in the bilinear interpolation for the correction coefficient data in the frame correction expansion processing.<br>
																																				value range		:[0(=1.0) - 65535(=1.9999847412109375)]<br>
																																				target registor	:@@FFSHSUBDRM */
																		UCHAR							exp_inverse_coeff_interpolation;	/**< exponential part of the reciprocal number of the divisor which is used in the bilinear interpolation for the correction coefficient data in the frame correction expansion processing.<br>
																																				value range		:[0 - 11]<br>
																																				target registor	:@@FFSHSUBDRE */
																		USHORT							h_start_pos_coeff;					/**< horizontal start position of the expanded upper left grid in units of 2 pixels in the frame correction expansion processing.<br>
																																				value range		:[0 - 722]<br>
																																				target registor	:@@FFSHSUBSTH */
																		USHORT							v_start_pos_coeff;					/**< vertical start position of the expanded upper left grid in units of 2 pixels in the frame correction expansion processing.<br>
																																				value range		:[0 - 722]<br>
																																				target registor	:@@FFSHSUBSTV */
																	} T_IM_PRO_FFSH_CTRL;
											修改成
																typedef struct {
																	USHORT							hSizeCorrectionCoeff;			/**< horizontal data size of the correction coefficient of the frame correction expansion processing in units of 2 pixels.<br>
																// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																#ifdef CO_ES1_HARDWARE
																// --- REMOVE_ES_COMPILE_OPT END ---
																// --- REMOVE_ES1_HARDWARE BEGIN ---
																																			value range		:[4 - 314]<br>
																// --- REMOVE_ES1_HARDWARE END ---
																// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																#endif // CO_ES1_HARDWARE
																#ifdef CO_ES3_HARDWARE
																// --- REMOVE_ES_COMPILE_OPT END ---
																// --- REMOVE_ES3_HARDWARE BEGIN ---
																																			value range		:[4 - 366]<br>
																// --- REMOVE_ES3_HARDWARE END --
																// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																#endif // CO_ES3_HARDWARE
																// --- REMOVE_ES_COMPILE_OPT END ---
																																			target registor	:@@FFSHSUBPRH */
																	USHORT							vSizeCorrectionCoeff;			/**< vertical data size of the correction coefficient of the frame correction expansion processing in units of 2 pixels.<br>
																																			value range		:[4 - 1122]<br>
																																			target registor	:@@FFSHSUBPRV */
																	USHORT							hPixelUnitInterpolation;			/**< horizontal pixel unit in units of 2 pixels when performing bilinear interpolation for the correction coefficient data in the frame correction expansion processing.<br>
																																			value range		:[16 - 724]<br>
																																			target registor	:@@FFSHSUBSPH */
																	USHORT							vPixelUnitInterpolation;			/**< vertical pixel unit in units of 2 pixels when performing bilinear interpolation for the correction coefficient data in the frame correction expansion processing.<br>
																																			value range		:[16 - 724<br>
																																			target registor	:@@FFSHSUBSPV */
																	USHORT							radInverseCoeffInterpolation;	/**< radix part of the reciprocal number of the divisor which is used in the bilinear interpolation for the correction coefficient data in the frame correction expansion processing.<br>
																																			value range		:[0(=1.0) - 65535(=1.9999847412109375)]<br>
																																			target registor	:@@FFSHSUBDRM */
																	UCHAR							expRadInverseCoeffInterpolation;	/**< exponential part of the reciprocal number of the divisor which is used in the bilinear interpolation for the correction coefficient data in the frame correction expansion processing.<br>
																																			value range		:[0 - 11]<br>
																																			target registor	:@@FFSHSUBDRE */
																	USHORT							hStartPosCoeff;					/**< horizontal start position of the expanded upper left grid in units of 2 pixels in the frame correction expansion processing.<br>
																																			value range		:[0 - 722]<br>
																																			target registor	:@@FFSHSUBSTH */
																	USHORT							vStartPosCoeff;					/**< vertical start position of the expanded upper left grid in units of 2 pixels in the frame correction expansion processing.<br>
																																			value range		:[0 - 722]<br>
																																			target registor	:@@FFSHSUBSTV */
																} TimproFfshCtrl;




																		typedef struct {
																			ULONG	FFSHBC;				/**< 2840_(821C - 821Fh) */
																			ULONG	FFSHSUBPR;			/**< 2840_(8230 - 8233h) */
																			ULONG	FFSHSUBSP;			/**< 2840_(8234 - 8237h) */
																			ULONG	FFSHSUBDR;			/**< 2840_(8238 - 823Bh) */
																			ULONG	FFSHSUBST;			/**< 2840_(823C - 824Fh) */
																		} T_IM_PRO_RDMA_FFSH_ADDR;
											修改成
																		typedef struct {
																			ULONG	ffshbc;				/**< 2840_(821C - 821Fh) */
																			ULONG	ffshsubpr;			/**< 2840_(8230 - 8233h) */
																			ULONG	ffshsubsp;			/**< 2840_(8234 - 8237h) */
																			ULONG	ffshsubdr;			/**< 2840_(8238 - 823Bh) */
																			ULONG	ffshsubst;			/**< 2840_(823C - 824Fh) */
																		} TimproRdmaFfshAddr;



																	typedef struct {
																		T_IM_PRO_AREA_INFO		ffsh_area;		/**< FFSH Window information<br>
																													value range  :posX[0 - 4095]<br>
																													target registor  :@@FFSHH<br><br>
																													value range  :posY[2 - 8960]<br>
																													target registor  :@@FFSHV<br><br>
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#ifdef CO_ES1_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES1_HARDWARE BEGIN ---
																													value range  :width[4 - 2496] 2pixel boundary<br>
																	// --- REMOVE_ES1_HARDWARE END ---
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif // CO_ES1_HARDWARE
																	#ifdef CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES3_HARDWARE BEGIN ---
																													value range  :width[4 - 2900] 2pixel boundary<br>
																	// --- REMOVE_ES3_HARDWARE END --
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif	// CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																													target registor  :@@FFSHHW<br><br>
																													value range  :lines[4 - 8960] 2pixel boundary<br>
																													target registor  :@@FFSHVW */
																	} T_IM_PRO_FFSH_AREA;
											修改成
																	typedef struct {
																		T_IM_PRO_AREA_INFO		ffshArea;		/**< FFSH Window information<br>
																													value range  :posX[0 - 4095]<br>
																													target registor  :@@FFSHH<br><br>
																													value range  :posY[2 - 8960]<br>
																													target registor  :@@FFSHV<br><br>
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#ifdef CO_ES1_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES1_HARDWARE BEGIN ---
																													value range  :width[4 - 2496] 2pixel boundary<br>
																	// --- REMOVE_ES1_HARDWARE END ---
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif // CO_ES1_HARDWARE
																	#ifdef CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES3_HARDWARE BEGIN ---
																													value range  :width[4 - 2900] 2pixel boundary<br>
																	// --- REMOVE_ES3_HARDWARE END --
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif	// CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																													target registor  :@@FFSHHW<br><br>
																													value range  :lines[4 - 8960] 2pixel boundary<br>
																													target registor  :@@FFSHVW */
																	} TimproFfshArea;


														
							公共方法:
							
										Im_PRO_FFSH_Start    修改成		impro_sroffsh_start
										Im_PRO_FFSH_Stop  修改成	impro_sroffsh_stop
										Im_PRO_FFSH_Ctrl    修改成		impro_sroffsh_ctrl
										Im_PRO_FFSH_Set_Blend  修改成	impro_sroffsh_set_blend					
										Im_PRO_FFSH_Set_Area    修改成		impro_sroffsh_set_area
										Im_PRO_FFSH_Set_PAEN    修改成		impro_sroffsh_set_paen
										Im_PRO_FFSH_Set_Coeff_Read_Line_Wait  修改成	impro_sroffsh_set_coeff_read_line_wait					
										Im_PRO_Get_RdmaAddr_FFSH_Cntl    修改成		impro_sroffsh_get_rdma_addr_ffsh_cntl






(19)修改类 ImproSrofshdl:
					
					
					宏定义;
					
					
															#define ImproSrofshdl_D_IM_PRO_SRO_FSHDL_CH_NUM		(ImproSrofshdl_E_IM_PRO_FSHDL_CH_1 + 1)			/**< Number of SRO FSHDL	*/
															//}
															
															/** @addtogroup im_pro_sro_fshdl FSHDL
															@{
															*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHV_MIN		(2)			/**< Minimum setting of FFSHV	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHV_MAX		(8960)		/**< Maximum setting of FFSHV	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHH_MIN		(0)			/**< Minimum setting of FFSHH	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHH_MAX		(4095)		/**< Maximum setting of FFSHH	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHVW_MIN		(4)			/**< Minimum setting of FFSHVW	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHVW_MAX		(8960)		/**< Maximum setting of FFSHVW	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHHW_MIN		(4)			/**< Minimum setting of FFSHHW	*/
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#ifdef CO_ES1_HARDWARE
															// --- REMOVE_ES_COMPILE_OPT END ---
															// --- REMOVE_ES1_HARDWARE BEGIN ---
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHHW_MAX		(2496)		/**< Maximum setting of FFSHHW	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHHWPH_MAX		(2496)		/**< Maximum setting of FFSHHWPH	*/
															// --- REMOVE_ES1_HARDWARE END ---
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#endif // CO_ES1_HARDWARE
															
															#ifdef CO_ES3_HARDWARE
															// --- REMOVE_ES_COMPILE_OPT END ---
															// --- REMOVE_ES3_HARDWARE BEGIN ---
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHHW_MAX		(2900)		/**< Maximum setting of FFSHHW	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHHWPH_MAX		(2900)		/**< Maximum setting of FFSHHWPH	*/
															// --- REMOVE_ES3_HARDWARE END --
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#endif	// CO_ES3_HARDWARE
															
															#ifdef CO_ES1_HARDWARE
															// --- REMOVE_ES_COMPILE_OPT END ---
															// --- REMOVE_ES1_HARDWARE BEGIN ---
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHSUBPRH_MAX	(314)		/**< Maximum setting of FFSHSUBPRH	*/
															// --- REMOVE_ES1_HARDWARE END ---
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#endif // CO_ES1_HARDWARE
															
															#ifdef CO_ES3_HARDWARE
															// --- REMOVE_ES_COMPILE_OPT END ---
															// --- REMOVE_ES3_HARDWARE BEGIN ---
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHSUBPRH_MAX	(366)		/**< Maximum setting of FFSHSUBPRH	*/
															// --- REMOVE_ES3_HARDWARE END --
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#endif	// CO_ES3_HARDWARE
															
															#ifdef CO_ES1_HARDWARE
															// --- REMOVE_ES_COMPILE_OPT END ---
															// --- REMOVE_ES1_HARDWARE BEGIN ---
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHSUBPRH_MAX	(314)		/**< Maximum setting of FFSHSUBPRH	*/
															// --- REMOVE_ES1_HARDWARE END ---
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#endif // CO_ES1_HARDWARE
															
															#ifdef CO_ES3_HARDWARE
															// --- REMOVE_ES_COMPILE_OPT END ---
															// --- REMOVE_ES3_HARDWARE BEGIN ---
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHSUBPRH_MAX	(366)		/**< Maximum setting of FFSHSUBPRH	*/
															// --- REMOVE_ES3_HARDWARE END --
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#endif	// CO_ES3_HARDWARE
															
															// --- REMOVE_ES_COMPILE_OPT END ---
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHSUBPRV_MIN	(4)			/**< Minimum setting of FFSHSUBPRV	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHSUBPRV_MAX	(1122)		/**< Maximum setting of FFSHSUBPRV	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHSUBSPH_MIN	(16)		/**< Minimum setting of FFSHSUBSPH	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHSUBSPH_MAX	(724)		/**< Maximum setting of FFSHSUBSPH	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHSUBSPV_MIN	(16)		/**< Minimum setting of FFSHSUBSPV	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHSUBSPV_MAX	(724)		/**< Maximum setting of FFSHSUBSPV	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHSUBSTH_MIN	(0)			/**< Minimum setting of FFSHSUBSTH	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHSUBSTH_MAX	(722)		/**< Maximum setting of FFSHSUBSTH	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHSUBSTV_MIN	(0)			/**< Minimum setting of FFSHSUBSTV	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHSUBSTV_MAX	(722)		/**< Maximum setting of FFSHSUBSTV	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHWRIC_MIN		(4)			/**< Minimum setting of FFSHWRIC	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHWRIC_MAX		(1023)		/**< Maximum setting of FFSHWRIC	*/
															/*	@}*/	// im_pro_sro_fshdl
															
															// --- REMOVE_ES_COMPILE_OPT END ---
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHULRR_MIN		(0)			/**< Minimum setting of FFSHULRR	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHULRR_MAX		(16383)		/**< Maximum setting of FFSHULRR	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHULGR_MIN		(0)			/**< Minimum setting of FFSHULGR	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHULGR_MAX		(16383)		/**< Maximum setting of FFSHULGR	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHULGB_MIN		(0)			/**< Minimum setting of FFSHULGB	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHULGB_MAX		(16383)		/**< Maximum setting of FFSHULGB	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHULBB_MIN		(0)			/**< Minimum setting of FFSHULBB	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHULBB_MAX		(16383)		/**< Maximum setting of FFSHULBB	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHSUBPRH_MIN	(4)			/**< Minimum setting of FFSHSUBPRH	*/
															#define	ImproSrofshdl_D_IM_PRO_FSHDL_FFSHHWPH_MIN		(4)			/**< Minimum setting of FFSHHWPH	*/

					
							枚举:
														typedef enum {
															E_IM_PRO_FSHDL_CORRECTION_FORMAT_0 = 0,	/**<   XXXX.XXXX_XXXX_XXXX		*/
															E_IM_PRO_FSHDL_CORRECTION_FORMAT_1,		/**< 1+XXXX.XXXX_XXXX_XXXX		*/
															E_IM_PRO_FSHDL_CORRECTION_FORMAT_2,		/**<    XXX.XXXX_XXXX_XXXX_X	*/
															E_IM_PRO_FSHDL_CORRECTION_FORMAT_3,		/**< 1+ XXX.XXXX_XXXX_XXXX_X	*/
															E_IM_PRO_FSHDL_CORRECTION_FORMAT_4,		/**<     XX.XXXX_XXXX_XXXX_XX	*/
															E_IM_PRO_FSHDL_CORRECTION_FORMAT_5,		/**< 1+  XX.XXXX_XXXX_XXXX_XX	*/
															E_IM_PRO_FSHDL_CORRECTION_FORMAT_6,		/**<      X.XXXX_XXXX_XXXX_XXX	*/
															E_IM_PRO_FSHDL_CORRECTION_FORMAT_7,		/**< 1+   X.XXXX_XXXX_XXXX_XXX	*/
														} E_IM_PRO_FSHDL_CORRECTION_FORMAT;
								修改成
														typedef enum {
															ImproSrofshdl_E_IM_PRO_FSHDL_CORRECTION_FORMAT_0 = 0,	/**<   XXXX.XXXX_XXXX_XXXX		*/
															ImproSrofshdl_E_IM_PRO_FSHDL_CORRECTION_FORMAT_1,		/**< 1+XXXX.XXXX_XXXX_XXXX		*/
															ImproSrofshdl_E_IM_PRO_FSHDL_CORRECTION_FORMAT_2,		/**<    XXX.XXXX_XXXX_XXXX_X	*/
															ImproSrofshdl_E_IM_PRO_FSHDL_CORRECTION_FORMAT_3,		/**< 1+ XXX.XXXX_XXXX_XXXX_X	*/
															ImproSrofshdl_E_IM_PRO_FSHDL_CORRECTION_FORMAT_4,		/**<     XX.XXXX_XXXX_XXXX_XX	*/
															ImproSrofshdl_E_IM_PRO_FSHDL_CORRECTION_FORMAT_5,		/**< 1+  XX.XXXX_XXXX_XXXX_XX	*/
															ImproSrofshdl_E_IM_PRO_FSHDL_CORRECTION_FORMAT_6,		/**<      X.XXXX_XXXX_XXXX_XXX	*/
															ImproSrofshdl_E_IM_PRO_FSHDL_CORRECTION_FORMAT_7,		/**< 1+   X.XXXX_XXXX_XXXX_XXX	*/
														} EimproFshdlCorrectionFormat;



														typedef enum {
															E_IM_PRO_FSHDL_SAT_CORRECTION_DIS = 0,	/**< Disable	*/
															E_IM_PRO_FSHDL_SAT_CORRECTION_EN		/**< Enable		*/
														} E_IM_PRO_FSHDL_SAT_CORRECTION;
								修改成
														typedef enum {
															ImproSrofshdl_E_IM_PRO_FSHDL_SAT_CORRECTION_DIS = 0,	/**< Disable	*/
															ImproSrofshdl_E_IM_PRO_FSHDL_SAT_CORRECTION_EN		/**< Enable		*/
														} EimproFshdlSatCorrection;



													typedef enum {
														E_IM_PRO_FSHD_MONTAGE_MODE_OFF = 0,		/**< Montage image processing mode is OFF.	*/
														E_IM_PRO_FSHD_MONTAGE_MODE_ON,			/**< Montage image processing mode is ON.	*/
													} E_IM_PRO_FSHD_MONTAGE_MODE;
								修改成
												typedef enum {
													ImproSrofshdl_E_IM_PRO_FSHD_MONTAGE_MODE_OFF = 0,		/**< Montage image processing mode is OFF.	*/
													ImproSrofshdl_E_IM_PRO_FSHD_MONTAGE_MODE_ON,			/**< Montage image processing mode is ON.	*/
												} EimproFshdMontageMode;



												typedef enum {
													E_IM_PRO_FSHDL_CH_0 = 0,					/**< ch 0	*/
													E_IM_PRO_FSHDL_CH_1,						/**< ch 1	*/
												} E_IM_PRO_FSHDL_CH;
								修改成
												typedef enum {
													ImproSrofshdl_E_IM_PRO_FSHDL_CH_0 = 0,					/**< ch 0	*/
													ImproSrofshdl_E_IM_PRO_FSHDL_CH_1,						/**< ch 1	*/
												} EimproFshdlCh;

																				
							
							结构体:
							
	

														typedef struct {
															EimproFshdMontageMode			montage_mode;			/**< Montage mode<br>
																															target registor	:@@FFSHPTMD */
															USHORT								clip_r;					/**< Clip surface shading correction value after (rr)<br>
																															value range		:[0 - 16383] <br>
																															target registor	:@@FFSHULRR */
															USHORT								clip_gr;				/**< Clip surface shading correction value after (GR)<br>
																															value range		:[0 - 16383] <br>
																															target registor	:@@FFSHULGR */
															USHORT								clip_gb;				/**< Clip surface shading correction value after (GB)<br>
																															value range		:[0 - 16383] <br>
																															target registor	:@@FFSHULGB */
															USHORT								clip_b;					/**< Clip surface shading correction value after (bb)<br>
																															value range		:[0 - 16383] <br>
																															target registor	:@@FFSHULBB */
														} T_IM_PRO_FSHDL_COMMON_CTRL;
											修改成
														typedef struct {
															EimproFshdMontageMode			montageMode;			/**< Montage mode<br>
																															target registor	:@@FFSHPTMD */
															USHORT								clipR;					/**< Clip surface shading correction value after (rr)<br>
																															value range		:[0 - 16383] <br>
																															target registor	:@@FFSHULRR */
															USHORT								clipGr;				/**< Clip surface shading correction value after (GR)<br>
																															value range		:[0 - 16383] <br>
																															target registor	:@@FFSHULGR */
															USHORT								clipGb;				/**< Clip surface shading correction value after (GB)<br>
																															value range		:[0 - 16383] <br>
																															target registor	:@@FFSHULGB */
															USHORT								clipB;					/**< Clip surface shading correction value after (bb)<br>
																															value range		:[0 - 16383] <br>
																															target registor	:@@FFSHULBB */
														} TimproFshdlCommonCtrl;




																		typedef struct {
																			SHORT							shading_blend_0;		/**< Frame shading blend ratio 0<br>
																																		value range		:[-512 - +511] <br>
																																		target registor	:@@FSHDBC0 */
																			SHORT							shading_blend_1;		/**< Frame shading blend ratio 1<br>
																																		value range		:[-512 - +511] <br>
																																		target registor	:@@FSHDBC1 */
																		} T_IM_PRO_FSHDL_BLEND_CTRL;
											修改成
																		typedef struct {
																			SHORT							shadingBlend0;		/**< Frame shading blend ratio 0<br>
																																		value range		:[-512 - +511] <br>
																																		target registor	:@@FSHDBC0 */
																			SHORT							shadingBlend1;		/**< Frame shading blend ratio 1<br>
																																		value range		:[-512 - +511] <br>
																																		target registor	:@@FSHDBC1 */
																		} TimproFshdlBlendCtrl;



																			typedef struct {
																				ULONG	FFSHBC;     		/**< 2840_(931C - 931Fh) */
																				ULONG	FFSHUL1;    		/**< 2840_(9320 - 9323h) */
																				ULONG	FFSHUL2;    		/**< 2840_(9324 - 9327h) */
																				ULONG	FFSHGFMT;   		/**< 2840_(9328 - 932Bh) */
																				ULONG	FFSHSUBPR;  		/**< 2840_(9330 - 9333h) */
																				ULONG	FFSHSUBSP;  		/**< 2840_(9334 - 9337h) */
																				ULONG	FFSHSUBDR;  		/**< 2840_(9338 - 933Bh) */
																				ULONG	FFSHSUBST;  		/**< 2840_(933C - 933Fh) */
																				ULONG	FFSHCTL;    		/**< 2840_(9340 - 9343h) */
																				ULONG	FFSHHWPH;   		/**< 2840_(9344 - 9347h) */
																				ULONG	FFSHCCTL;   		/**< 2840_(9350 - 9353h) */
																				ULONG	FFSHLP1;    		/**< 2840_(9354 - 9357h) */
																				ULONG	FFSHLP2;    		/**< 2840_(9358 - 935Bh) */
																			} T_IM_PRO_RDMA_FSHDL_ADDR;
											修改成
																			typedef struct {
																				ULONG	ffshbc;     		/**< 2840_(931C - 931Fh) */
																				ULONG	ffshul1;    		/**< 2840_(9320 - 9323h) */
																				ULONG	ffshul2;    		/**< 2840_(9324 - 9327h) */
																				ULONG	ffshgfmt;   		/**< 2840_(9328 - 932Bh) */
																				ULONG	ffshsubpr;  		/**< 2840_(9330 - 9333h) */
																				ULONG	ffshsubsp;  		/**< 2840_(9334 - 9337h) */
																				ULONG	ffshsubdr;  		/**< 2840_(9338 - 933Bh) */
																				ULONG	ffshsubst;  		/**< 2840_(933C - 933Fh) */
																				ULONG	ffshctl;    		/**< 2840_(9340 - 9343h) */
																				ULONG	ffshhwph;   		/**< 2840_(9344 - 9347h) */
																				ULONG	ffshcctl;   		/**< 2840_(9350 - 9353h) */
																				ULONG	ffshlp1;    		/**< 2840_(9354 - 9357h) */
																				ULONG	ffshlp2;    		/**< 2840_(9358 - 935Bh) */
																			} TimproRdmaFshdlAddr;



																	typedef struct {
																		EimproFshdlCorrectionFormat	select_format;			/**< Formatting correction factor concentric<br>
																																		target registor	:@@FFSHGFMT */
																		USHORT								frame_horizontal_size;	/**< Frame horizontal size correction factor<br>
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#ifdef CO_ES1_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES1_HARDWARE BEGIN ---
																																		value range		:[4 - 314] 2pixel boundary<br>
																	// --- REMOVE_ES1_HARDWARE END ---
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif // CO_ES1_HARDWARE
																	#ifdef CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES3_HARDWARE BEGIN ---
																																		value range		:[4 - 366] 2pixel boundary<br>
																	// --- REMOVE_ES3_HARDWARE END --
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif	// CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																																		target registor	:@@FFSHSUBPRH */
																		USHORT								frame_vertical_size;	/**< Frame vertical size correction factor<br>
																																		value range		:[4 - 1122] 2pixel boundary<br>
																																		target registor	:@@FFSHSUBPRV */
																		USHORT								horizontalPixel;		/**< Correction of horizontal pixels per frame interpolation<br>
																																		value range		:[16 - 724] 2pixel boundary<br>
																																		target registor	:@@FFSHSUBSPH */
																		USHORT								verticalPixel;			/**< Correction of vertical pixels per frame interpolation<br>
																																		value range		:[16 - 724] 2pixel boundary<br>
																																		target registor	:@@FFSHSUBSPV */
																		USHORT								InverseBase;			/**< Inverse coefficient correction interpolation frame (base unit)<br>
																																		value range		:[0 - 65535] <br>
																																		target registor	:@@FFSHSUBDRM */
																		USHORT								InverseExponent;		/**< Inverse coefficient correction interpolation frame (Exponent part)<br>
																																		value range		:[0 - 11] <br>
																																		target registor	:@@FFSHSUBDRE */
																		USHORT								start_pos_h;			/**< Horizontal start position correction factor frame<br>
																																		value range		:[0 - 722] 2pixel boundary<br>
																																		target registor	:@@FFSHSUBSTH */
																		USHORT								start_pos_v;			/**< Vertical start position correction factor frame<br>
																																		value range		:[0 - 722] 2pixel boundary<br>
																																		target registor	:@@FFSHSUBSTV */
																		USHORT								montage_pos_h;			/**< horizontal montage position of the montage image in units of 2 pixels<br>
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#ifdef CO_ES1_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES1_HARDWARE BEGIN ---
																																		value range		:[4 - 2496] 2pixel boundary<br>
																	// --- REMOVE_ES1_HARDWARE END ---
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif // CO_ES1_HARDWARE
																	#ifdef CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES3_HARDWARE BEGIN ---
																																		value range		:[4 - 2900] 2pixel boundary<br>
																	// --- REMOVE_ES3_HARDWARE END --
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif	// CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																																		Set the value with reference to the left side of the setting processing window<br>
																																		and inside the setting value range of FSHDHW and satisfy the relationship shown below.<br>
																																		Moreover, make sure to set FSHDPTMD=1 to use this setting. <br>
																																		FSSUBSTH + FSHDHWPH = n * FSSUBSPH + 2<br>
																																		※n: integer<br>
																																		target registor	:@@FFSHHWPH */
																		EimproFshdlSatCorrection		sat_correction_enabled;	/**< Saturation correction Enable/Disable<br>
																																		target registor	:@@FFSHCEN */
																		USHORT								sat_slope_gain[4];		/**< SLOPE gain for Saturation correction.<br>
																																		value range		:[0 - 4095(=255.9375)]<br>
																																		target registor	:[0]@@FFSHLPRR, [1]@@FFSHLPGR, [2]@@FFSHLPGB, [3]@@FFSHLPBB */
																	} T_IM_PRO_FSHDL_FRAME_CTRL;
											修改成
																			typedef struct {
																				EimproFshdlCorrectionFormat	selectFormat;			/**< Formatting correction factor concentric<br>
																																				target registor	:@@FFSHGFMT */
																				USHORT								frameHorizontalSize;	/**< Frame horizontal size correction factor<br>
																			// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																			#ifdef CO_ES1_HARDWARE
																			// --- REMOVE_ES_COMPILE_OPT END ---
																			// --- REMOVE_ES1_HARDWARE BEGIN ---
																																				value range		:[4 - 314] 2pixel boundary<br>
																			// --- REMOVE_ES1_HARDWARE END ---
																			// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																			#endif // CO_ES1_HARDWARE
																			#ifdef CO_ES3_HARDWARE
																			// --- REMOVE_ES_COMPILE_OPT END ---
																			// --- REMOVE_ES3_HARDWARE BEGIN ---
																																				value range		:[4 - 366] 2pixel boundary<br>
																			// --- REMOVE_ES3_HARDWARE END --
																			// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																			#endif	// CO_ES3_HARDWARE
																			// --- REMOVE_ES_COMPILE_OPT END ---
																																				target registor	:@@FFSHSUBPRH */
																				USHORT								frameVorizontalSize;	/**< Frame vertical size correction factor<br>
																																				value range		:[4 - 1122] 2pixel boundary<br>
																																				target registor	:@@FFSHSUBPRV */
																				USHORT								horizontalPixel;		/**< Correction of horizontal pixels per frame interpolation<br>
																																				value range		:[16 - 724] 2pixel boundary<br>
																																				target registor	:@@FFSHSUBSPH */
																				USHORT								verticalPixel;			/**< Correction of vertical pixels per frame interpolation<br>
																																				value range		:[16 - 724] 2pixel boundary<br>
																																				target registor	:@@FFSHSUBSPV */
																				USHORT								InverseBase;			/**< Inverse coefficient correction interpolation frame (base unit)<br>
																																				value range		:[0 - 65535] <br>
																																				target registor	:@@FFSHSUBDRM */
																				USHORT								InverseExponent;		/**< Inverse coefficient correction interpolation frame (Exponent part)<br>
																																				value range		:[0 - 11] <br>
																																				target registor	:@@FFSHSUBDRE */
																				USHORT								startPosH;			/**< Horizontal start position correction factor frame<br>
																																				value range		:[0 - 722] 2pixel boundary<br>
																																				target registor	:@@FFSHSUBSTH */
																				USHORT								startPosV;			/**< Vertical start position correction factor frame<br>
																																				value range		:[0 - 722] 2pixel boundary<br>
																																				target registor	:@@FFSHSUBSTV */
																				USHORT								montagePosH;			/**< horizontal montage position of the montage image in units of 2 pixels<br>
																			// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																			#ifdef CO_ES1_HARDWARE
																			// --- REMOVE_ES_COMPILE_OPT END ---
																			// --- REMOVE_ES1_HARDWARE BEGIN ---
																																				value range		:[4 - 2496] 2pixel boundary<br>
																			// --- REMOVE_ES1_HARDWARE END ---
																			// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																			#endif // CO_ES1_HARDWARE
																			#ifdef CO_ES3_HARDWARE
																			// --- REMOVE_ES_COMPILE_OPT END ---
																			// --- REMOVE_ES3_HARDWARE BEGIN ---
																																				value range		:[4 - 2900] 2pixel boundary<br>
																			// --- REMOVE_ES3_HARDWARE END --
																			// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																			#endif	// CO_ES3_HARDWARE
																			// --- REMOVE_ES_COMPILE_OPT END ---
																																				Set the value with reference to the left side of the setting processing window<br>
																																				and inside the setting value range of FSHDHW and satisfy the relationship shown below.<br>
																																				Moreover, make sure to set FSHDPTMD=1 to use this setting. <br>
																																				FSSUBSTH + FSHDHWPH = n * FSSUBSPH + 2<br>
																																				※n: integer<br>
																																				target registor	:@@FFSHHWPH */
																				EimproFshdlSatCorrection		satCorrectionEnabled;	/**< Saturation correction Enable/Disable<br>
																																				target registor	:@@FFSHCEN */
																				USHORT								satSlopeGain[4];		/**< SLOPE gain for Saturation correction.<br>
																																				value range		:[0 - 4095(=255.9375)]<br>
																																				target registor	:[0]@@FFSHLPRR, [1]@@FFSHLPGR, [2]@@FFSHLPGB, [3]@@FFSHLPBB */
																			} TimproFshdlFrameCtrl;


														
							公共方法:
							
										im_pro_comm_get_fshdl_reg_info    修改成		impro_srofshdl_comm_get_fshdl_reg_info
										Im_PRO_FSHDL_Start  修改成	impro_srofshdl_start
										Im_PRO_FSHDL_Stop    修改成		impro_srofshdl_stop
										Im_PRO_FSHDL_Ctrl  修改成	impro_srofshdl_ctrl					
										Im_PRO_FSHDL_Set_Blend    修改成		impro_srofshdl_set_blend
										Im_PRO_FSHDL_Set_PAEN    修改成		impro_srofshdl_set_paen
										Im_PRO_FSHDL_Set_Area  修改成	impro_srofshdl_set_area					
										Im_PRO_FSHDL_Set_Frame    修改成		impro_srofshdl_set_frame
										Im_PRO_FSHDL_Set_Coeff_Read_Line_Wait  修改成	impro_srofshdl_set_coeff_read_line_wait					
										Im_PRO_Get_RdmaAddr_FSHDL_Cntl    修改成		impro_srofshdl_get_rdma_addr_fshdl_cntl	
										
										
										
										
										



(20)修改类 ImproSrosdc:
					
					
					宏定义;
					
					
														#define ImproSrosdc_D_IM_PRO_SRO_SDC_CH_NUM			(E_IM_PRO_SDC_CH1 + 1)				/**< Number of SRO SDC		*/
														
														/** @addtogroup im_pro_sro_sdc SDC
														@{
														*/
														#define	ImproSrosdc_D_IM_PRO_SDC_SDCPHW_MIN			(0)			/**< Minimum setting of SDCPHW	*/
														#define	ImproSrosdc_D_IM_PRO_SDC_SDCPHW_MAX			(64)		/**< Maximum setting of SDCPHW	*/
														#define	ImproSrosdc_D_IM_PRO_SDC_SDCPxHW_MIN		(0)			/**< Minimum setting of SDCPxHW	*/
														#define	ImproSrosdc_D_IM_PRO_SDC_SDCPxHW_MAX		(8191)		/**< Maximum setting of SDCPxHW	*/
														#define	ImproSrosdc_D_IM_PRO_SDC_SDCNxHW_MIN		(0)			/**< Minimum setting of SDCNxHW	*/
														#define	ImproSrosdc_D_IM_PRO_SDC_SDCNxHW_MAX		(8191)		/**< Maximum setting of SDCNxHW	*/
														#define	ImproSrosdc_D_IM_PRO_SDC_SDCPC_MIN			(0)			/**< Minimum setting of SDCPC	*/
														#define	ImproSrosdc_D_IM_PRO_SDC_SDCPC_MAX			(8)			/**< Maximum setting of SDCPC	*/
														#define	ImproSrosdc_D_IM_PRO_SDC_SDCPCW_MIN			(0)			/**< Minimum setting of SDCPCW	*/
														#define	ImproSrosdc_D_IM_PRO_SDC_SDCPCW_MAX			(64)		/**< Maximum setting of SDCPCW	*/
														#define	ImproSrosdc_D_IM_PRO_SDC_SDCPxCW_MIN		(0)			/**< Minimum setting of SDCPxCW	*/
														#define	ImproSrosdc_D_IM_PRO_SDC_SDCPxCW_MAX		(8191)		/**< Maximum setting of SDCPxCW	*/
														#define	ImproSrosdc_D_IM_PRO_SDC_SDCNxCW_MIN		(0)			/**< Minimum setting of SDCNxCW	*/
														#define	ImproSrosdc_D_IM_PRO_SDC_SDCNxCW_MAX		(8191)		/**< Maximum setting of SDCNxCW	*/
														#define	ImproSrosdc_D_IM_PRO_SDC_SDCN2CW_MIN		(1)			/**< Minimum setting of SDCN2CW	*/
														#define	ImproSrosdc_D_IM_PRO_SDC_SDCN2CW_MAX		(8191)		/**< Maximum setting of SDCN2CW	*/
														#define	ImproSrosdc_D_IM_PRO_SDC_SDCNMAX_MIN		(0)			/**< Minimum setting of SDCNMAX	*/
														#define	ImproSrosdc_D_IM_PRO_SDC_SDCNMAX_MAX		(3)			/**< Maximum setting of SDCNMAX	*/
														/*	@}*/	// im_pro_sro_sdc
														/** @addtogroup im_pro_sro_sdc SDC
														@{
														*/
														#define	ImproSrosdc_D_IM_PRO_SDC_GAIN_TBL_NUM		(128)		/**< index Number of SDC gain table.	*/
														/					
							枚举:
							
							
													typedef enum {
														E_IM_PRO_SDC_GAIN_TABLE_SEL_0 = 0,						/**< Gain coefficient table RAM0 (SDCGDTBL0) is selected.	*/
														E_IM_PRO_SDC_GAIN_TABLE_SEL_1,							/**< Gain coefficient table RAM1 (SDCGDTBL1) is selected.	*/
													} E_IM_PRO_SDC_GAIN_TABLE_SEL;
										修改成
													typedef enum {
														ImproSrosdc_E_IM_PRO_SDC_GAIN_TABLE_SEL_0 = 0,						/**< Gain coefficient table RAM0 (SDCGDTBL0) is selected.	*/
														ImproSrosdc_E_IM_PRO_SDC_GAIN_TABLE_SEL_1,							/**< Gain coefficient table RAM1 (SDCGDTBL1) is selected.	*/
													} EimproSdcGainTableSel;								



													typedef enum {
														E_IM_PRO_SDC_MODE_SDC = 0,				/**< Static defect correction */
														E_IM_PRO_SDC_MODE_SDC_GAIN,				/**< Static defect correction + Gain correction  */
														E_IM_PRO_SDC_MODE_COOP_DPC_AFPB,		/**< DPC macro cooperative defect correction + Phase difference AF pixel output */
														E_IM_PRO_SDC_MODE_COOP_DPC_AFPB_GAIN1,	/**< DPC macro cooperative defect correction + Phase difference AF pixel output + Gain correction1 */
														E_IM_PRO_SDC_MODE_COOP_DPC_AFPB_GAIN2,	/**< DPC macro cooperative defect correction + Phase difference AF pixel output + Gain correction2 */
													} E_IM_PRO_SDC_MODE;
										修改成
													typedef enum {
														ImproSrosdc_E_IM_PRO_SDC_MODE_SDC = 0,				/**< Static defect correction */
														ImproSrosdc_E_IM_PRO_SDC_MODE_SDC_GAIN,				/**< Static defect correction + Gain correction  */
														ImproSrosdc_E_IM_PRO_SDC_MODE_COOP_DPC_AFPB,		/**< DPC macro cooperative defect correction + Phase difference AF pixel output */
														ImproSrosdc_E_IM_PRO_SDC_MODE_COOP_DPC_AFPB_GAIN1,	/**< DPC macro cooperative defect correction + Phase difference AF pixel output + Gain correction1 */
														ImproSrosdc_E_IM_PRO_SDC_MODE_COOP_DPC_AFPB_GAIN2,	/**< DPC macro cooperative defect correction + Phase difference AF pixel output + Gain correction2 */
													} EimproSdcMode;



													typedef enum {
														E_IM_PRO_SDC_AFPB_OUTPUT_PTN_ALL_OR_SDC_ONLY = 0,		/**< (Phase difference AF pixel pattern output + Static defect correction) processing or static defect correction only.	*/
														E_IM_PRO_SDC_AFPB_OUTPUT_PTN_AFOB_ONLY,					/**< Phase difference AF pixel pattern output only.  */
													} E_IM_PRO_SDC_AFPB_OUTPUT_PTN;
										修改成
													typedef enum {
														ImproSrosdc_E_IM_PRO_SDC_AFPB_OUTPUT_PTN_ALL_OR_SDC_ONLY = 0,		/**< (Phase difference AF pixel pattern output + Static defect correction) processing or static defect correction only.	*/
														ImproSrosdc_E_IM_PRO_SDC_AFPB_OUTPUT_PTN_AFOB_ONLY,					/**< Phase difference AF pixel pattern output only.  */
													} EimproSdcAfpbOutputPtn;



													typedef enum {
														E_IM_PRO_SDC_MONOCHROME_MODE_BAYER_CORRECTION = 0,		/**< Static defect correction Bayer correction mode.	*/
														E_IM_PRO_SDC_MONOCHROME_MODE_MONOCHROME_CORRECTION,		/**< Static defect correction  monochrome correction mode.	*/
													} E_IM_PRO_SDC_MONOCHROME_MODE;
										修改成
													typedef enum {
														ImproSrosdc_E_IM_PRO_SDC_MONOCHROME_MODE_BAYER_CORRECTION = 0,		/**< Static defect correction Bayer correction mode.	*/
														ImproSrosdc_E_IM_PRO_SDC_MONOCHROME_MODE_MONOCHROME_CORRECTION,		/**< Static defect correction  monochrome correction mode.	*/
													} EimproSdcMonochromeMode;



													typedef enum {
														E_IM_PRO_SDC_AFPB_DIS = 0,								/**< Phase difference AF pixel pattern output is OFF.	*/
														E_IM_PRO_SDC_AFPB_EN,									/**< Phase difference AF pixel pattern output is ON.	*/
													} E_IM_PRO_SDC_AFPB_ENABLE;
										修改成
													typedef enum {
														ImproSrosdc_E_IM_PRO_SDC_AFPB_DIS = 0,								/**< Phase difference AF pixel pattern output is OFF.	*/
														ImproSrosdc_E_IM_PRO_SDC_AFPB_EN,									/**< Phase difference AF pixel pattern output is ON.	*/
													} EimproSdcAfpbEnable;


	
							结构体:
							
	
																typedef struct {
																	ULONG	SDCCTL;				/**< 2840_(8808 - 880Bh) */
																	ULONG	SDCSGD;				/**< 2840_(8814 - 8817h) */
																	ULONG	SDCPH01_0;			/**< 2840_(8880 - 8883h) */
																	ULONG	SDCPH01_1;			/**< 2840_(8884 - 8887h) */
																	ULONG	SDCPH02_0;			/**< 2840_(8888 - 888Bh) */
																	ULONG	SDCPH02_1;			/**< 2840_(888C - 888Fh) */
																	ULONG	SDCPH03_0;			/**< 2840_(8890 - 8893h) */
																	ULONG	SDCPH03_1;			/**< 2840_(8894 - 8897h) */
																	ULONG	SDCPH04_0;			/**< 2840_(8898 - 889Bh) */
																	ULONG	SDCPH04_1;			/**< 2840_(889C - 889Fh) */
																	ULONG	SDCPH05_0;			/**< 2840_(88A0 - 88A3h) */
																	ULONG	SDCPH05_1;			/**< 2840_(88A4 - 88A7h) */
																	ULONG	SDCPH06_0;			/**< 2840_(88A8 - 88ABh) */
																	ULONG	SDCPH06_1;			/**< 2840_(88AC - 88AFh) */
																	ULONG	SDCPH07_0;			/**< 2840_(88B0 - 88B3h) */
																	ULONG	SDCPH07_1;			/**< 2840_(88B4 - 88B7h) */
																	ULONG	SDCPH08_0;			/**< 2840_(88B8 - 88BBh) */
																	ULONG	SDCPH08_1;			/**< 2840_(88BC - 88BFh) */
																	ULONG	SDCPH09_0;			/**< 2840_(88C0 - 88C3h) */
																	ULONG	SDCPH09_1;			/**< 2840_(88C4 - 88C7h) */
																	ULONG	SDCPH11_0;			/**< 2840_(8900 - 8903h) */
																	ULONG	SDCPH11_1;			/**< 2840_(8904 - 8907h) */
																	ULONG	SDCPH12_0;			/**< 2840_(8908 - 890Bh) */
																	ULONG	SDCPH12_1;			/**< 2840_(890C - 890Fh) */
																	ULONG	SDCPH13_0;			/**< 2840_(8910 - 8913h) */
																	ULONG	SDCPH13_1;			/**< 2840_(8914 - 8917h) */
																	ULONG	SDCPH14_0;			/**< 2840_(8918 - 891Bh) */
																	ULONG	SDCPH14_1;			/**< 2840_(891C - 891Fh) */
																	ULONG	SDCPH15_0;			/**< 2840_(8920 - 8923h) */
																	ULONG	SDCPH15_1;			/**< 2840_(8924 - 8927h) */
																	ULONG	SDCPH16_0;			/**< 2840_(8928 - 892Bh) */
																	ULONG	SDCPH16_1;			/**< 2840_(892C - 892Fh) */
																	ULONG	SDCPH17_0;			/**< 2840_(8930 - 8933h) */
																	ULONG	SDCPH17_1;			/**< 2840_(8934 - 8937h) */
																	ULONG	SDCPH18_0;			/**< 2840_(8938 - 893Bh) */
																	ULONG	SDCPH18_1;			/**< 2840_(893C - 893Fh) */
																	ULONG	SDCPH19_0;			/**< 2840_(8940 - 8943h) */
																	ULONG	SDCPH19_1;			/**< 2840_(8944 - 8947h) */
																	ULONG	SDCPHW01;			/**< 2840_(8980 - 8983h) */
																	ULONG	SDCPHW02;			/**< 2840_(8984 - 8987h) */
																	ULONG	SDCPHW03;			/**< 2840_(8988 - 898Bh) */
																	ULONG	SDCPHW10;			/**< 2840_(8990 - 8993h) */
																	ULONG	SDCPHW11;			/**< 2840_(8994 - 8997h) */
																	ULONG	SDCPHW12;			/**< 2840_(8998 - 899Bh) */
																	ULONG	SDCP1HW01;			/**< 2840_(89A0 - 89A3h) */
																	ULONG	SDCP1HW02;			/**< 2840_(89A4 - 89A7h) */
																	ULONG	SDCP1HW03;			/**< 2840_(89A8 - 89ABh) */
																	ULONG	SDCP1HW04;			/**< 2840_(89AC - 89AFh) */
																	ULONG	SDCP1HW05;			/**< 2840_(89B0 - 89B3h) */
																	ULONG	SDCP1HW11;			/**< 2840_(89C0 - 89C3h) */
																	ULONG	SDCP1HW12;			/**< 2840_(89C4 - 89C7h) */
																	ULONG	SDCP1HW13;			/**< 2840_(89C8 - 89CBh) */
																	ULONG	SDCP1HW14;			/**< 2840_(89CC - 89CFh) */
																	ULONG	SDCP1HW15;			/**< 2840_(89D0 - 89D3h) */
																	ULONG	SDCN1HW01;			/**< 2840_(89E0 - 89E3h) */
																	ULONG	SDCN1HW02;			/**< 2840_(89E4 - 89E7h) */
																	ULONG	SDCN1HW03;			/**< 2840_(89E8 - 89EBh) */
																	ULONG	SDCN1HW04;			/**< 2840_(89EC - 89EFh) */
																	ULONG	SDCN1HW05;			/**< 2840_(89F0 - 89F3h) */
																	ULONG	SDCN1HW11;			/**< 2840_(8A00 - 8A03h) */
																	ULONG	SDCN1HW12;			/**< 2840_(8A04 - 8A07h) */
																	ULONG	SDCN1HW13;			/**< 2840_(8A08 - 8A0Bh) */
																	ULONG	SDCN1HW14;			/**< 2840_(8A0C - 8A0Fh) */
																	ULONG	SDCN1HW15;			/**< 2840_(8A10 - 8A13h) */
																	ULONG	SDCP2HW01;			/**< 2840_(8A20 - 8A23h) */
																	ULONG	SDCP2HW02;			/**< 2840_(8A24 - 8A27h) */
																	ULONG	SDCP2HW03;			/**< 2840_(8A28 - 8A2Bh) */
																	ULONG	SDCP2HW04;			/**< 2840_(8A2C - 8A2Fh) */
																	ULONG	SDCP2HW05;			/**< 2840_(8A30 - 8A33h) */
																	ULONG	SDCP2HW11;			/**< 2840_(8A40 - 8A43h) */
																	ULONG	SDCP2HW12;			/**< 2840_(8A44 - 8A47h) */
																	ULONG	SDCP2HW13;			/**< 2840_(8A48 - 8A4Bh) */
																	ULONG	SDCP2HW14;			/**< 2840_(8A4C - 8A4Fh) */
																	ULONG	SDCP2HW15;			/**< 2840_(8A50 - 8A53h) */
																	ULONG	SDCN2HW01;			/**< 2840_(8A60 - 8A63h) */
																	ULONG	SDCN2HW02;			/**< 2840_(8A64 - 8A67h) */
																	ULONG	SDCN2HW03;			/**< 2840_(8A68 - 8A6Bh) */
																	ULONG	SDCN2HW04;			/**< 2840_(8A6C - 8A6Fh) */
																	ULONG	SDCN2HW05;			/**< 2840_(8A70 - 8A73h) */
																	ULONG	SDCN2HW11;			/**< 2840_(8A80 - 8A83h) */
																	ULONG	SDCN2HW12;			/**< 2840_(8A84 - 8A87h) */
																	ULONG	SDCN2HW13;			/**< 2840_(8A88 - 8A8Bh) */
																	ULONG	SDCN2HW14;			/**< 2840_(8A8C - 8A8Fh) */
																	ULONG	SDCN2HW15;			/**< 2840_(8A90 - 8A93h) */
																	ULONG	SDCPC01;			/**< 2840_(8AC0 - 8AC3h) */
																	ULONG	SDCPC02;			/**< 2840_(8AC4 - 8AC7h) */
																	ULONG	SDCPC03;			/**< 2840_(8AC8 - 8ACBh) */
																	ULONG	SDCPC04;			/**< 2840_(8ACC - 8ACFh) */
																	ULONG	SDCPC05;			/**< 2840_(8AD0 - 8AD3h) */
																	ULONG	SDCPC06;			/**< 2840_(8AD4 - 8AD7h) */
																	ULONG	SDCPC07;			/**< 2840_(8AD8 - 8ADBh) */
																	ULONG	SDCPC08;			/**< 2840_(8ADC - 8ADFh) */
																	ULONG	SDCPC09;			/**< 2840_(8AE0 - 8AE3h) */
																	ULONG	SDCPC010;			/**< 2840_(8AE4 - 8AE7h) */
																	ULONG	SDCPC011;			/**< 2840_(8AE8 - 8AEBh) */
																	ULONG	SDCPC012;			/**< 2840_(8AEC - 8AEFh) */
																	ULONG	SDCPC013;			/**< 2840_(8AF0 - 8AF3h) */
																	ULONG	SDCPC014;			/**< 2840_(8AF4 - 8AF7h) */
																	ULONG	SDCPC015;			/**< 2840_(8AF8 - 8AFBh) */
																	ULONG	SDCPC016;			/**< 2840_(8AFC - 8AFFh) */
																	ULONG	SDCPC11;			/**< 2840_(8B00 - 8B03h) */
																	ULONG	SDCPC12;			/**< 2840_(8B04 - 8B07h) */
																	ULONG	SDCPC13;			/**< 2840_(8B08 - 8B0Bh) */
																	ULONG	SDCPC14;			/**< 2840_(8B0C - 8B0Fh) */
																	ULONG	SDCPC15;			/**< 2840_(8B10 - 8B13h) */
																	ULONG	SDCPC16;			/**< 2840_(8B14 - 8B17h) */
																	ULONG	SDCPC17;			/**< 2840_(8B18 - 8B1Bh) */
																	ULONG	SDCPC18;			/**< 2840_(8B1C - 8B1Fh) */
																	ULONG	SDCPC19;			/**< 2840_(8B20 - 8B23h) */
																	ULONG	SDCPC110;			/**< 2840_(8B24 - 8B27h) */
																	ULONG	SDCPC111;			/**< 2840_(8B28 - 8B2Bh) */
																	ULONG	SDCPC112;			/**< 2840_(8B2C - 8B2Fh) */
																	ULONG	SDCPC113;			/**< 2840_(8B30 - 8B33h) */
																	ULONG	SDCPC114;			/**< 2840_(8B34 - 8B37h) */
																	ULONG	SDCPC115;			/**< 2840_(8B38 - 8B3Bh) */
																	ULONG	SDCPC116;			/**< 2840_(8B3C - 8B3Fh) */
																	ULONG	SDCPCW0;			/**< 2840_(8B40 - 8B43h) */
																	ULONG	SDCPCW1;			/**< 2840_(8B44 - 8B47h) */
																	ULONG	SDCP1CW0;			/**< 2840_(8B48 - 8B4Bh) */
																	ULONG	SDCP1CW1;			/**< 2840_(8B4C - 8B4Fh) */
																	ULONG	SDCN1CW0;			/**< 2840_(8B50 - 8B53h) */
																	ULONG	SDCN1CW1;			/**< 2840_(8B54 - 8B57h) */
																	ULONG	SDCP2CW0;			/**< 2840_(8B58 - 8B5Bh) */
																	ULONG	SDCP2CW1;			/**< 2840_(8B5C - 8B5Fh) */
																	ULONG	SDCN2CW0;			/**< 2840_(8B60 - 8B63h) */
																	ULONG	SDCN2CW1;			/**< 2840_(8B64 - 8B67h) */
																	ULONG	SDCGMAXMIN; 		/**< 2840_(8B9C - 8B9Fh) */
																	ULONG	SDCNMAX;			/**< 2840_(8BA0 - 8BA3h) */
																} T_IM_PRO_RDMA_SDC_ADDR;
											修改成
																typedef struct {
																	ULONG	sdcctl;				/**< 2840_(8808 - 880Bh) */
																	ULONG	sdcsgd;				/**< 2840_(8814 - 8817h) */
																	ULONG	sdcph01_0;			/**< 2840_(8880 - 8883h) */
																	ULONG	sdcph01_1;			/**< 2840_(8884 - 8887h) */
																	ULONG	sdcph02_0;			/**< 2840_(8888 - 888Bh) */
																	ULONG	sdcph02_1;			/**< 2840_(888C - 888Fh) */
																	ULONG	sdcph03_0;			/**< 2840_(8890 - 8893h) */
																	ULONG	sdcph03_1;			/**< 2840_(8894 - 8897h) */
																	ULONG	sdcph04_0;			/**< 2840_(8898 - 889Bh) */
																	ULONG	sdcph04_1;			/**< 2840_(889C - 889Fh) */
																	ULONG	sdcph05_0;			/**< 2840_(88A0 - 88A3h) */
																	ULONG	sdcph05_1;			/**< 2840_(88A4 - 88A7h) */
																	ULONG	sdcph06_0;			/**< 2840_(88A8 - 88ABh) */
																	ULONG	sdcph06_1;			/**< 2840_(88AC - 88AFh) */
																	ULONG	sdcph07_0;			/**< 2840_(88B0 - 88B3h) */
																	ULONG	sdcph07_1;			/**< 2840_(88B4 - 88B7h) */
																	ULONG	sdcph08_0;			/**< 2840_(88B8 - 88BBh) */
																	ULONG	sdcph08_1;			/**< 2840_(88BC - 88BFh) */
																	ULONG	sdcph09_0;			/**< 2840_(88C0 - 88C3h) */
																	ULONG	sdcph09_1;			/**< 2840_(88C4 - 88C7h) */
																	ULONG	sdcph11_0;			/**< 2840_(8900 - 8903h) */
																	ULONG	sdcph11_1;			/**< 2840_(8904 - 8907h) */
																	ULONG	sdcph12_0;			/**< 2840_(8908 - 890Bh) */
																	ULONG	sdcph12_1;			/**< 2840_(890C - 890Fh) */
																	ULONG	sdcph13_0;			/**< 2840_(8910 - 8913h) */
																	ULONG	sdcph13_1;			/**< 2840_(8914 - 8917h) */
																	ULONG	sdcph14_0;			/**< 2840_(8918 - 891Bh) */
																	ULONG	sdcph14_1;			/**< 2840_(891C - 891Fh) */
																	ULONG	sdcph15_0;			/**< 2840_(8920 - 8923h) */
																	ULONG	sdcph15_1;			/**< 2840_(8924 - 8927h) */
																	ULONG	sdcph16_0;			/**< 2840_(8928 - 892Bh) */
																	ULONG	sdcph16_1;			/**< 2840_(892C - 892Fh) */
																	ULONG	sdcph17_0;			/**< 2840_(8930 - 8933h) */
																	ULONG	sdcph17_1;			/**< 2840_(8934 - 8937h) */
																	ULONG	sdcph18_0;			/**< 2840_(8938 - 893Bh) */
																	ULONG	sdcph18_1;			/**< 2840_(893C - 893Fh) */
																	ULONG	sdcph19_0;			/**< 2840_(8940 - 8943h) */
																	ULONG	sdcph19_1;			/**< 2840_(8944 - 8947h) */
																	ULONG	sdcphw01;			/**< 2840_(8980 - 8983h) */
																	ULONG	sdcphw02;			/**< 2840_(8984 - 8987h) */
																	ULONG	sdcphw03;			/**< 2840_(8988 - 898Bh) */
																	ULONG	sdcphw10;			/**< 2840_(8990 - 8993h) */
																	ULONG	sdcphw11;			/**< 2840_(8994 - 8997h) */
																	ULONG	sdcphw12;			/**< 2840_(8998 - 899Bh) */
																	ULONG	sdcp1hw01;			/**< 2840_(89A0 - 89A3h) */
																	ULONG	sdcp1hw02;			/**< 2840_(89A4 - 89A7h) */
																	ULONG	sdcp1hw03;			/**< 2840_(89A8 - 89ABh) */
																	ULONG	sdcp1hw04;			/**< 2840_(89AC - 89AFh) */
																	ULONG	sdcp1hw05;			/**< 2840_(89B0 - 89B3h) */
																	ULONG	sdcp1hw11;			/**< 2840_(89C0 - 89C3h) */
																	ULONG	sdcp1hw12;			/**< 2840_(89C4 - 89C7h) */
																	ULONG	sdcp1hw13;			/**< 2840_(89C8 - 89CBh) */
																	ULONG	sdcp1hw14;			/**< 2840_(89CC - 89CFh) */
																	ULONG	sdcp1hw15;			/**< 2840_(89D0 - 89D3h) */
																	ULONG	sdcn1hw01;			/**< 2840_(89E0 - 89E3h) */
																	ULONG	sdcn1hw02;			/**< 2840_(89E4 - 89E7h) */
																	ULONG	sdcn1hw03;			/**< 2840_(89E8 - 89EBh) */
																	ULONG	sdcn1hw04;			/**< 2840_(89EC - 89EFh) */
																	ULONG	sdcn1hw05;			/**< 2840_(89F0 - 89F3h) */
																	ULONG	sdcn1hw11;			/**< 2840_(8A00 - 8A03h) */
																	ULONG	sdcn1hw12;			/**< 2840_(8A04 - 8A07h) */
																	ULONG	sdcn1hw13;			/**< 2840_(8A08 - 8A0Bh) */
																	ULONG	sdcn1hw14;			/**< 2840_(8A0C - 8A0Fh) */
																	ULONG	sdcn1hw15;			/**< 2840_(8A10 - 8A13h) */
																	ULONG	sdcp2hw01;			/**< 2840_(8A20 - 8A23h) */
																	ULONG	sdcp2hw02;			/**< 2840_(8A24 - 8A27h) */
																	ULONG	sdcp2hw03;			/**< 2840_(8A28 - 8A2Bh) */
																	ULONG	sdcp2hw04;			/**< 2840_(8A2C - 8A2Fh) */
																	ULONG	sdcp2hw05;			/**< 2840_(8A30 - 8A33h) */
																	ULONG	sdcp2hw11;			/**< 2840_(8A40 - 8A43h) */
																	ULONG	sdcp2hw12;			/**< 2840_(8A44 - 8A47h) */
																	ULONG	sdcp2hw13;			/**< 2840_(8A48 - 8A4Bh) */
																	ULONG	sdcp2hw14;			/**< 2840_(8A4C - 8A4Fh) */
																	ULONG	sdcp2hw15;			/**< 2840_(8A50 - 8A53h) */
																	ULONG	sdcn2hw01;			/**< 2840_(8A60 - 8A63h) */
																	ULONG	sdcn2hw02;			/**< 2840_(8A64 - 8A67h) */
																	ULONG	sdcn2hw03;			/**< 2840_(8A68 - 8A6Bh) */
																	ULONG	sdcn2hw04;			/**< 2840_(8A6C - 8A6Fh) */
																	ULONG	sdcn2hw05;			/**< 2840_(8A70 - 8A73h) */
																	ULONG	sdcn2hw11;			/**< 2840_(8A80 - 8A83h) */
																	ULONG	sdcn2hw12;			/**< 2840_(8A84 - 8A87h) */
																	ULONG	sdcn2hw13;			/**< 2840_(8A88 - 8A8Bh) */
																	ULONG	sdcn2hw14;			/**< 2840_(8A8C - 8A8Fh) */
																	ULONG	sdcn2hw15;			/**< 2840_(8A90 - 8A93h) */
																	ULONG	sdcpc01;			/**< 2840_(8AC0 - 8AC3h) */
																	ULONG	sdcpc02;			/**< 2840_(8AC4 - 8AC7h) */
																	ULONG	sdcpc03;			/**< 2840_(8AC8 - 8ACBh) */
																	ULONG	sdcpc04;			/**< 2840_(8ACC - 8ACFh) */
																	ULONG	sdcpc05;			/**< 2840_(8AD0 - 8AD3h) */
																	ULONG	sdcpc06;			/**< 2840_(8AD4 - 8AD7h) */
																	ULONG	sdcpc07;			/**< 2840_(8AD8 - 8ADBh) */
																	ULONG	sdcpc08;			/**< 2840_(8ADC - 8ADFh) */
																	ULONG	sdcpc09;			/**< 2840_(8AE0 - 8AE3h) */
																	ULONG	sdcpc010;			/**< 2840_(8AE4 - 8AE7h) */
																	ULONG	sdcpc011;			/**< 2840_(8AE8 - 8AEBh) */
																	ULONG	sdcpc012;			/**< 2840_(8AEC - 8AEFh) */
																	ULONG	sdcpc013;			/**< 2840_(8AF0 - 8AF3h) */
																	ULONG	sdcpc014;			/**< 2840_(8AF4 - 8AF7h) */
																	ULONG	sdcpc015;			/**< 2840_(8AF8 - 8AFBh) */
																	ULONG	sdcpc016;			/**< 2840_(8AFC - 8AFFh) */
																	ULONG	sdcpc11;			/**< 2840_(8B00 - 8B03h) */
																	ULONG	sdcpc12;			/**< 2840_(8B04 - 8B07h) */
																	ULONG	sdcpc13;			/**< 2840_(8B08 - 8B0Bh) */
																	ULONG	sdcpc14;			/**< 2840_(8B0C - 8B0Fh) */
																	ULONG	sdcpc15;			/**< 2840_(8B10 - 8B13h) */
																	ULONG	sdcpc16;			/**< 2840_(8B14 - 8B17h) */
																	ULONG	sdcpc17;			/**< 2840_(8B18 - 8B1Bh) */
																	ULONG	sdcpc18;			/**< 2840_(8B1C - 8B1Fh) */
																	ULONG	sdcpc19;			/**< 2840_(8B20 - 8B23h) */
																	ULONG	sdcpc110;			/**< 2840_(8B24 - 8B27h) */
																	ULONG	sdcpc111;			/**< 2840_(8B28 - 8B2Bh) */
																	ULONG	sdcpc112;			/**< 2840_(8B2C - 8B2Fh) */
																	ULONG	sdcpc113;			/**< 2840_(8B30 - 8B33h) */
																	ULONG	sdcpc114;			/**< 2840_(8B34 - 8B37h) */
																	ULONG	sdcpc115;			/**< 2840_(8B38 - 8B3Bh) */
																	ULONG	sdcpc116;			/**< 2840_(8B3C - 8B3Fh) */
																	ULONG	sdcpcw0;			/**< 2840_(8B40 - 8B43h) */
																	ULONG	sdcpcw1;			/**< 2840_(8B44 - 8B47h) */
																	ULONG	sdcp1cw0;			/**< 2840_(8B48 - 8B4Bh) */
																	ULONG	sdcp1cw1;			/**< 2840_(8B4C - 8B4Fh) */
																	ULONG	sdcn1cw0;			/**< 2840_(8B50 - 8B53h) */
																	ULONG	sdcn1cw1;			/**< 2840_(8B54 - 8B57h) */
																	ULONG	sdcp2cw0;			/**< 2840_(8B58 - 8B5Bh) */
																	ULONG	sdcp2cw1;			/**< 2840_(8B5C - 8B5Fh) */
																	ULONG	sdcn2cw0;			/**< 2840_(8B60 - 8B63h) */
																	ULONG	sdcn2cw1;			/**< 2840_(8B64 - 8B67h) */
																	ULONG	sdcgmaxmin; 		/**< 2840_(8B9C - 8B9Fh) */
																	ULONG	sdcnmax;			/**< 2840_(8BA0 - 8BA3h) */
																} TimproRdmaSdcAddr;



																		typedef struct {
																			EimproSdcMode					sdc_mode;			/**< Defect correction mode select.<br>
																																		target registor	:@@SDCMD	*/
																			EimproSdcAfpbOutputPtn		afpb_output_ptn;	/**< Phase difference AF pixel pattern output setting.<br>
																																		target registor	:@@SDCPTO	*/
																			EimproSdcMonochromeMode		monochrome_mode;	/**< Defect correction monochrome mode select.<br>
																																		target registor	:@@SDCMONO	*/
																			EimproSdcAfpbEnable			afpb_enabled;		/**< Phase difference AF pixel pattern output enable.<br>
																																		target registor	:@@SDCPDAFEN	*/
																		} T_IM_PRO_SDC_CTRL;
														修改成
																		typedef struct {
																			EimproSdcMode					sdcMode;			/**< Defect correction mode select.<br>
																																		target registor	:@@SDCMD	*/
																			EimproSdcAfpbOutputPtn		afpbOutputPtn;	/**< Phase difference AF pixel pattern output setting.<br>
																																		target registor	:@@SDCPTO	*/
																			EimproSdcMonochromeMode		monochromeMode;	/**< Defect correction monochrome mode select.<br>
																																		target registor	:@@SDCMONO	*/
																			EimproSdcAfpbEnable			afpbEnabled;		/**< Phase difference AF pixel pattern output enable.<br>
																																		target registor	:@@SDCPDAFEN	*/
																		} TimproSdcCtrl;



																		typedef struct {
																			ULLONG						h_pattern0[9];							/**< horizontal pattern0  of AF generation pattern in units of 1 pixel.<br>
																																					value range		:[0 - 0xFFFF_FFFF_FFFF_FFFF]<br>
																																					target registor	:@@SDCPH0[0]~0[8] */
																			ULLONG						h_pattern1[9];							/**< horizontal pattern1  of AF generation pattern in units of 1 pixel.<br>
																																					value range		:[0 - 0xFFFF_FFFF_FFFF_FFFF]<br>
																																					target registor	:@@SDCPH1[0]~1[8] */
																			UCHAR						h_pattern0_valid_width[9];				/**< horizontal pattern0 valid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																					value range		:[0 - 64]<br>
																																					target registor	:@@SDCPHW0[0]~0[8] */
																			UCHAR						h_pattern1_valid_width[9];				/**< horizontal pattern1 valid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																					value range		:[0 - 64]<br>
																																					target registor	:@@SDCPHW1[0]~1[8] */
																			USHORT						h_pattern0_r1_valid_width[9];			/**< horizontal pattern0 repetition1 valid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																					value range		:[0 - 8191]<br>
																																					target registor	:@@SDCP1HW0[0]~0[8] */
																			USHORT						h_pattern1_r1_valid_width[9];			/**< horizontal pattern1 repetition1 valid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																					value range		:[0 - 8191]<br>
																																					target registor	:@@SDCP1HW1[0]~1[8] */
																			USHORT						h_pattern0_r1_invalid_width[9];			/**< horizontal pattern0 repetition1 invalid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																					value range		:[0 - 8191]<br>
																																					target registor	:@@SDCN1HW0[0]~0[8] */
																			USHORT						h_pattern1_r1_invalid_width[9];			/**< horizontal pattern1 repetition1 invalid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																					value range		:[0 - 8191]<br>
																																					target registor	:@@SDCN1HW1[0]~1[8] */
																			USHORT						h_pattern0_r2_valid_width[9];			/**< horizontal pattern0 repetition2 valid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																					value range		:[0 - 8191]<br>
																																					target registor	:@@SDCP2HW0[0]~0[8] */
																			USHORT						h_pattern1_r2_valid_width[9];			/**< horizontal pattern1 repetition2 valid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																					value range		:[0 - 8191]<br>
																																					target registor	:@@SDCP2HW1[0]~1[8] */
																			USHORT						h_pattern0_r2_invalid_width[9];			/**< horizontal pattern0 repetition2 invalid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																					value range		:[0 - 8191]<br>
																																					target registor	:@@SDCP2HW0[0]~0[8] */
																			USHORT						h_pattern1_r2_invalid_width[9];			/**< horizontal pattern1 repetition2 invalid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																					value range		:[0 - 8191]<br>
																																					target registor	:@@SDCP2HW1[0]~1[8] */
																			UCHAR						h_column_pattern0[64];					/**< column pattern0 of the horizontal pattern of the phase difference AF pixel information generation pattern.<br>
																																					value range		:[0 - 8]<br>
																																					target registor	:@@SDCPC0[0]~0[63] */
																			UCHAR						h_column_pattern1[64];					/**< column pattern1 of the horizontal pattern of the phase difference AF pixel information generation pattern.<br>
																																					value range		:[0 - 8]<br>
																																					target registor	:@@SDCPC1[0]~1[63] */
																			UCHAR						h_column_pattern_valid_width0;			/**< column pattern valid width0 of the horizontal pattern of the phase difference AF pixel information generation pattern.<br>
																																					value range		:[0 - 64]<br>
																																					target registor	:@@SDCPCW0 */
																			UCHAR						h_column_pattern_valid_width1;			/**< column pattern valid width1 of the horizontal pattern of the phase difference AF pixel information generation pattern.<br>
																																					value range		:[0 - 64]<br>
																																					target registor	:@@SDCPCW1 */
																			USHORT						h_column_pattern1_valid_width0;			/**< column pattern1 valid width0 of the horizontal pattern of the phase difference AF pixel information generation pattern in units of 1 column.<br>
																																					value range		:[0 - 8191]<br>
																																					target registor	:@@SDCP1CW0 */
																			USHORT						h_column_pattern1_valid_width1;			/**< column pattern1 valid width1 of the horizontal pattern of the phase difference AF pixel information generation pattern in units of 1 column.<br>
																																					value range		:[0 - 8191]<br>
																																					target registor	:@@SDCP1CW1 */
																			USHORT						h_column_pattern1_invalid_width0;		/**< column pattern1 invalid width0 of the horizontal pattern of the phase difference AF pixel information generation pattern in units of 1 column.<br>
																																					value range		:[0 - 8191]<br>
																																					target registor	:@@SDCN1CW0 */
																			USHORT						h_column_pattern1_invalid_width1;		/**< column pattern1 invalid width1 of the horizontal pattern of the phase difference AF pixel information generation pattern in units of 1 column.<br>
																																					value range		:[0 - 8191]<br>
																																					target registor	:@@SDCN1CW1 */
																			USHORT						h_column_pattern2_valid_width0;			/**< column pattern2 valid width0 of the horizontal pattern of the phase difference AF pixel information generation pattern in units of 1 column.<br>
																																					value range		:[0 - 8191]<br>
																																					target registor	:@@SDCP2CW0 */
																			USHORT						h_column_pattern2_valid_width1;			/**< column pattern2 valid width1 of the horizontal pattern of the phase difference AF pixel information generation pattern in units of 1 column.<br>
																																					value range		:[0 - 8191]<br>
																																					target registor	:@@SDCP2CW1 */
																			USHORT						h_column_pattern2_invalid_width0;		/**< column pattern2 invalid width0 of the horizontal pattern of the phase difference AF pixel information generation pattern in units of 1 column.<br>
																																					value range		:[0 - 8191]<br>
																																					target registor	:@@SDCN2CW0 */
																			USHORT						h_column_pattern2_invalid_width1;		/**< column pattern2 invalid width1 of the horizontal pattern of the phase difference AF pixel information generation pattern in units of 1 column.<br>
																																					value range		:[0 - 8191]<br>
																																					target registor	:@@SDCN2CW1 */
																			USHORT						afpb_gain_correction_u_threshold;		/**< judgment threshold (upper-limit) of the values used in the gain correction when performing the surrounding pixel gain correction of the phase difference AF pixel.<br>
																																					value range		:[0 - 4095]<br>
																																					target registor	:@@SDCGMAX */
																			USHORT						af_gain_correction_l_threshold;			/**< judgment threshold (lower-limit) of the values used in the gain correction when performing the surrounding pixel gain correction of the phase difference AF pixel.<br>
																																					value range		:[0 - 4095]<br>
																																					target registor	:@@SDCGMIN */
																			UCHAR						afpb_neighbor_pixel_correction_level;	/**< When the number of the phase difference AF pixels of neighboring pixels on the top, bottom, left and right side is equal to or larger than (SDCNMAX+1), the static defective pixel correction is performed.<br>
																																					value range		:[0 - 3]<br>
																																					target registor	:@@SDCNMAX */
																		} T_IM_PRO_SDC_CTRL_AFPB;
														修改成
																	typedef struct {
																		ULLONG						hPattern0[9];							/**< horizontal pattern0  of AF generation pattern in units of 1 pixel.<br>
																																				value range		:[0 - 0xFFFF_FFFF_FFFF_FFFF]<br>
																																				target registor	:@@SDCPH0[0]~0[8] */
																		ULLONG						hPattern1[9];							/**< horizontal pattern1  of AF generation pattern in units of 1 pixel.<br>
																																				value range		:[0 - 0xFFFF_FFFF_FFFF_FFFF]<br>
																																				target registor	:@@SDCPH1[0]~1[8] */
																		UCHAR						hPattern0ValidWidth[9];				/**< horizontal pattern0 valid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																				value range		:[0 - 64]<br>
																																				target registor	:@@SDCPHW0[0]~0[8] */
																		UCHAR						hPattern1ValidWidth[9];				/**< horizontal pattern1 valid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																				value range		:[0 - 64]<br>
																																				target registor	:@@SDCPHW1[0]~1[8] */
																		USHORT						hPattern0R1ValidWidth[9];			/**< horizontal pattern0 repetition1 valid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																				value range		:[0 - 8191]<br>
																																				target registor	:@@SDCP1HW0[0]~0[8] */
																		USHORT						hPattern1R1ValidWidth[9];			/**< horizontal pattern1 repetition1 valid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																				value range		:[0 - 8191]<br>
																																				target registor	:@@SDCP1HW1[0]~1[8] */
																		USHORT						hPattern0R1InvalidWidth[9];			/**< horizontal pattern0 repetition1 invalid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																				value range		:[0 - 8191]<br>
																																				target registor	:@@SDCN1HW0[0]~0[8] */
																		USHORT						hPattern1R1InvalidWidth[9];			/**< horizontal pattern1 repetition1 invalid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																				value range		:[0 - 8191]<br>
																																				target registor	:@@SDCN1HW1[0]~1[8] */
																		USHORT						hPattern0R2ValidWidth[9];			/**< horizontal pattern0 repetition2 valid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																				value range		:[0 - 8191]<br>
																																				target registor	:@@SDCP2HW0[0]~0[8] */
																		USHORT						hPattern1R2ValidWidth[9];			/**< horizontal pattern1 repetition2 valid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																				value range		:[0 - 8191]<br>
																																				target registor	:@@SDCP2HW1[0]~1[8] */
																		USHORT						hPattern0R2InvalidWidth[9];			/**< horizontal pattern0 repetition2 invalid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																				value range		:[0 - 8191]<br>
																																				target registor	:@@SDCP2HW0[0]~0[8] */
																		USHORT						hPattern1R2InvalidWidth[9];			/**< horizontal pattern1 repetition2 invalid width of the phase difference AF pixel information generation pattern in units of 1 pixel.<br>
																																				value range		:[0 - 8191]<br>
																																				target registor	:@@SDCP2HW1[0]~1[8] */
																		UCHAR						hColumnPattern0[64];					/**< column pattern0 of the horizontal pattern of the phase difference AF pixel information generation pattern.<br>
																																				value range		:[0 - 8]<br>
																																				target registor	:@@SDCPC0[0]~0[63] */
																		UCHAR						hColumnPattern1[64];					/**< column pattern1 of the horizontal pattern of the phase difference AF pixel information generation pattern.<br>
																																				value range		:[0 - 8]<br>
																																				target registor	:@@SDCPC1[0]~1[63] */
																		UCHAR						hColumnPatternValidWidth0;			/**< column pattern valid width0 of the horizontal pattern of the phase difference AF pixel information generation pattern.<br>
																																				value range		:[0 - 64]<br>
																																				target registor	:@@SDCPCW0 */
																		UCHAR						hColumnPatternValidWidth1;			/**< column pattern valid width1 of the horizontal pattern of the phase difference AF pixel information generation pattern.<br>
																																				value range		:[0 - 64]<br>
																																				target registor	:@@SDCPCW1 */
																		USHORT						hColumnPattern1ValidWidth0;			/**< column pattern1 valid width0 of the horizontal pattern of the phase difference AF pixel information generation pattern in units of 1 column.<br>
																																				value range		:[0 - 8191]<br>
																																				target registor	:@@SDCP1CW0 */
																		USHORT						hColumnPattern1ValidWidth1;			/**< column pattern1 valid width1 of the horizontal pattern of the phase difference AF pixel information generation pattern in units of 1 column.<br>
																																				value range		:[0 - 8191]<br>
																																				target registor	:@@SDCP1CW1 */
																		USHORT						hColumnPattern1InvalidWidth0;		/**< column pattern1 invalid width0 of the horizontal pattern of the phase difference AF pixel information generation pattern in units of 1 column.<br>
																																				value range		:[0 - 8191]<br>
																																				target registor	:@@SDCN1CW0 */
																		USHORT						hColumnPattern1InvalidWidth1;		/**< column pattern1 invalid width1 of the horizontal pattern of the phase difference AF pixel information generation pattern in units of 1 column.<br>
																																				value range		:[0 - 8191]<br>
																																				target registor	:@@SDCN1CW1 */
																		USHORT						hColumnPattern2ValidWidth0;			/**< column pattern2 valid width0 of the horizontal pattern of the phase difference AF pixel information generation pattern in units of 1 column.<br>
																																				value range		:[0 - 8191]<br>
																																				target registor	:@@SDCP2CW0 */
																		USHORT						hColumnPattern2ValidWidth1;			/**< column pattern2 valid width1 of the horizontal pattern of the phase difference AF pixel information generation pattern in units of 1 column.<br>
																																				value range		:[0 - 8191]<br>
																																				target registor	:@@SDCP2CW1 */
																		USHORT						hColumnPattern2InvalidWidth0;		/**< column pattern2 invalid width0 of the horizontal pattern of the phase difference AF pixel information generation pattern in units of 1 column.<br>
																																				value range		:[0 - 8191]<br>
																																				target registor	:@@SDCN2CW0 */
																		USHORT						hColumnPattern2InvalidWidth1;		/**< column pattern2 invalid width1 of the horizontal pattern of the phase difference AF pixel information generation pattern in units of 1 column.<br>
																																				value range		:[0 - 8191]<br>
																																				target registor	:@@SDCN2CW1 */
																		USHORT						afpbGainCorrectionUThreshold;		/**< judgment threshold (upper-limit) of the values used in the gain correction when performing the surrounding pixel gain correction of the phase difference AF pixel.<br>
																																				value range		:[0 - 4095]<br>
																																				target registor	:@@SDCGMAX */
																		USHORT						afpbGainCorrectionIThreshold;			/**< judgment threshold (lower-limit) of the values used in the gain correction when performing the surrounding pixel gain correction of the phase difference AF pixel.<br>
																																				value range		:[0 - 4095]<br>
																																				target registor	:@@SDCGMIN */
																		UCHAR						afpbNeighborPixelCorrectionLevel;	/**< When the number of the phase difference AF pixels of neighboring pixels on the top, bottom, left and right side is equal to or larger than (SDCNMAX+1), the static defective pixel correction is performed.<br>
																																				value range		:[0 - 3]<br>
																																				target registor	:@@SDCNMAX */
																	} TimproSdcCtrlAfpb;



																	typedef struct {
																		USHORT	gain_table[ImproSrosdc_D_IM_PRO_SDC_GAIN_TBL_NUM];	/**< Coefficients for gain correction.<br>
																															value range		:[0 - 255(7.96875)]<br>
																															target registor	:@@SDC0GD1/2	*/
																	} T_IM_PRO_SDC_GAIN_TABLE;
														修改成
																	typedef struct {
																		USHORT	gainTable[ImproSrosdc_D_IM_PRO_SDC_GAIN_TBL_NUM];	/**< Coefficients for gain correction.<br>
																															value range		:[0 - 255(7.96875)]<br>
																															target registor	:@@SDC0GD1/2	*/
																	} TimproSdcGainTable;



																	typedef struct {
																		ULONG	SDCGD;				/**< gain coefficient table register address */
																	} T_IM_PRO_RDMA_SDC_GAIN_TBL_ADDR;
														修改成
																	typedef struct {
																		ULONG	sdcgd;				/**< gain coefficient table register address */
																	} TimproRdmaSdcGainTblAddr;



														
							公共方法:
							
										im_pro_comm_get_sdc_reg_info    修改成		impro_srosdc_comm_get_sdc_reg_info
										Im_PRO_SDC_Start  修改成	impro_srosdc_start
										Im_PRO_SDC_Stop    修改成		impro_srosdc_stop
										Im_PRO_SDC_Ctrl  修改成	impro_srosdc_ctrl					
										Im_PRO_SDC_Select_Gain_Table    修改成		impro_srosdc_select_gain_table
										Im_PRO_SDC_Ctrl_Afpb  修改成	impro_srosdc_ctrl_afpb
										Im_PRO_SDC_Set_Gain_Table    修改成		impro_srosdc_set_gain_table
										Im_PRO_SDC_Set_PAEN  修改成	impro_srosdc_set_paen		
										Im_PRO_Get_RdmaAddr_SDC_Cntl    修改成		impro_srosdc_get_rdma_addr_sdc_cntl
										Im_PRO_Get_RdmaAddr_SDC_Gain_Tbl  修改成	impro_srosdc_get_rdma_addr_sdc_gain_tbl	



(21)修改类 ImproSrohrb:
					
					
					宏定义;
					
					
															#define	ImproSrohrb_D_IM_PRO_HRB_HRBV_MIN			(0)			/**< Minimum setting of HRBV		*/
															#define	ImproSrohrb_D_IM_PRO_HRB_HRBV_MAX			(8190)		/**< Maximum setting of HRBV		*/
															#define	ImproSrohrb_D_IM_PRO_HRB_HRBH_MIN			(0)			/**< Minimum setting of HRBH		*/
															#define	ImproSrohrb_D_IM_PRO_HRB_HRBH_MAX			(16382)		/**< Maximum setting of HRBH		*/
															#define	ImproSrohrb_D_IM_PRO_HRB_HRBVW_MIN			(1)			/**< Minimum setting of HRBVW		*/
															#define	ImproSrohrb_D_IM_PRO_HRB_HRBVW_MAX			(8191)		/**< Maximum setting of HRBVW		*/
															#define	ImproSrohrb_D_IM_PRO_HRB_HRBHW_MIN			(2)			/**< Minimum setting of HRBHW		*/
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#ifdef CO_ES1_HARDWARE
															// --- REMOVE_ES_COMPILE_OPT END ---
															// --- REMOVE_ES1_HARDWARE BEGIN ---
															#define	ImproSrohrb_D_IM_PRO_HRB_HRBHW_MAX			(2496)		/**< Maximum setting of HRBHW		*/
															#define	ImproSrohrb_D_IM_PRO_HRB_HRBOHW_MAX			(2496)		/**< Maximum setting of HRBOHW		*/
															// --- REMOVE_ES1_HARDWARE END ---
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#endif // CO_ES1_HARDWARE
															#ifdef CO_ES3_HARDWARE
															// --- REMOVE_ES_COMPILE_OPT END ---
															// --- REMOVE_ES3_HARDWARE BEGIN ---
															#define	ImproSrohrb_D_IM_PRO_HRB_HRBHW_MAX			(2900)		/**< Maximum setting of HRBHW		*/
															#define	ImproSrohrb_D_IM_PRO_HRB_HRBOHW_MAX			(2900)		/**< Maximum setting of HRBOHW		*/
															// --- REMOVE_ES3_HARDWARE END --
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#endif	// CO_ES3_HARDWARE
															// --- REMOVE_ES_COMPILE_OPT END ---
															#define	ImproSrohrb_D_IM_PRO_HRB_HRBOHW_MIN			(2)			/**< Minimum setting of HRBOHW		*/
															#define	ImproSrohrb_D_IM_PRO_HRB_HRBSCYC_MIN		(1)			/**< Minimum setting of HRBSCYC		*/
															#define	ImproSrohrb_D_IM_PRO_HRB_HRBSCYC_MAX		(20)		/**< Maximum setting of HRBSCYC		*/
															#define	ImproSrohrb_D_IM_PRO_HRB_HRBOSM_MIN			(0)			/**< Minimum setting of HRBOSM		*/
															#define	ImproSrohrb_D_IM_PRO_HRB_HRBOSM_MAX			(8191)		/**< Maximum setting of HRBOSM		*/
															/*	@}*/	// im_pro_sro_hrb
					
							枚举:
	
							结构体:
							
	
																	typedef struct {
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#ifdef CO_ES1_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES1_HARDWARE BEGIN ---
																		USHORT			inPosX;			/**< Start position of HRB window from a valid VD edge.<br>
																												Set the interlace coordinates after 2-line division which is input to HRB/1 core respectively.<br>
																												If the value of this register is doubled, it becomes the progressive image coordinates.<br>
																												value range :[0 - 16382]<br>
																												target registor :@@HRBH	*/
																		USHORT			inPosY;			/**< Start position of HRB window from a valid HD edge.<br>
																												value range :[0 - 8190]<br>
																												target registor :@@HRBV	*/
																		USHORT			inWidth;		/**< HRB Horizon INC<br>
																											value range :[2 - 2496]<br>
																											target registor :@@HRBHW */
																		USHORT			inLines;		/**< HRB Vertical INC<br>
																											value range :[1 - 8191]<br>
																											target registor :@@HRBVW */
																		USHORT			outWidth;		/**< HRB Output Horizon INC<br>
																											value range :[2 - 2496]<br>
																											target registor :@@HRBOHW */
																		UCHAR			cycle;			/**< HRB input cycle<br>
																											value range :[0 - 14]<br>
																											target registor :@@HRBSCYC */
																		USHORT			out_timing;		/**< HRB Output Timing<br>
																											value range :[0 - 8191]<br>
																											target registor :@@HRBOSM */
																		USHORT			coefficient[20][5];	/**< HRB Offset<br>
																											value range :[0 - 65535(1.999969482)]<br>
																											target registor :@@HRBK_0_0-@@HRBK_19_4		*/
																	// --- REMOVE_ES1_HARDWARE END ---
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif // CO_ES1_HARDWARE
																	#ifdef CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES3_HARDWARE BEGIN ---
																		USHORT			inPosX;			/**< Start position of HRB window from a valid VD edge.<br>
																												Set the interlace coordinates after 2-line division which is input to HRB/1 core respectively.<br>
																												If the value of this register is doubled, it becomes the progressive image coordinates.<br>
																												value range :[0 - 16382]<br>
																												target registor :@@HRBH	*/
																		USHORT			inPosY;			/**< Start position of HRB window from a valid HD edge.<br>
																												value range :[0 - 8190]<br>
																												target registor :@@HRBV	*/
																		USHORT			inWidth;		/**< HRB Horizon INC<br>
																											value range :[2 - 2900]<br>
																											target registor :@@HRBHW */
																		USHORT			inLines;		/**< HRB Vertical INC<br>
																											value range :[1 - 8191]<br>
																											target registor :@@HRBVW */
																		USHORT			outWidth;		/**< HRB Output Horizon INC<br>
																											value range :[2 - 2900]<br>
																											target registor :@@HRBOHW */
																		UCHAR			cycle;			/**< HRB input cycle<br>
																											value range :[0 - 14]<br>
																											target registor :@@HRBSCYC */
																		USHORT			out_timing;		/**< HRB Output Timing<br>
																											value range :[0 - 8191]<br>
																											target registor :@@HRBOSM */
																		USHORT			coefficient[20][5];	/**< HRB Offset<br>
																											value range :[0 - 65535(1.999969482)]<br>
																											target registor :@@HRBK_0_0-@@HRBK_19_4		*/
																	// --- REMOVE_ES3_HARDWARE END --
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif	// CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	} T_IM_PRO_HRB_CTRL;
											修改成
																	typedef struct {
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#ifdef CO_ES1_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES1_HARDWARE BEGIN ---
																		USHORT			inPosX;			/**< Start position of HRB window from a valid VD edge.<br>
																												Set the interlace coordinates after 2-line division which is input to HRB/1 core respectively.<br>
																												If the value of this register is doubled, it becomes the progressive image coordinates.<br>
																												value range :[0 - 16382]<br>
																												target registor :@@HRBH	*/
																		USHORT			inPosY;			/**< Start position of HRB window from a valid HD edge.<br>
																												value range :[0 - 8190]<br>
																												target registor :@@HRBV	*/
																		USHORT			inWidth;		/**< HRB Horizon INC<br>
																											value range :[2 - 2496]<br>
																											target registor :@@HRBHW */
																		USHORT			inLines;		/**< HRB Vertical INC<br>
																											value range :[1 - 8191]<br>
																											target registor :@@HRBVW */
																		USHORT			outWidth;		/**< HRB Output Horizon INC<br>
																											value range :[2 - 2496]<br>
																											target registor :@@HRBOHW */
																		UCHAR			cycle;			/**< HRB input cycle<br>
																											value range :[0 - 14]<br>
																											target registor :@@HRBSCYC */
																		USHORT			outTiming;		/**< HRB Output Timing<br>
																											value range :[0 - 8191]<br>
																											target registor :@@HRBOSM */
																		USHORT			coefficient[20][5];	/**< HRB Offset<br>
																											value range :[0 - 65535(1.999969482)]<br>
																											target registor :@@HRBK_0_0-@@HRBK_19_4		*/
																	// --- REMOVE_ES1_HARDWARE END ---
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif // CO_ES1_HARDWARE
																	#ifdef CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	// --- REMOVE_ES3_HARDWARE BEGIN ---
																		USHORT			inPosX;			/**< Start position of HRB window from a valid VD edge.<br>
																												Set the interlace coordinates after 2-line division which is input to HRB/1 core respectively.<br>
																												If the value of this register is doubled, it becomes the progressive image coordinates.<br>
																												value range :[0 - 16382]<br>
																												target registor :@@HRBH	*/
																		USHORT			inPosY;			/**< Start position of HRB window from a valid HD edge.<br>
																												value range :[0 - 8190]<br>
																												target registor :@@HRBV	*/
																		USHORT			inWidth;		/**< HRB Horizon INC<br>
																											value range :[2 - 2900]<br>
																											target registor :@@HRBHW */
																		USHORT			inLines;		/**< HRB Vertical INC<br>
																											value range :[1 - 8191]<br>
																											target registor :@@HRBVW */
																		USHORT			outWidth;		/**< HRB Output Horizon INC<br>
																											value range :[2 - 2900]<br>
																											target registor :@@HRBOHW */
																		UCHAR			cycle;			/**< HRB input cycle<br>
																											value range :[0 - 14]<br>
																											target registor :@@HRBSCYC */
																		USHORT			outTiming;		/**< HRB Output Timing<br>
																											value range :[0 - 8191]<br>
																											target registor :@@HRBOSM */
																		USHORT			coefficient[20][5];	/**< HRB Offset<br>
																											value range :[0 - 65535(1.999969482)]<br>
																											target registor :@@HRBK_0_0-@@HRBK_19_4		*/
																	// --- REMOVE_ES3_HARDWARE END --
																	// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																	#endif	// CO_ES3_HARDWARE
																	// --- REMOVE_ES_COMPILE_OPT END ---
																	} TimproHrbCtrl;


														
							公共方法:
							
										Im_PRO_HRB_Start    修改成		impro_srohrb_start
										Im_PRO_HRB_Stop  修改成	impro_srohrb_stop
										Im_PRO_HRB_Ctrl    修改成		impro_srohrb_ctrl
										Im_PRO_HRB_Set_PAEN  修改成	impro_srohrb_set_paen			




(22)修改类 ImproSrovrb:
					
					
					宏定义;
					
					
															#define	ImproSrovrb_D_IM_PRO_VRB_VRBV_MIN			(0)			/**< Minimum setting of VRBV		*/
															#define	ImproSrovrb_D_IM_PRO_VRB_VRBV_MAX			(8190)		/**< Maximum setting of VRBV		*/
															#define	ImproSrovrb_D_IM_PRO_VRB_VRBH_MIN			(0)			/**< Minimum setting of VRBH		*/
															#define	ImproSrovrb_D_IM_PRO_VRB_VRBH_MAX			(16382)		/**< Maximum setting of VRBH		*/
															#define	ImproSrovrb_D_IM_PRO_VRB_VRBVW_MIN			(1)			/**< Minimum setting of VRBVW		*/
															#define	ImproSrovrb_D_IM_PRO_VRB_VRBVW_MAX			(8191)		/**< Maximum setting of VRBVW		*/
															#define	ImproSrovrb_D_IM_PRO_VRB_VRBHW_MIN			(2)			/**< Minimum setting of VRBHW		*/
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#ifdef CO_ES1_HARDWARE
															// --- REMOVE_ES_COMPILE_OPT END ---
															// --- REMOVE_ES1_HARDWARE BEGIN ---
															#define	ImproSrovrb_D_IM_PRO_VRB_VRBHW_MAX			(2496)		/**< Maximum setting of VRBHW		*/
															// --- REMOVE_ES1_HARDWARE END ---
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#endif // CO_ES1_HARDWARE
															#ifdef CO_ES3_HARDWARE
															// --- REMOVE_ES_COMPILE_OPT END ---
															// --- REMOVE_ES3_HARDWARE BEGIN ---
															#define	ImproSrovrb_D_IM_PRO_VRB_VRBHW_MAX			(2900)		/**< Maximum setting of VRBHW		*/
															// --- REMOVE_ES3_HARDWARE END --
															// --- REMOVE_ES_COMPILE_OPT BEGIN ---
															#endif	// CO_ES3_HARDWARE
															// --- REMOVE_ES_COMPILE_OPT END ---
															#define	ImproSrovrb_D_IM_PRO_VRB_VRBSCYC_MIN		(1)			/**< Minimum setting of VRBSCYC		*/
															#define	ImproSrovrb_D_IM_PRO_VRB_VRBSCYC_MAX		(10)		/**< Maximum setting of VRBSCYC		*/
																	
							枚举:
							
	


	
							结构体:
							
	
																		typedef struct {
																			USHORT			inPosX;		/**< Start position of VRB window from a valid VD edge.<br>
																												Set the interlace coordinates after 2-line division which is input to VRB0/1 core respectively.<br>
																												If the value of this register is doubled, it becomes the progressive image coordinates.<br>
																												value range :[0 - 16382]<br>
																												target registor :@@VRBH	*/
																			USHORT			inPosY;		/**< Start position of VRB window from a valid HD edge.<br>
																												value range :[0 - 8190] 2pixel boundary.<br>
																												target registor :@@VRBV	*/
																			USHORT			inWidth;		/**< VRB Horizon INC<br>
																		// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																		#ifdef CO_ES1_HARDWARE
																		// --- REMOVE_ES_COMPILE_OPT END ---
																		// --- REMOVE_ES1_HARDWARE BEGIN ---
																												value range :[2 - 2496]<br>
																		// --- REMOVE_ES1_HARDWARE END ---
																		// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																		#endif // CO_ES1_HARDWARE
																		#ifdef CO_ES3_HARDWARE
																		// --- REMOVE_ES_COMPILE_OPT END ---
																		// --- REMOVE_ES3_HARDWARE BEGIN ---
																												value range :[2 - 2900]<br>
																		// --- REMOVE_ES3_HARDWARE END --
																		// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																		#endif	// CO_ES3_HARDWARE
																		// --- REMOVE_ES_COMPILE_OPT END ---
																												target registor :@@VRBHW */
																			USHORT			inLines;		/**< VRB Vertical INC<br>
																												value range :[1 - 8191]<br>
																												target registor :@@VRBVW */
																			UCHAR			cycle;			/**< VRB input cycle<br>
																												value range :[1 - 10]<br>
																												target registor :@@VRBSCYC */
																			USHORT			coefficient0[10][3];	/**< VRB0 Input Offset<br>
																												value range :[0 - 65535(1.999969482)]<br>
																												target registor :@@VRB0K_0_0-@@VRB0K_9_2		*/
																			USHORT			coefficient1[10][3];	/**< VRB1 Input Offset<br>
																												value range :[0 - 65535(1.999969482)]<br>
																												target registor :@@VRB1K_0_0-@@VRB1K_9_2		*/
																		} T_IM_PRO_VRB_CTRL;
											修改成
																		typedef struct {
																			USHORT			inPosX;		/**< Start position of VRB window from a valid VD edge.<br>
																												Set the interlace coordinates after 2-line division which is input to VRB0/1 core respectively.<br>
																												If the value of this register is doubled, it becomes the progressive image coordinates.<br>
																												value range :[0 - 16382]<br>
																												target registor :@@VRBH	*/
																			USHORT			inPosY;		/**< Start position of VRB window from a valid HD edge.<br>
																												value range :[0 - 8190] 2pixel boundary.<br>
																												target registor :@@VRBV	*/
																			USHORT			inWidth;		/**< VRB Horizon INC<br>
																		// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																		#ifdef CO_ES1_HARDWARE
																		// --- REMOVE_ES_COMPILE_OPT END ---
																		// --- REMOVE_ES1_HARDWARE BEGIN ---
																												value range :[2 - 2496]<br>
																		// --- REMOVE_ES1_HARDWARE END ---
																		// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																		#endif // CO_ES1_HARDWARE
																		#ifdef CO_ES3_HARDWARE
																		// --- REMOVE_ES_COMPILE_OPT END ---
																		// --- REMOVE_ES3_HARDWARE BEGIN ---
																												value range :[2 - 2900]<br>
																		// --- REMOVE_ES3_HARDWARE END --
																		// --- REMOVE_ES_COMPILE_OPT BEGIN ---
																		#endif	// CO_ES3_HARDWARE
																		// --- REMOVE_ES_COMPILE_OPT END ---
																												target registor :@@VRBHW */
																			USHORT			inLines;		/**< VRB Vertical INC<br>
																												value range :[1 - 8191]<br>
																												target registor :@@VRBVW */
																			UCHAR			cycle;			/**< VRB input cycle<br>
																												value range :[1 - 10]<br>
																												target registor :@@VRBSCYC */
																			USHORT			coefficient0[10][3];	/**< VRB0 Input Offset<br>
																												value range :[0 - 65535(1.999969482)]<br>
																												target registor :@@VRB0K_0_0-@@VRB0K_9_2		*/
																			USHORT			coefficient1[10][3];	/**< VRB1 Input Offset<br>
																												value range :[0 - 65535(1.999969482)]<br>
																												target registor :@@VRB1K_0_0-@@VRB1K_9_2		*/
																		} TimproVrbCtrl;



														
							公共方法:
							
										Im_PRO_VRB_Start    修改成		impro_srovrb_start
										Im_PRO_VRB_Stop  修改成	impro_srovrb_stop
										Im_PRO_VRB_Ctrl    修改成		impro_srovrb_ctrl
										Im_PRO_VRB_Set_PAEN  修改成	impro_srovrb_set_paen					










								