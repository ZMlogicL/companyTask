修改记录
第一个文件：
原文件名palladium_test_mipi.c                        新建立类文件名 palladiumtestmipia.c
源文件宏定义：原名D_PT_MIPI_CMD_LEN                    PalladiumTestMipiA_D_PT_MIPI_CMD_LEN
         D_PT_MIPI_CLKSTOP_REG_ADDR    				 PalladiumTestMipiA_D_PT_MIPI_CLKSTOP_REG_ADDR
           D_PT_MIPI_PCLK_ON               				 PalladiumTestMipiA_D_PT_MIPI_PCLK_ON
          D_PT_MIPI_HCLK_ON              				 PalladiumTestMipiA_D_PT_MIPI_HCLK_ON	
          D_PT_MIPI_ICLK_ON                				PalladiumTestMipiA_D_PT_MIPI_ICLK_ON

静态变量 ：gCmd_Argv                         				 S_GCMD_ARGV
静态函数：static VOID pt_im_mipi_enable_gic( VOID )        		static VOID  ptImMipiEnableGic( VOID );
          static VOID pt_im_mipi_start_clock( VOID )       		 		static VOID  ptImMipiStartClock( VOID );
static void pt_im_mipi_execute_cmd( int cmd_argc,char* cmd_argv )         static void ptImMipiExecuteCmd( int cmd_argc,char* cmd_argv ) ;


公有函数：VOID Pt_Im_Mipi_Main( VOID )         VOID palladium_test_mipi_a_pt_Im_mipi_main(PalladiumTestMipiA* self);  



第二个文件 
原文件名：palladium_test_interrupt.c                  建立新类： palladiumtestinterrupta.c
																			Palladiumtestinterruptb.c
																			Palladiumtestinterruptc.c
														
														                  并删掉palladium_test_interrupt.h
palladium_test_interrupt_a.c拆分的类           	 Palladiumtestinterrupta.c文件
原公有函数名
VOID Pt_Sgi_Interrupt0(void);
VOID Pt_Sgi_Interrupt1(void);
VOID Pt_Sgi_Interrupt2(void);
VOID Pt_Sgi_Interrupt3(void);
VOID Pt_Sgi_Interrupt4(void);
VOID Pt_Sgi_Interrupt5(void);
VOID Pt_Sgi_Interrupt6(void);
VOID Pt_Sgi_Interrupt7(void);
VOID Pt_Sgi_Interrupt8(void);
VOID Pt_Sgi_Interrupt9(void);
VOID Pt_Sgi_Interrupt10(void);
VOID Pt_Sgi_Interrupt11(void);
VOID Pt_Sgi_Interrupt12(void);
VOID Pt_Sgi_Interrupt13(void);
VOID Pt_Sgi_Interrupt14(void);
VOID Pt_Sgi_Interrupt15(void);
VOID Pt_Ppi_Interrupt0(void);
VOID Pt_Ppi_Interrupt1(void);
VOID Pt_Ppi_Interrupt2(void);
VOID Pt_Ppi_Interrupt3(void);
VOID Pt_Ppi_Interrupt4(void);
VOID Pt_Ppi_Interrupt5(void);
VOID Pt_Ppi_Interrupt6(void);
VOID Pt_Ppi_Interrupt7(void);
VOID Pt_Ppi_Interrupt8(void);
VOID Pt_Ppi_Interrupt9(void);
VOID Pt_Ppi_Interrupt10(void);
VOID Pt_Ppi_Interrupt11(void);
VOID Pt_Ppi_Interrupt12(void);
VOID Pt_Ppi_Interrupt13(void);
VOID Pt_Ppi_Interrupt14(void);
VOID Pt_Ppi_Interrupt15(void);
VOID Pt_CortexA7_Cpu0_Communication_Ch_Receive_Int(void);
VOID Pt_CortexA7_Cpu0_Communication_Ch_Trnsmit_Int(void);
VOID Pt_CortexA7_Cpu1_Communication_Ch_Receive_Int(void);
VOID Pt_CortexA7_Cpu1_Communication_Ch_Trnsmit_Int(void);
VOID Pt_CortexA7_Cpu2_Communication_Ch_Receive_Int(void);
VOID Pt_CortexA7_Cpu2_Communication_Ch_Trnsmit_Int(void);
VOID Pt_CortexA7_Cpu3_Communication_Ch_Receive_Int(void);
VOID Pt_CortexA7_Cpu3_Communication_Ch_Trnsmit_Int(void);
VOID Pt_CortexA7_Cpu0_Crosstrigger_Int(void);
VOID Pt_CortexA7_Cpu1_Crosstrigger_Int(void);
VOID Pt_CortexA7_Cpu2_Crosstrigger_Int(void);
VOID Pt_CortexA7_Cpu3_Crosstrigger_Int(void);
VOID Pt_CortexA7_Cpu0_System_Metrics_Int(void);
VOID Pt_CortexA7_Cpu1_System_Metrics_Int(void);
VOID Pt_CortexA7_Cpu2_System_Metrics_Int(void);
VOID Pt_CortexA7_Cpu3_System_Metrics_Int(void);
VOID Pt_Axi_Transaction_Error_Int(void);
VOID Pt_Snap_Peri_Xdmac_Ch0_Int(void);
VOID Pt_Snap_Peri_Xdmac_Ch1_Int(void);
VOID Pt_Snap_Peri_Xdmac_Ch2_Int(void);
VOID Pt_Snap_Peri_Xdmac_Ch3_Int(void);
VOID Pt_Watchdog_Timer_Int(void);
VOID Pt_Ipcu0_Ch0_Int(void);
VOID Pt_Ipcu0_Ch1_Int(void);
VOID Pt_Ipcu0_Ch2_Int(void);
VOID Pt_Ipcu0_Ch3_Int(void);
VOID Pt_Ipcu0_Ch4_Int(void);
VOID Pt_Ipcu0_Ch5_Int(void);
VOID Pt_Ipcu0_Ch6_Int(void);
VOID Pt_Ipcu0_Ch7_Int(void);
VOID Pt_Ipcu0_Ch8_Int(void);
VOID Pt_Ipcu0_Ch9_Int(void);
VOID Pt_Ipcu0_Ch10_Int(void);
VOID Pt_Ipcu0_Ch11_Int(void);
VOID Pt_Ipcu0_Ch12_Int(void);
VOID Pt_Ipcu0_Ch13_Int(void);
VOID Pt_Ipcu0_Ch14_Int(void);
VOID Pt_Ipcu0_Ch15_Int(void);
VOID Pt_Ipcu1_Ch0_Int(void);
VOID Pt_Ipcu1_Ch1_Int(void);
VOID Pt_Ipcu1_Ch2_Int(void);
VOID Pt_Ipcu1_Ch3_Int(void);
VOID Pt_Ipcu1_Ch4_Int(void);
VOID Pt_Ipcu1_Ch5_Int(void);
VOID Pt_Ipcu1_Ch6_Int(void);
VOID Pt_Ipcu1_Ch7_Int(void);
VOID Pt_Ipcu1_Ch8_Int(void);
VOID Pt_Ipcu1_Ch9_Int(void);
VOID Pt_Ipcu1_Ch10_Int(void);
VOID Pt_Ipcu1_Ch11_Int(void);
VOID Pt_Ipcu1_Ch12_Int(void);
VOID Pt_Ipcu1_Ch13_Int(void);
VOID Pt_Ipcu1_Ch14_Int(void);
VOID Pt_Ipcu1_Ch15_Int(void);
VOID Pt_External_Ch16_Int(void);
VOID Pt_External_Ch17_Int(void);
VOID Pt_External_Ch18_Int(void);
VOID Pt_External_Ch19_Int(void);
VOID Pt_External_Ch20_Int(void);
VOID Pt_External_Ch21_Int(void);
VOID Pt_External_Ch22_Int(void);
VOID Pt_External_Ch23_Int(void);
VOID Pt_External_Ch24_Int(void);
VOID Pt_External_Ch25_Int(void);
VOID Pt_External_Ch26_Int(void);
VOID Pt_External_Ch27_Int(void);
VOID Pt_External_Ch28_Int(void);
VOID Pt_External_Ch29_Int(void);
VOID Pt_External_Ch30_Int(void);
VOID Pt_External_Ch31_Int(void);
VOID Pt_Pmc_Dmac_Adc_Int(void);
VOID Pt_Pmc_Dmac_Receive_Int(void);
VOID Pt_Pmc_Uart_Transmission_Data_Int(void);
VOID Pt_Pmc_Dmac_Qspi_Transmission_Int(void);
VOID Pt_Pmc_Dmac_Qspi_Receive_Int(void);
VOID Pt_Pmc_Uart_Receive_Relation_Int(void);
VOID Pt_Pmc_Uart_Transmission_Relation_Int(void);
VOID Pt_Pmc_Qspi_Int(void);
VOID Pt_Calendar_Alarm_Int(void);
VOID Pt_Pmc_32bit_Timer_Under_Flow_Int(void);
VOID Pt_Adc_Int(void);
VOID Pt_Pmc_I2c_Int(void);
VOID Pt_Pmc_Watchdog_Int(void);
VOID Pt_Temperature_Int(void);
VOID Pt_Pmu_Int(void);
VOID Pt_Pmc_Gpio_Int(void);
VOID Pt_Timer_Ch0_Int(void);
VOID Pt_Timer_Ch1_Int(void);
VOID Pt_Timer_Ch2_Int(void);
VOID Pt_Timer_Ch3_Int(void);
VOID Pt_Timer_Ch4_Int(void);
VOID Pt_Timer_Ch5_Int(void);
VOID Pt_Timer_Ch6_Int(void);
VOID Pt_Timer_Ch7_Int(void);
VOID Pt_Timer_Ch8_Int(void);
VOID Pt_Timer_Ch9_Int(void);
VOID Pt_Timer_Ch10_Int(void);
VOID Pt_Timer_Ch11_Int(void);
VOID Pt_Timer_Ch12_Int(void);
VOID Pt_Timer_Ch13_Int(void);
VOID Pt_I2c_Ch0_Int(void);
VOID Pt_I2c_Ch1_Int(void);
VOID Pt_I2c_Ch2_Int(void);
VOID Pt_Updown_Counter_Ch0_Int(void);
VOID Pt_Updown_Counter_Ch1_Int(void);
VOID Pt_Updown_Counter_Ch2_Int(void);
VOID Pt_Updown_Counter_Ch3_Int(void);
VOID Pt_Updown_Counter_Ch4_Int(void);
VOID Pt_Updown_Counter_Ch5_Int(void);
VOID Pt_Pwm_Ch0_Ch3_Int(void);
VOID Pt_Pwm_Ch4_Ch7_Int(void);

现公有函数名
VOID palladium_test_interrupt_a_pt_sgi_interrupt0(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_sgi_interrupt1(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_sgi_interrupt2(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_sgi_interrupt3(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_sgi_interrupt4(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_sgi_interrupt5(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_sgi_interrupt6(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_sgi_interrupt7(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_sgi_interrupt8(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_sgi_interrupt9(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_sgi_interrupt10(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_sgi_interrupt11(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_sgi_interrupt12(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_sgi_interrupt13(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_sgi_interrupt14(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_sgi_interrupt15(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ppi_interrupt0(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ppi_interrupt1(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ppi_interrupt2(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ppi_interrupt3(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ppi_interrupt4(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ppi_interrupt5(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ppi_interrupt6(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ppi_interrupt7(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ppi_interrupt8(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ppi_interrupt9(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ppi_interrupt10(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ppi_interrupt11(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ppi_interrupt12(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ppi_interrupt13(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ppi_interrupt14(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ppi_interrupt15(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_cortexa7_cpu0_communication_ch_receive_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_cortexa7_cpu0_communication_ch_trnsmit_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_cortexa7_cpu1_communication_ch_receive_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_cortexa7_cpu1_communication_ch_trnsmit_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_cortexa7_cpu2_communication_ch_receive_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_cortexa7_cpu2_communication_ch_trnsmit_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_cortexa7_cpu3_communication_ch_receive_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_Pt_cortexa7_cpu3_communication_ch_trnsmit_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_cortexa7_cpu0_crosstrigger_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_cortexa7_cpu1_crosstrigger_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_cortexa7_cpu2_crosstrigger_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_cortexa7_cpu3_crosstrigger_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_cortexa7_cpu0_system_metrics_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_cortexa7_cpu1_system_metrics_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_cortexa7_cpu2_system_metrics_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_cortexa7_cpu3_system_metrics_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_axi_transaction_error_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_snap_peri_xdmac_ch0_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_snap_peri_xdmac_ch1_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_snap_peri_xdmac_ch2_Int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_snap_peri_xdmac_ch3_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_watchdog_timer_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu0_ch0_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu0_ch1_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu0_ch2_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu0_ch3_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu0_ch4_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu0_ch5_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu0_ch6_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu0_ch7_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu0_ch8_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu0_ch9_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu0_ch10_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu0_ch11_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu0_ch12_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu0_ch13_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu0_ch14_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu0_ch15_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu1_ch0_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu1_ch1_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu1_ch2_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu1_ch3_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu1_ch4_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu1_ch5_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu1_ch6_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu1_ch7_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu1_ch8_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu1_ch9_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu1_ch10_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu1_ch11_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu1_ch12_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu1_ch13_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu1_ch14_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_ipcu1_ch15_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_external_ch16_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_external_ch17_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_external_ch18_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_external_ch19_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_external_ch20_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_external_ch21_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_external_ch22_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_external_ch23_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_external_ch24_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_external_ch25_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_external_ch26_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_external_ch27_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_external_ch28_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_external_ch29_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_external_ch30_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_external_ch31_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_pmc_dmac_adc_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_pmc_dmac_receive_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_pmc_uart_transmission_data_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_pmc_dmac_qspi_transmission_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_pmc_dmac_qspi_receive_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_pmc_uart_receive_relation_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_pmc_uart_transmission_relation_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_pmc_qspi_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_calendar_alarm_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_pmc_32bit_timer_under_flow_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_adc_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_pmc_i2c_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_pmc_watchdog_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_temperature_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_pmu_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_pmc_gpio_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_timer_ch0_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_timer_ch1_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_timer_ch2_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_timer_ch3_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_timer_ch4_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_timer_ch5_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_timer_ch6_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_timer_ch7_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_timer_ch8_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_timer_ch9_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_timer_ch10_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_timer_ch11_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_timer_ch12_Int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_timer_ch13_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_i2c_ch0_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_i2c_ch1_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_i2c_ch2_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_updown_counter_ch0_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_updown_counter_ch1_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_updown_counter_ch2_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_updown_counter_ch3_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_updown_counter_ch4_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_updown_counter_ch5_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_pwm_ch0_ch3_int(PalladiumTestInterruptA* self);
VOID palladium_test_interrupt_a_pt_pwm_ch4_ch7_int(PalladiumTestInterruptA* self);


palladium_test_interrupt_a.c拆分的类           	 Palladiumtestinterruptb.c文件
原公有函数名
VOID Pt_Pwm_Ch8_Ch11_Int(void);
VOID Pt_Pwm_Ch12_Ch15_Int(void);
VOID Pt_Pwm_Ch0_Ch3_Stp_Int(void);
VOID Pt_Pwm_Ch4_Ch7_Stp_Int(void);
VOID Pt_Pwm_Ch8_Ch11_Stp_Int(void);
VOID Pt_Pwm_Ch12_Ch15_Stp_Int(void);
VOID Pt_Audio_If_Ch0_Int(void);
VOID Pt_Audio_If_Ch1_Int(void);
VOID Pt_Audio_If_Ch2_Int(void);
VOID Pt_Audio_If_Ch3_Int(void);
VOID Pt_Audio_If_Ch4_Int(void);
VOID Pt_Audio_If_Ch5_Int(void);
VOID Pt_Peri_Hdmac0_Ch0_Int(void);
VOID Pt_Peri_Hdmac0_Ch1_Int(void);
VOID Pt_Peri_Hdmac0_Ch2_Int(void);
VOID Pt_Peri_Hdmac0_Ch3_Int(void);
VOID Pt_Peri_Hdmac0_Ch4_Int(void);
VOID Pt_Peri_Hdmac0_Ch5_Int(void);
VOID Pt_Peri_Hdmac0_Ch6_Int(void);
VOID Pt_Peri_Hdmac0_Ch7_Int(void);
VOID Pt_Peri_Hdmac1_Ch0_Int(void);
VOID Pt_Peri_Hdmac1_Ch1_Int(void);
VOID Pt_Peri_Hdmac1_Ch2_Int(void);
VOID Pt_Peri_Hdmac1_Ch3_Int(void);
VOID Pt_Peri_Hdmac1_Ch4_Int(void);
VOID Pt_Peri_Hdmac1_Ch5_Int(void);
VOID Pt_Peri_Hdmac1_Ch6_Int(void);
VOID Pt_Peri_Hdmac1_Ch7_Int(void);
VOID Pt_Uart_Ch0_Reception_Int(void);
VOID Pt_Uart_Ch1_Reception_Int(void);
VOID Pt_Uart_Ch2_Reception_Int(void);
VOID Pt_Uart_Ch3_Reception_Int(void);
VOID Pt_Uart_Ch4_Reception_Int(void);
VOID Pt_Uart_Ch5_Reception_Int(void);
VOID Pt_Uart_Ch6_Reception_Int(void);
VOID Pt_Uart_Ch7_Reception_Int(void);
VOID Pt_Uart_Ch0_Transmission_Int(void);
VOID Pt_Uart_Ch1_Transmission_Int(void);
VOID Pt_Uart_Ch2_Transmission_Int(void);
VOID Pt_Uart_Ch3_Transmission_Int(void);
VOID Pt_Uart_Ch4_Transmission_Int(void);
VOID Pt_Uart_Ch5_Transmission_Int(void);
VOID Pt_Uart_Ch6_Transmission_Int(void);
VOID Pt_Uart_Ch7_Transmission_Int(void);
VOID Pt_Spi_Ch0_Int(void);
VOID Pt_Spi_Ch1_Int(void);
VOID Pt_Spi_Ch2_Int(void);
VOID Pt_Pdm_Ch0_Dma0_Int(void);
VOID Pt_Pdm_Ch0_Dma1_Int(void);
VOID Pt_Pdm_Ch0_Fifo_Overflow_Int(void);
VOID Pt_Pdm_Ch1_Dma0_Int(void);
VOID Pt_Pdm_Ch1_Dma1_Int(void);
VOID Pt_Pdm_Ch1_Fifo_Overflow_Int(void);
VOID Pt_Slimbus_Ch0_Int(void);
VOID Pt_Slimbus_Ch1_Int(void);
VOID Pt_Slimbus_Ch2_Int(void);
VOID Pt_Slimbus_Ch3_Int(void);
VOID Pt_Sdramc_Ch0_Int(void);
VOID Pt_Sdramc_Ch1_Int(void);
VOID Pt_Mxic_Unit0_Int(void);
VOID Pt_Mxic_Unit1_Int(void);
VOID Pt_Mxic_Unit2_Int(void);
VOID Pt_Mxic_Unit3_Int(void);
VOID Pt_Mxic_Unit4_Int(void);
VOID Pt_Mxic_Unit5_Int(void);
VOID Pt_Mxic_Unit6_Int(void);
VOID Pt_Sen_Int(void);
VOID Pt_Sen_Vd_Int(void);
VOID Pt_Sen_Hd_Int(void);
VOID Pt_Sensor_If_Macro0_Int(void);
VOID Pt_Sensor_If_Macro1_Int(void);
VOID Pt_Sensor_If_Macro2_Int(void);
VOID Pt_Sensor_If_Macro3_Int(void);
VOID Pt_Sro_Unit1_Int(void);
VOID Pt_Sro_Unit1_Vd_Int(void);
VOID Pt_Sro_Unit1_Hd_Int(void);
VOID Pt_Sro_Unit2_Int(void);
VOID Pt_Sro_Unit2_Vd_Int(void);
VOID Pt_Sro_Unit2_Hd_Int(void);
VOID Pt_B2b_Unit1_Int(void);
VOID Pt_B2b_Unit1_Vd_Int(void);
VOID Pt_B2b_Unit1_Hd_Int(void);
VOID Pt_B2b_Unit2_Int(void);
VOID Pt_B2b_Unit2_Vd_Int(void);
VOID Pt_B2b_Unit2_Hd_Int(void);
VOID Pt_Start_Int(void);
VOID Pt_Pas_Unit2_Int(void);
VOID Pt_Pas_Unit2_Vd_Int(void);

现公有函数名
VOID palladium_test_interrupt_b_pt_pwm_ch8_ch11_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_pwm_ch12_ch15_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_pwm_ch0_ch3_stp_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_pwm_ch4_ch7_stp_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_pwm_ch8_ch11_stp_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_Pwm_ch12_ch15_stp_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_audio_if_ch0_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_audio_if_ch1_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_audio_if_ch2_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_audio_if_ch3_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_audio_if_ch4_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_audio_if_ch5_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_peri_hdmac0_ch0_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_peri_hdmac0_ch1_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_peri_hdmac0_ch2_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_peri_hdmac0_ch3_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_peri_hdmac0_ch4_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_peri_hdmac0_ch5_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_peri_hdmac0_ch6_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_peri_hdmac0_ch7_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_peri_hdmac1_ch0_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_peri_hdmac1_ch1_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_peri_hdmac1_ch2_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_peri_hdmac1_ch3_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_peri_hdmac1_ch4_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_peri_hdmac1_ch5_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_peri_hdmac1_ch6_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_peri_hdmac1_ch7_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_uart_ch0_reception_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_uart_ch1_reception_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_uart_ch2_reception_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_uart_ch3_reception_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_uart_ch4_reception_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_uart_ch5_reception_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_uart_ch6_reception_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_uart_ch7_reception_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_uart_ch0_transmission_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_uart_ch1_transmission_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_uart_ch2_transmission_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_uart_ch3_transmission_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_uart_ch4_transmission_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_uart_ch5_transmission_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_uart_ch6_transmission_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_uart_ch7_transmission_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_spi_ch0_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_spi_ch1_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_spi_ch2_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_pdm_ch0_dma0_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_pdm_ch0_dma1_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_pdm_ch0_fifo_overflow_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_pdm_ch1_dma0_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_pdm_ch1_dma1_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_pdm_ch1_fifo_overflow_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_slimbus_ch0_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_slimbus_ch1_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_slimbus_ch2_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_slimbus_ch3_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_sdramc_ch0_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_sdramc_ch1_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_mxic_unit0_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_mxic_unit1_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_mxic_unit2_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_mxic_unit3_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_mxic_unit4_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_mxic_unit5_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_mxic_unit6_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_sen_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_sen_vd_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_sen_hd_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_sensor_if_macro0_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_sensor_if_macro1_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_sensor_if_macro2_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_sensor_if_macro3_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_sro_unit1_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_sro_unit1_vd_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_sro_unit1_hd_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_sro_unit2_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_sro_unit2_vd_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_sro_unit2_hd_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_b2b_unit1_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_b2b_unit1_vd_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_b2b_unit1_hd_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_b2b_unit2_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_b2b_unit2_vd_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_b2b_unit2_hd_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_start_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_pas_unit2_int(PalladiumTestInterruptB* self);
VOID palladium_test_interrupt_b_pt_pas_unit2_vd_int(PalladiumTestInterruptB* self);



palladium_test_interrupt_a.c拆分的类           	 Palladiumtestinterruptc.c文件
原公有函数名

VOID Pt_Pas_Unit2_Hd_Int(void);
VOID Pt_B2r_Unit1_Int(void);
VOID Pt_B2r_Unit2_Int(void);
VOID Pt_Ltm_Unit1_Int(void);
VOID Pt_Ltm_Unit2_Int(void);
VOID Pt_R2y_Unit1_Int(void);
VOID Pt_R2y_Unit2_Int(void);
VOID Pt_Cnr_Unit1_Int(void);
VOID Pt_Cnr_Unit2_Int(void);
VOID Pt_Iip_Int(void);
VOID Pt_Shdr_Int(void);
VOID Pt_Shdr_Line_Int(void);
VOID Pt_Me_Int(void);
VOID Pt_Graphics_Int(void);
VOID Pt_Jpeg_Int(void);
VOID Pt_Raw_Int(void);
VOID Pt_Ipu_Int(void);
VOID Pt_Ela_Unit_Int(void);
VOID Pt_Xch_Int(void);
VOID Pt_Fpt_Unit0_Int(void);
VOID Pt_Fpt_Unit1_Int(void);
VOID Pt_Disp_Lcd_Int(void);
VOID Pt_Disp_Hdmi_Int(void);
VOID Pt_Disp_Mipi_Dsi_Int(void);
VOID Pt_Mipi_Dsi_Tx_Int(void);
VOID Pt_Disp_Dwch_Int(void);
VOID Pt_Rdma_Int(void);
VOID Pt_Hdmi_Master_Int(void);
VOID Pt_Hdmi_Cec_Int(void);
VOID Pt_BMH_Unit0_Int(void);
VOID Pt_BMH_Unit1_Int(void);
VOID Pt_Ribery_Rbr_Int(void);
VOID Pt_Ribery_Rwdt_Int(void);
VOID Pt_Interprocessor0_Int(void);
VOID Pt_Interprocessor1_Int(void);
VOID Pt_Interprocessor2_Int(void);
VOID Pt_Interprocessor3_Int(void);
VOID Pt_Dsp_Peripheral_Unit_Ipcu0_Int(void);
VOID Pt_Dsp_Peripheral_Unit_Ipcu1_Int(void);
VOID Pt_Dsp_Peripheral_Unit_Ipcu2_Int(void);
VOID Pt_Dsp_Peripheral_Unit_Ipcu3_Int(void);
VOID Pt_Dsp_Debug_Int(void);
VOID Pt_Nand_Flash_Int(void);
VOID Pt_Pcie_Ch0_Msi_Int(void);
VOID Pt_Pcie_Ch0_System_Error_Int(void);
VOID Pt_Pcie_Ch0_Intx_Int(void);
VOID Pt_Pcie_Ch0_Core_Int(void);
VOID Pt_Pcie_Ch0_DMA_Int(void);
VOID Pt_Pcie_Ch1_Msi_Int(void);
VOID Pt_Pcie_Ch1_System_Error_Int(void);
VOID Pt_Pcie_Ch1_Intx_Int(void);
VOID Pt_Pcie_Ch1_Core_Int(void);
VOID Pt_Pcie_Ch1_DMA_Int(void);
VOID Pt_Exs_Xdmac_Ch0_Int(void);
VOID Pt_Exs_Xdmac_Ch1_Int(void);
VOID Pt_Exs_Xdmac_Ch2_Int(void);
VOID Pt_Exs_Xdmac_Ch3_Int(void);
VOID Pt_Exs_Hdmac_Ch0_Int(void);
VOID Pt_Exs_Hdmac_Ch1_Int(void);
VOID Pt_Exs_Hdmac_Ch2_Int(void);
VOID Pt_Exs_Hdmac_Ch3_Int(void);
VOID Pt_Usb20_Hdc_Int(void);
VOID Pt_Usb20_Host_Ehci_Int(void);
VOID Pt_Usb20_Host_Ohci_Int(void);
VOID Pt_Usb30_Int(void);
VOID Pt_Output_Signal1_Int(void);
VOID Pt_Output_Signal2_Int(void);
VOID Pt_Pme_Sd_Card1_Int(void);
VOID Pt_Pme_F_Sdh30_Uhs1_Int(void);
VOID Pt_Output_Signal3_Int(void);
VOID Pt_F_Sdh30_Uhs1_Int(void);
VOID Pt_F_Sdh40_Uhs2_Int(void);
VOID Pt_Pme_F_Sdh40_Uhs2_Int(void);
VOID Pt_Output_Signal4_Int(void);
VOID Pt_Output_Signal5_Int(void);
VOID Pt_Pme_Sd_Card2_Int(void);
VOID Pt_Output_Signal6_Int(void);
VOID Pt_Wakeup_Signal_Int(void);
VOID Pt_Relc_Int(void);
VOID Pt_Netsec_A_Int(void);
VOID Pt_Netsec_B_Int(void);
VOID Pt_Output_Signal7_Int(void);

现公有函数名
VOID palladium_test_interrupt_c_pt_pas_unit2_hd_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_b2r_unit1_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_b2r_unit2_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_ltm_unit1_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_ltm_unit2_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_r2y_unit1_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_r2y_unit2_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_cnr_unit1_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_cnr_unit2_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_iip_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_shdr_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_shdr_line_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_me_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_graphics_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_jpeg_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_raw_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_ipu_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_ela_unit_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_xch_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_fpt_unit0_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_fpt_unit1_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_disp_lcd_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_disp_hdmi_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_disp_mipi_dsi_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_mipi_dsi_tx_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_disp_dwch_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_rdma_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_hdmi_master_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_hdmi_cec_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_bmh_unit0_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_bmh_unit1_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_ribery_rbr_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_ribery_rwdt_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_interprocessor0_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_interprocessor1_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_interprocessor2_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_interprocessor3_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_dsp_peripheral_unit_ipcu0_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_dsp_peripheral_unit_ipcu1_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_dsp_peripheral_unit_ipcu2_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_dsp_peripheral_unit_ipcu3_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_dsp_debug_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_nand_flash_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_pcie_ch0_msi_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_pcie_ch0_system_error_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_pcie_ch0_intx_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_pcie_ch0_core_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_pcie_ch0_dma_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_pcie_ch1_msi_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_pcie_ch1_system_error_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_pcie_ch1_intx_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_pcie_ch1_core_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_pcie_ch1_dma_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_exs_xdmac_ch0_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_exs_xdmac_ch1_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_exs_xdmac_ch2_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_exs_xdmac_ch3_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_exs_hdmac_ch0_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_exs_hdmac_ch1_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_exs_hdmac_ch2_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_exs_hdmac_ch3_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_usb20_hdc_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_usb20_host_ehci_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_usb20_host_ohci_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_usb30_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_output_signal1_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_output_signal2_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_pme_sd_card1_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_pme_f_sdh30_uhs1_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_output_signal3_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_f_sdh30_uhs1_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_f_sdh40_uhs2_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_pme_f_sdh40_uhs2_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_output_signal4_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_output_signal5_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_pme_sd_card2_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_output_signal6_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_wakeup_signal_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_relc_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_netsec_a_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_netsec_b_int(PalladiumTestInterruptC* self);
VOID palladium_test_interrupt_c_pt_output_signal7_int(PalladiumTestInterruptC* self);
																			

第三个文件
原文件名：fj_common.c                             fjcommon.c
  原公有函数：
  				VOID FJ_Common_Set_Base_DateTime( T_FJ_COMMON_DATE_TIME* date_time );
           VOID FJ_Common_Get_Base_DateTime( T_FJ_COMMON_DATE_TIME* date_time );
//更改后：
VOID 	fj_common_set_base_datetime(FjCommon* self, 	 T_FJ_COMMON_DATE_TIME*date_time );
VOID     fj_common_get_base_datetime(FjCommon* self,T_FJ_COMMON_DATE_TIME* date_time );


第四个文件
原文件名：fj_iq.c                                         fjiq.c
公有函数：
FJ_ERR_CODE	FJ_IQ_Set_Next_IsoSpeed_Idx_Sen( UCHAR sen_id, FLOAT isoIdx );
FJ_ERR_CODE	FJ_IQ_Get_IsoSpeed_Idx_Sen( UCHAR sen_id, FLOAT* curr_iso_idx, FLOAT* next_iso_idx );
#if defined(CO_IQBIN_GENERAL)	// --- REMOVE_IQBIN_GENERAL BEGIN ---
FJ_ERR_CODE	FJ_IQ_Set_Next_ColorTemp_Idx_Sen( UCHAR sen_id, FLOAT colorTempIdx );
FJ_ERR_CODE	FJ_IQ_Get_ColorTemp_Idx_Sen( UCHAR sen_id, FLOAT* curr_color_temp_idx, FLOAT* next_color_temp_idx );
FJ_ERR_CODE	FJ_IQ_Set_Next_ExposureValue_Idx_Sen( UCHAR sen_id, FLOAT exp_val_idx );
FJ_ERR_CODE	FJ_IQ_Get_ExposureValue_Idx_Sen( UCHAR sen_id, FLOAT* curr_exp_val_idx, FLOAT* next_exp_val_idx );
FJ_ERR_CODE	FJ_IQ_Set_Next_TimeValue_Idx_Sen( UCHAR sen_id, FLOAT time_val_idx );
FJ_ERR_CODE	FJ_IQ_Get_TimeValue_Idx_Sen( UCHAR sen_id, FLOAT* curr_time_val_idx, FLOAT* next_time_val_idx );
#endif // CO_IQBIN_GENERAL  --- REMOVE_IQBIN_GENERAL END ---

FJ_ERR_CODE	FJ_IQ_Update_Current_Sen( UCHAR sen_id );
FJ_ERR_CODE	FJ_IQ_Set_Next_IsoSpeed_Idx( UCHAR demosaic_id, FLOAT isoIdx );
FJ_ERR_CODE	FJ_IQ_Get_IsoSpeed_Idx( UCHAR demosaic_id, FLOAT* curr_iso_idx, FLOAT* next_iso_idx );

#if defined(CO_IQBIN_GENERAL)	// --- REMOVE_IQBIN_GENERAL BEGIN ---
FJ_ERR_CODE	FJ_IQ_Set_Next_OptZoom_Idx( UCHAR demosaic_id, UINT32 opt_zoom_idx );
FJ_ERR_CODE	FJ_IQ_Get_OptZoom_Idx( UCHAR demosaic_id, UINT32* curr_opt_zoom_idx, UINT32* next_opt_zoom_idx );
FJ_ERR_CODE	FJ_IQ_Set_Next_LensType_Idx( UCHAR demosaic_id, UINT32 lensTypeIdx );
FJ_ERR_CODE	FJ_IQ_Get_LensType_Idx( UCHAR demosaic_id, UINT32* curr_lens_type_idx, UINT32* next_lens_type_idx );
FJ_ERR_CODE	FJ_IQ_Set_Next_ColorTemp_Idx( UCHAR demosaic_id, FLOAT colorTempIdx );
FJ_ERR_CODE	FJ_IQ_Get_ColorTemp_Idx( UCHAR demosaic_id, FLOAT* curr_color_temp_idx, FLOAT* next_color_temp_idx );
FJ_ERR_CODE	FJ_IQ_Set_Next_ExposureValue_Idx( UCHAR demosaic_id, FLOAT exp_val_idx );
FJ_ERR_CODE	FJ_IQ_Get_ExposureValue_Idx( UCHAR demosaic_id, FLOAT* curr_exp_val_idx, FLOAT* next_exp_val_idx );
FJ_ERR_CODE	FJ_IQ_Set_Next_TimeValue_Idx( UCHAR demosaic_id, FLOAT time_val_idx );
FJ_ERR_CODE	FJ_IQ_Get_TimeValue_Idx( UCHAR demosaic_id, FLOAT* curr_time_val_idx, FLOAT* next_time_val_idx );
#endif // CO_IQBIN_xxxx  --- REMOVE_IQBIN_GENERAL END ---

FJ_ERR_CODE	FJ_IQ_Update_Current( UCHAR demosaic_id );
FJ_ERR_CODE FJ_IQ_Set_IQ_FilePath_common( CHAR* param_file_path );
VOID FJ_IQ_CalibrationOnOffBadpixCompensation( UCHAR demosaic_id, BOOL b_onoff );
FJ_ERR_CODE FJ_IQ_OnOff_FrameShading( UCHAR demosaic_id, BOOL onoff );
FJ_ERR_CODE FJ_IQ_Flip_FrameShadingTable( BOOL vflip_on_off );
FJ_ERR_CODE FJ_IQ_OnOff_FSHDL0( UCHAR demosaic_id, BOOL onoff );
FJ_ERR_CODE FJ_IQ_Flip_CagTable( BOOL vflip_on_off );
FJ_ERR_CODE FJ_IQ_Tbl_Set_Force_Reload( VOID );

fjiq.h更改后公有函数名

FJ_ERR_CODE			fj_iq_set_next_isospeed_idx_sen(FjIq* self, UCHAR sen_id, FLOAT isoIdx );
FJ_ERR_CODE			fj_iq_get_isospeed_idx_sen(FjIq* self, UCHAR sen_id, FLOAT* curr_iso_idx, FLOAT* next_iso_idx );
#if defined(CO_IQBIN_GENERAL)	// --- REMOVE_IQBIN_GENERAL BEGIN ---
FJ_ERR_CODE			fj_iq_set_next_colortemp_idx_sen(FjIq* self, UCHAR sen_id, FLOAT colorTempIdx );
FJ_ERR_CODE			fj_iq_get_colortemp_idx_sen(FjIq* self, UCHAR sen_id, FLOAT* curr_color_temp_idx, FLOAT* next_color_temp_idx );
FJ_ERR_CODE			fj_iq_set_next_exposurevalue_idx_sen(FjIq* self,  UCHAR sen_id, FLOAT exp_val_idx );
FJ_ERR_CODE			fj_iq_get_exposurevalue_idx_sen( FjIq* self, UCHAR sen_id, FLOAT* curr_exp_val_idx, FLOAT* next_exp_val_idx );
FJ_ERR_CODE			fj_iq_set_next_timevalue_idx_sen(FjIq* self,  UCHAR sen_id, FLOAT time_val_idx );
FJ_ERR_CODE			fj_iq_get_timevalue_idx_sen( FjIq* self, UCHAR sen_id, FLOAT* curr_time_val_idx, FLOAT* next_time_val_idx );
#endif // CO_IQBIN_GENERAL  --- REMOVE_IQBIN_GENERAL END ---

FJ_ERR_CODE			fj_iq_update_current_sen(FjIq* self,  UCHAR sen_id );
FJ_ERR_CODE			fj_iq_set_next_isospeed_idx( FjIq* self, UCHAR demosaic_id, FLOAT isoIdx );
FJ_ERR_CODE			fj_iq_get_isospeed_idx(FjIq* self,  UCHAR demosaic_id, FLOAT* curr_iso_idx, FLOAT* next_iso_idx );

#if defined(CO_IQBIN_GENERAL)	// --- REMOVE_IQBIN_GENERAL BEGIN ---
FJ_ERR_CODE			fj_iq_set_next_optzoom_idx(FjIq* self,  UCHAR demosaic_id, UINT32 opt_zoom_idx );
FJ_ERR_CODE			fj_iq_get_optzoom_idx(FjIq* self,  UCHAR demosaic_id, UINT32* curr_opt_zoom_idx, UINT32* next_opt_zoom_idx );
FJ_ERR_CODE			fj_iq_set_next_lenstype_idx( FjIq* self, UCHAR demosaic_id, UINT32 lensTypeIdx );
FJ_ERR_CODE			fj_iq_get_lenstype_idx( FjIq* self,  UCHAR demosaic_id, UINT32* curr_lens_type_idx, UINT32* next_lens_type_idx );
FJ_ERR_CODE			fj_iq_set_next_colortemp_idx( FjIq* self, UCHAR demosaic_id, FLOAT colorTempIdx );
FJ_ERR_CODE			fj_iq_get_colortemp_idx(  FjIq* self, UCHAR demosaic_id, FLOAT* curr_color_temp_idx, FLOAT* next_color_temp_idx );
FJ_ERR_CODE			fj_iq_set_next_exposurevalue_idx( FjIq* self,  UCHAR demosaic_id, FLOAT exp_val_idx );
FJ_ERR_CODE			fj_iq_get_exposurevalue_idx( FjIq* self, UCHAR demosaic_id, FLOAT* curr_exp_val_idx, FLOAT* next_exp_val_idx );
FJ_ERR_CODE			fj_iq_set_next_timevalue_idx( FjIq* self,  UCHAR demosaic_id, FLOAT time_val_idx );
FJ_ERR_CODE			fj_iq_get_timevalue_idx( FjIq* self, UCHAR demosaic_id, FLOAT* curr_time_val_idx, FLOAT* next_time_val_idx );
#endif // CO_IQBIN_xxxx  --- REMOVE_IQBIN_GENERAL END ---

FJ_ERR_CODE			fj_iq_update_current( FjIq* self,  UCHAR demosaic_id );
FJ_ERR_CODE 			fj_iq_set_iq_filepath_common( FjIq* self, CHAR* param_file_path );
VOID 						fj_iq_calibrationonoffbadpixcompensation( FjIq* self, UCHAR demosaic_id, BOOL b_onoff );
FJ_ERR_CODE	 		fj_iq_onoff_frameshading( FjIq* self, UCHAR demosaic_id, BOOL onoff );
FJ_ERR_CODE 			fj_iq_flip_frameshadingtable( FjIq* self, BOOL vflip_on_off );
FJ_ERR_CODE 			fj_iq_onoff_fshdl0(  FjIq* self, UCHAR demosaic_id, BOOL onoff );
FJ_ERR_CODE 			fj_iq_flip_cagtable( FjIq* self, BOOL vflip_on_off );
FJ_ERR_CODE 			fj_iq_tbl_set_force_reload(FjIq* self);

宏定义 原名
#define MODE_CHECK_ALL		(D_BF_MODE_VIEW_CODE|D_BF_MODE_OTHER_CODE|D_BF_MODE_CATEGORY_ALL)
#define MODE_CHECK_CALIB	(D_BF_MODE_VIEW_CODE|D_BF_MODE_OTHER_CODE|D_BF_MODE_CATEGORY_CALIBRATION)
更改后
#define FjIq_MODE_CHECK_ALL		(D_BF_MODE_VIEW_CODE|D_BF_MODE_OTHER_CODE|D_BF_MODE_CATEGORY_ALL)
#define FjIq_MODE_CHECK_CALIB	(D_BF_MODE_VIEW_CODE|D_BF_MODE_OTHER_CODE|D_BF_MODE_CATEGORY_CALIBRATION)



Fjiq.h

枚举
修改前 typedef enum     E_IQ_STILL_MODE;               
{                                                                                     
	E_IQ_STILL_MODE_ERR = -1,		/**< API is not prepared. */
	E_IQ_STILL_MODE_IDLE = -1,		/**< API is not prepared. */
	E_IQ_STILL_MODE_TOP = 0,		/**< Top(minimum) value */
	E_IQ_STILL_MODE_0 = 0,			/**< mode0 */
	E_IQ_STILL_MODE_1,				/**< mode1 */
	E_IQ_STILL_MODE_2,				/**< mode2 */
	E_IQ_STILL_MODE_3,				/**< mode3 */
	E_IQ_STILL_MODE_4,				/**< mode4 */
	E_IQ_STILL_MODE_5,				/**< mode5 */
	E_IQ_STILL_MODE_6,				/**< mode6 */
	E_IQ_STILL_MODE_7,				/**< mode7 */
	E_IQ_STILL_MODE_8,				/**< mode8 */
	E_IQ_STILL_MODE_MAX
	}					
修改后  typedef enum  	      EIqStillMode		
{
FjIq_E_IQ_STILL_MODE_ERR = -1,		/**< API is not prepared. */
	FjIq_E_IQ_STILL_MODE_IDLE = -1,		/**< API is not prepared. */
	FjIq_E_IQ_STILL_MODE_TOP = 0,		/**< Top(minimum) value */
	FjIq_E_IQ_STILL_MODE_0 = 0,			/**< mode0 */
	FjIq_E_IQ_STILL_MODE_1,				/**< mode1 */
	FjIq_E_IQ_STILL_MODE_2,				/**< mode2 */
	FjIq_E_IQ_STILL_MODE_3,				/**< mode3 */
	FjIq_E_IQ_STILL_MODE_4,				/**< mode4 */
	FjIq_E_IQ_STILL_MODE_5,				/**< mode5 */
	FjIq_E_IQ_STILL_MODE_6,				/**< mode6 */
	FjIq_E_IQ_STILL_MODE_7,				/**< mode7 */
	FjIq_E_IQ_STILL_MODE_8,				/**< mode8 */
	FjIq_E_IQ_STILL_MODE_MAX
}
																
修改前 E_IQ_SCENE       
    {
    E_IQ_SCENE_ERR = -1,	/**< API is not prepared. */
	E_IQ_SCENE_SYS_DEFAULT = -2,
	E_IQ_SCENE_TOP = 0,		/**< TOP of EIqScene */
	E_IQ_SCENE_0 = 0,		/**< Scene No 0 */
	E_IQ_SCENE_1,			/**< Scene No 1 */
	E_IQ_SCENE_2,			/**< Scene No 2 */
	E_IQ_SCENE_3,			/**< Scene No 3 */
	E_IQ_SCENE_4,			/**< Scene No 4 */
	E_IQ_SCENE_5,			/**< Scene No 5 */
	E_IQ_SCENE_6,			/**< Scene No 6 */
	E_IQ_SCENE_7,			/**< Scene No 7 */
	E_IQ_SCENE_8,			/**< Scene No 8 */
	E_IQ_SCENE_9,			/**< Scene No 9 */
	E_IQ_SCENE_10,			/**< Scene No 10 */
	E_IQ_SCENE_11,			/**< Scene No 11 */
#if defined(CO_IQBIN_GENERAL) // --- REMOVE_IQBIN_GENERAL BEGIN ---
	E_IQ_SCENE_12,			/**< Scene No 12 */
	E_IQ_SCENE_13,			/**< Scene No 13 */
	E_IQ_SCENE_14,			/**< Scene No 14 */
	E_IQ_SCENE_15,			/**< Scene No 15 */
#endif // CO_IQBIN_GENERAL  --- REMOVE_IQBIN_GENERAL END ---
	E_IQ_SCENE_MAX
    }

     修改后     EIqScene
     {
     FjIq_E_IQ_SCENE_ERR = -1,	/**< API is not prepared. */
	FjIq_E_IQ_SCENE_SYS_DEFAULT = -2,
	FjIq_E_IQ_SCENE_TOP = 0,		/**< TOP of EIqScene */
	FjIq_E_IQ_SCENE_0 = 0,		/**< Scene No 0 */
	FjIq_E_IQ_SCENE_1,			/**< Scene No 1 */
	FjIq_E_IQ_SCENE_2,			/**< Scene No 2 */
	FjIq_E_IQ_SCENE_3,			/**< Scene No 3 */
	FjIq_E_IQ_SCENE_4,			/**< Scene No 4 */
	FjIq_E_IQ_SCENE_5,			/**< Scene No 5 */
	FjIq_E_IQ_SCENE_6,			/**< Scene No 6 */
	FjIq_E_IQ_SCENE_7,			/**< Scene No 7 */
	FjIq_E_IQ_SCENE_8,			/**< Scene No 8 */
	FjIq_E_IQ_SCENE_9,			/**< Scene No 9 */
	FjIq_E_IQ_SCENE_10,			/**< Scene No 10 */
	FjIq_E_IQ_SCENE_11,			/**< Scene No 11 */
#if defined(CO_IQBIN_GENERAL) // --- REMOVE_IQBIN_GENERAL BEGIN ---
	FjIq_E_IQ_SCENE_12,			/**< Scene No 12 */
	FjIq_E_IQ_SCENE_13,			/**< Scene No 13 */
	FjIq_E_IQ_SCENE_14,			/**< Scene No 14 */
	FjIq_E_IQ_SCENE_15,			/**< Scene No 15 */
#endif // CO_IQBIN_GENERAL  --- REMOVE_IQBIN_GENERAL END ---
	FjIq_E_IQ_SCENE_MAX
     }
     
修改前   E_FJ_IQ_BIN_TYPE	
{
E_FJ_IQ_BIN_TYPE_TOP = FjIq_E_IQ_STILL_MODE_TOP,			/**< Top(minimum) value */
	E_FJ_IQ_BIN_TYPE__0  = FjIq_E_IQ_STILL_MODE_0,			/**< Mode0 parameter */
	E_FJ_IQ_BIN_TYPE__1  = FjIq_E_IQ_STILL_MODE_1,			/**< Mode1 parameter */
	E_FJ_IQ_BIN_TYPE__2  = FjIq_E_IQ_STILL_MODE_2,			/**< Mode2 parameter */
	E_FJ_IQ_BIN_TYPE__3  = FjIq_E_IQ_STILL_MODE_3,			/**< Mode3 parameter */
	E_FJ_IQ_BIN_TYPE__4  = FjIq_E_IQ_STILL_MODE_4,			/**< Mode4 parameter */
	E_FJ_IQ_BIN_TYPE__5  = FjIq_E_IQ_STILL_MODE_5,			/**< Mode5 parameter */
	E_FJ_IQ_BIN_TYPE__6  = FjIq_E_IQ_STILL_MODE_6,			/**< Mode6 parameter */
	E_FJ_IQ_BIN_TYPE__7  = FjIq_E_IQ_STILL_MODE_7,			/**< Mode7 parameter */
	E_FJ_IQ_BIN_TYPE__8  = FjIq_E_IQ_STILL_MODE_8,			/**< Mode8 parameter */
	E_FJ_IQ_BIN_TYPE_COMMON,											/**< Common parameter */
	E_FJ_IQ_BIN_TYPE_MAX
}	
		      						
修改后			EfjIqBinType
{
FjIq_E_FJ_IQ_BIN_TYPE_TOP = FjIq_E_IQ_STILL_MODE_TOP,			/**< Top(minimum) value */
	FjIq_E_FJ_IQ_BIN_TYPE__0  = FjIq_E_IQ_STILL_MODE_0,			/**< Mode0 parameter */
	FjIq_E_FJ_IQ_BIN_TYPE__1  = FjIq_E_IQ_STILL_MODE_1,			/**< Mode1 parameter */
	FjIq_E_FJ_IQ_BIN_TYPE__2  = FjIq_E_IQ_STILL_MODE_2,			/**< Mode2 parameter */
	FjIq_E_FJ_IQ_BIN_TYPE__3  = FjIq_E_IQ_STILL_MODE_3,			/**< Mode3 parameter */
	FjIq_E_FJ_IQ_BIN_TYPE__4  = FjIq_E_IQ_STILL_MODE_4,			/**< Mode4 parameter */
	FjIq_E_FJ_IQ_BIN_TYPE__5  = FjIq_E_IQ_STILL_MODE_5,			/**< Mode5 parameter */
	FjIq_E_FJ_IQ_BIN_TYPE__6  = FjIq_E_IQ_STILL_MODE_6,			/**< Mode6 parameter */
	FjIq_E_FJ_IQ_BIN_TYPE__7  = FjIq_E_IQ_STILL_MODE_7,			/**< Mode7 parameter */
	FjIq_E_FJ_IQ_BIN_TYPE__8  = FjIq_E_IQ_STILL_MODE_8,			/**< Mode8 parameter */
	FjIq_E_FJ_IQ_BIN_TYPE_COMMON,											/**< Common parameter */
	FjIq_E_FJ_IQ_BIN_TYPE_MAX
}
修改前  E_IQ_ENABLE  
 {
 E_IQ_ENABLE_OFF,	/**< Off */
	E_IQ_ENABLE_ON		/**< On */
 }    		    
                                 		    
  修改后  EIqEnable
  {
  FjIq_E_IQ_ENABLE_OFF,	/**< Off */
	FjIq_E_IQ_ENABLE_ON		/**< On */
  }
  
修改前  E_IQ_DETECT_ALGORITHM  
{
E_IQ_DETECT_ALGO_0,			/**< Algorithm 0 */
	E_IQ_DETECT_ALGO_1,			/**< Algorithm 1 */
	E_IQ_DETECT_ALGO_2,			/**< Algorithm 2 */
	E_IQ_DETECT_ALGO_3,			/**< Algorithm 3 */
	E_IQ_DETECT_ALGO_MAX
}
修改后  EIqDetectAlgorithm
 {
    FjIq_E_IQ_DETECT_ALGO_0,			/**< Algorithm 0 */
	FjIq_E_IQ_DETECT_ALGO_1,			/**< Algorithm 1 */
	FjIq_E_IQ_DETECT_ALGO_2,			/**< Algorithm 2 */
	FjIq_E_IQ_DETECT_ALGO_3,			/**< Algorithm 3 */
	FjIq_E_IQ_DETECT_ALGO_MAX
 }
修改前   FJ_IQ_BADPIX_LINE 	
{
FJ_IQ_BADPIX_LINE_EVEN = 0,						/**< Even line. */
	FJ_IQ_BADPIX_LINE_ODD,							/**< Odd line. */
	FJ_IQ_BADPIX_LINE_MAX,
}
修改后   FjIqBadpixLine
{
FjIq_FJ_IQ_BADPIX_LINE_EVEN = 0,						/**< Even line. */
	FjIq_FJ_IQ_BADPIX_LINE_ODD,							/**< Odd line. */
	FjIq_FJ_IQ_BADPIX_LINE_MAX,	
}
修改前  FJ_IQ_BADPIX_COLUM 
{
FJ_IQ_BADPIX_COLUM_EVEN = 0,					/**< Even column. */
	FJ_IQ_BADPIX_COLUM_ODD,							/**< Odd column. */
	FJ_IQ_BADPIX_COLUM_MAX,	
}

修改后  	FjIqBadpixColum
{
FjIq_FJ_IQ_BADPIX_COLUM_EVEN = 0,					/**< Even column. */
	FjIq_FJ_IQ_BADPIX_COLUM_ODD,							/**< Odd column. */
	FjIq_FJ_IQ_BADPIX_COLUM_MAX,			
}


结构体  
修改前  typedef struct  T_FJ_IQ_SEL_INFO
{
EIqStillMode	still_mode;			/**< Still mode. (Select IQ binary.) */
	FLOAT			iso_idx;			/**< ISO number. (IQ parameter select index in IQ binary. 0.0~5.0(ISO100~ISO3200)) */
	EIqScene		scene_no;			/**< Scene number. (IQ parameter select index in IQ binary.) */
	EIqScene		scene_no_for_sharpness;	/**< Scene number. (IQ parameter select index in IQ binary.) */
	EIqScene		scene_no_for_edge;		/**< Scene number. (IQ parameter select index in IQ binary.) */
#if defined(CO_IQBIN_GENERAL)	// --- REMOVE_IQBIN_GENERAL BEGIN ---
	UINT32			ozoom_idx;			/**< Optical zoom index. (IQ parameter select index in IQ binary. 0~9) */
	UINT32			lens_type_idx;		/**< Lens type index. (IQ parameter select index in IQ binary. 0~3) */
	FLOAT			color_temp_idx;		/**< Color temperature. (IQ parameter select index in IQ binary. 0.0~12.0(2000~10000)) */
	FLOAT			exposure_value_idx;	/**< Exposure value. (IQ parameter select index in IQ binary. 0.0~22.0(-5.0~16.0)) */
	FLOAT			time_value_idx;		/**< Time value. (IQ parameter select index in IQ binary. 0.0~18.0(-5.0~12.0)) */
#endif // CO_IQBIN_xxxx  --- REMOVE_IQBIN_GENERAL END ---
}
修改后  FjIqSelInfo
{
EIqStillMode	stillMode;			/**< Still mode. (Select IQ binary.) */
	FLOAT			isoIdx;			/**< ISO number. (IQ parameter select index in IQ binary. 0.0~5.0(ISO100~ISO3200)) */
	EIqScene		sceneNo;			/**< Scene number. (IQ parameter select index in IQ binary.) */
	EIqScene		sceneNoForSharpness;	/**< Scene number. (IQ parameter select index in IQ binary.) */
	EIqScene		sceneNoForEdge;		/**< Scene number. (IQ parameter select index in IQ binary.) */
#if defined(CO_IQBIN_GENERAL)	// --- REMOVE_IQBIN_GENERAL BEGIN ---
	UINT32			ozoomIdx;			/**< Optical zoom index. (IQ parameter select index in IQ binary. 0~9) */
	UINT32			lensTypeIdx;		/**< Lens type index. (IQ parameter select index in IQ binary. 0~3) */
	FLOAT			colorTempIdx;		/**< Color temperature. (IQ parameter select index in IQ binary. 0.0~12.0(2000~10000)) */
	FLOAT			exposureValueIdx;	/**< Exposure value. (IQ parameter select index in IQ binary. 0.0~22.0(-5.0~16.0)) */
	FLOAT			timeValueIdx;		/**< Time value. (IQ parameter select index in IQ binary. 0.0~18.0(-5.0~12.0)) */
#endif // CO_IQBIN_xxxx  --- REMOVE_IQBIN_GENERAL END ---
}

修改前  T_IQ_PRE_CNR_CC0_CTRL					
{
UCHAR				posi_dec;			/**< Position of decimals			*/ // @CCCTL
	USHORT				cc_matrix[3][3];	/**< CC-Matrix coefficient 3x3		*/ // @CC00~CC22
}

修改后 PreCnrCcoCtrl
{
UCHAR				posiDec;			/**< Position of decimals			*/ // @CCCTL
	USHORT				ccMatrix[3][3];	/**< CC-Matrix coefficient 3x3		*/ // @CC00~CC22
}
                	
T_FJ_IQ_GAMMA_TBL						FjIqGammaTbl

修改前 T_FJ_IQ_GAMMA	
{
FjIqGammaTbl	rgb_tbl;	/**< RGB table. */
	FjIqGammaTbl	r_tbl;		/**< R table. */
	FjIqGammaTbl	g_tbl;		/**< G table. */
	FjIqGammaTbl	b_tbl;		/**< B table. */
	FjIqGammaTbl	yb_tbl;		/**< Yb table. */
	UCHAR				gamma_mode;	/**< Gamma mode. */
}					
修改后 TFjIqGamma
{
FjIqGammaTbl	rgbTbl;	/**< RGB table. */
	FjIqGammaTbl	rTbl;		/**< R table. */
	FjIqGammaTbl	gTbl;		/**< G table. */
	FjIqGammaTbl	bTbl;		/**< B table. */
	FjIqGammaTbl	ybTbl;		/**< Yb table. */
	UCHAR				gammaMode;	/**< Gamma mode. */
}

 修改前 T_FJ_IQ_YCC	
 {
SHORT				yc_coeff[3][3];		/**< YC : Coefficient of YC convert (9bits signed)			*/
	UCHAR				y_blend_ratio;		/**< YBLEND.YYBLND : Y blend ratio (6bits 0 ~ 32)			*/
	UCHAR				yb_blend_ratio;		/**< YBLEND.YBBLND : Yb blend ratio (6bits 0 ~ 32)			*/
 }					      
修改后 TFjIqYcc
{
SHORT				ycCoeff[3][3];		/**< YC : Coefficient of YC convert (9bits signed)			*/
	UCHAR				yBlendRatio;		/**< YBLEND.YYBLND : Y blend ratio (6bits 0 ~ 32)			*/
	UCHAR				ybBlendRatio;		/**< YBLEND.YBBLND : Yb blend ratio (6bits 0 ~ 32)			*/
}
修改前 T_CORNER_THRESHOLD_INFO
{
USHORT us_h;							/**< horizontal threshold position */
	USHORT us_v;							/**< vertical threshold position */
	USHORT us_threshold_high;				/**< high threshold */
	USHORT us_threshold_low;				/**< low threshold */
}
修改后 TCornerThresholdInfo  
{
USHORT usH;							/**< horizontal threshold position */
	USHORT usV;							/**< vertical threshold position */
	USHORT usThresholdHigh;				/**< high threshold */
	USHORT usThresholdLow;				/**< low threshold */
}
修改前 FJ_IQ_CORNER_THRESHOLD  
{
TCornerThresholdInfo t_left_top;		/**< left top corner threshold info */
	TCornerThresholdInfo t_right_top;	/**< right top corner threshold info */
	TCornerThresholdInfo t_left_bottom;	/**< left bottom corner threshold info */
	TCornerThresholdInfo t_right_bottom;	/**< right bottom corner threshold info */
}                                          
修改后 FjIqCornerThreshold
{
TCornerThresholdInfo tLeftTop;		/**< left top corner threshold info */
	TCornerThresholdInfo tRightTop;	/**< right top corner threshold info */
	TCornerThresholdInfo tLeftBottom;	/**< left bottom corner threshold info */
	TCornerThresholdInfo tRightBottom;	/**< right bottom corner threshold info */
}
修改前 FJ_IQ_BADPIX_POS	
{
SHORT x_pos;									/**< Position X. */
	SHORT y_pos;									/**< Position Y. */
}				
修改后 FjIqBadpixPos
{
SHORT xPos;									/**< Position X. */
	SHORT yPos;									/**< Position Y. */
}
   FJ_IQ_BADPIX_RECT					            FjIqBadpixRect
   
修改前  FJ_IQ_BADPIX_ADD_POS		
{
USHORT	y;										/**< Y position. */
	USHORT	x[20];									/**< X position(s). */
	USHORT	x_mum;			
}			
修改后 FjiqBadpixAddPos
{
USHORT	y;										/**< Y position. */
	USHORT	x[20];									/**< X position(s). */
	USHORT	xMum;			
}
修改前  FJ_IQ_BADPIX_ADD_PAT
{
FjiqBadpixAddPos	add_pos[20];			/**< Additional pixel position. */
	USHORT					add_pos_num;			/**< @ref add_pos valid number. */
	FjIqBadpixPos		cycle_start_pos;		/**< Additional pattern cycle start position. */
	FjIqBadpixRect		cycle_rect;				/**< Additional pattern size. */
}					
修改后 FjiqBadpixAddPat
{
FjiqBadpixAddPos	 addPos[20];			/**< Additional pixel position. */
	USHORT					addPosNum;			/**< @ref addPos valid number. */
	FjIqBadpixPos		cycleStartPos;		/**< Additional pattern cycle start position. */
	FjIqBadpixRect		cycleRect;				/**< Additional pattern size. */
}
修改前 FJ_IQ_BADPIX_CONV_INFO 
  {
  FjiqBadpixAddPos	add_pos[20];			/**< Additional pixel position. */
	USHORT					add_pos_num;			/**< @ref add_pos valid number. */
	FjIqBadpixPos		cycle_start_pos;		/**< Additional pattern cycle start position. */
	FjIqBadpixRect		cycle_rect;				/**< Additional pattern size. */

FjiqBadpixAddPat	add_pat[FjIq_FJ_IQ_BADPIX_LINE_MAX][FjIq_FJ_IQ_BADPIX_COLUM_MAX];	/**< Pixel additional pattern data. */
	FjIqBadpixPos		crop_pos_src;			/**< Cropping window start position. Must even number. */
	FjIqBadpixRect		crop_rect_src;			/**< Cropping window size. Must even number. */
	FjIqBadpixPos		sen_window_pos_src;		/**< SEN window start position of source table. Must even number. */
	FjIqBadpixPos		sen_window_pos_dst;		/**< SEN window start position of destination table Must even number. */
  }				
修改后 FjiqBadpixConvInfo
{
FjiqBadpixAddPat	addPat[FjIq_FJ_IQ_BADPIX_LINE_MAX][FjIq_FJ_IQ_BADPIX_COLUM_MAX];	/**< Pixel additional pattern data. */
	FjIqBadpixPos		cropPosSrc;			/**< Cropping window start position. Must even number. */
	FjIqBadpixRect		cropRectSrc;			/**< Cropping window size. Must even number. */
	FjIqBadpixPos		senWindowPosSrc;		/**< SEN window start position of source table. Must even number. */
	FjIqBadpixPos		senWindowPosDst;		/**< SEN window start position of destination table Must even number. */
}
修改前 FJ_IQ_BADPIX_FLIP_INFO
{
FjIqBadpixPos		flip_pos_dst;			/**< After left-top offset position from VD and HD edge. Must even number. */
}				
修改后 	FjiqBadpixFlipInfo
{
FjIqBadpixPos		flipPosDst;			/**< After left-top offset position from VD and HD edge. Must even number. */
}
修改前 T_FJ_IQ_FSHD_CONVINFO	
{
USHORT src_tbl_ttaX;						/**< source start left position (RAW pixels) */
	USHORT src_tbl_staY;						/**< source start top position (RAW pixels) */
	USHORT src_tbl_width;						/**< source width (RAW pixels) */
	USHORT src_tbl_lines;						/**< source lines (RAW pixels) */
	USHORT dst_tbl_width;						/**< destination width (RAW pixels) */
	USHORT dst_tbl_lines;						/**< destination lines (RAW pixels) */
}			
修改后 FjiqFshdConvinfo
{
USHORT srcTblTtaX;						/**< source start left position (RAW pixels) */
	USHORT srcTblStaY;						/**< source start top position (RAW pixels) */
	USHORT srcTblWidth;						/**< source width (RAW pixels) */
	USHORT srcTblLines;						/**< source lines (RAW pixels) */
	USHORT dstTblWidth;						/**< destination width (RAW pixels) */
	USHORT dstTblLines;						/**< destination lines (RAW pixels) */
}
修改前 T_FJ_IQ_FSHD_SEL_INFO	
{
EIqCalibTgt	calib_tgt;					/**< Calibration target.										*/
	USHORT			ozoomIdx;					/**< Optical zoom index number. (range:0x0000-0xFFFE)			*/
	USHORT			f_number;					/**< 
}			
修改后 FjiqFshdSelInfo
{
EIqCalibTgt	calibTgt;					/**< Calibration target.										*/
	USHORT			ozoomIdx;					/**< Optical zoom index number. (range:0x0000-0xFFFE)			*/
	USHORT			fNumber;					/**< F number(integer 8bit, decimal 8bit) (range:0x0000-0xFFFE)	*/
}
 
 T_FJ_IQ_FSHD_SLP_GAIN					FjiqFshdSlpGain
   
修改前 T_FJ_IQ_FSHDL_TBL
{
UCHAR	ffshgfmt;		/**< FFSHGFMT register value. */
	USHORT	ffshsubprh;		/**< FFSHSUBPRH register value. */
	USHORT	ffshsubprv;		/**< FFSHSUBPRV register value. */
	ULONG	tbl_addr[4];	/**< FSHDL table memory area address. [0]:R [1]:GR [2]:GB [3]:B */
	ULONG	tbl_g_width[4];	/**< FSHDL table global width bytes. [0]:R [1]:GR [2]:GB [3]:B */
}					             
修改后  TFjiqFshdlTbl
{
UCHAR	ffshgfmt;		/**< FFSHGFMT register value. */
	USHORT	ffshsubprh;		/**< FFSHSUBPRH register value. */
	USHORT	ffshsubprv;		/**< FFSHSUBPRV register value. */
	ULONG	tblAddr[4];	/**< FSHDL table memory area address. [0]:R [1]:GR [2]:GB [3]:B */
	ULONG	tblGWidth[4];	/**< FSHDL table global width bytes. [0]:R [1]:GR [2]:GB [3]:B */
}

T_FJ_IQ_FSHDL_PARAM					 TFjiqFshdlParam

T_FJ_IQ_FSHDL_SLP_GAIN					TFjiqFshdlSlpGain

T_FJ_IQ_CAG_CONVINFO					TFjiqCagConvinfo

fjdisp.c原公有函数名


FJ_ERR_CODE FJ_Disp_Open( FJ_DISP_TYPE disp_type, UCHAR *disp_id );
FJ_ERR_CODE FJ_Disp_Close( UCHAR disp_id );
FJ_ERR_CODE FJ_Disp_LCD_Config( UCHAR disp_id, FJ_DISP_LCD_CONFIG *lcd_config_info );
FJ_ERR_CODE FJ_Disp_LCD_Start_Sync( UCHAR disp_id );
FJ_ERR_CODE FJ_Disp_LCD_Stop_Sync( UCHAR disp_id );
FJ_DISP_LCD_CONNECT_STATE FJ_Disp_LCD_Get_State( VOID );
FJ_ERR_CODE FJ_Disp_HDMI_Set_Detect_Callback( DISP_HDMI_CALLBACK interrupt_callback, FJ_DISP_HDMI_DETECT_SETTING const* const detect_setting );
FJ_DISP_HDMI_DETECT FJ_Disp_HDMI_Get_Detect_Status( VOID );
FJ_ERR_CODE FJ_Disp_HDMI_Get_Sink( UCHAR disp_id, FJ_DISP_HDMI_SINK_INFO* sink_info );
FJ_ERR_CODE FJ_Disp_HDMI_Get_DeviceVendorProductID( UCHAR disp_id, FJ_DISP_HDMI_DEV_VENDOR_PRODUCT_ID* vendor_product_id );
FJ_ERR_CODE FJ_Disp_HDMI_Set_VicInfo( UCHAR disp_id, FJ_DISP_HDMI_VIC_INFO* vicInfo );
FJ_ERR_CODE FJ_Disp_HDMI_Set_SPD( UCHAR disp_id, FJ_DISP_HDMI_SPD_INFO* spd_info );
FJ_ERR_CODE FJ_Disp_HDMI_Set_Vendor_Specific( UCHAR disp_id, FJ_DISP_HDMI_VENDOR_SPEC_INFO* vendor_spec_info );
FJ_ERR_CODE FJ_Disp_HDMI_Config_Video( UCHAR disp_id, FJ_DISP_VIDEO_ID videoId, UCHAR freq_ctrl );
FJ_ERR_CODE FJ_Disp_HDMI_Config_Audio( UCHAR disp_id, ULONG samp_freq );
FJ_ERR_CODE FJ_Disp_HDMI_Start_Sync( UCHAR disp_id );
FJ_ERR_CODE FJ_Disp_HDMI_Stop_Sync( UCHAR disp_id );
FJ_ERR_CODE FJ_Disp_MIPI_Config_Video( UCHAR disp_id, FJ_DISP_LCD_CONFIG *lcd_config_info );
FJ_ERR_CODE FJ_Disp_MIPI_Start_Sync( UCHAR disp_id );
FJ_ERR_CODE FJ_Disp_MIPI_Stop_Sync( UCHAR disp_id );
FJ_ERR_CODE	FJ_Set_Display_Window( UCHAR disp_id, FJ_DISP_WINDOW_CONFIG* window_config );
FJ_ERR_CODE	FJ_Get_Display_Window( UCHAR disp_id, FJ_DISP_WINDOW_CONFIG* window_config );
FJ_ERR_CODE FJ_Disp_Video_Render( UCHAR disp_id, FJ_DISP_YCC_ADDR* ycc_addr, UINT32 global_width );
FJ_ERR_CODE FJ_Disp_Video_Set_Rotate( UCHAR disp_id, FJ_DISP_ROTATE_DEGREE rotateDegree );
FJ_ERR_CODE FJ_Disp_Video_Get_Rotate( UCHAR disp_id, FJ_DISP_ROTATE_DEGREE* rotateDegree );
FJ_ERR_CODE FJ_Disp_Video_Enable( UCHAR disp_id );
FJ_ERR_CODE FJ_Disp_Video_Disable( UCHAR disp_id );
FJ_ERR_CODE FJ_Disp_Show_Boot_Image( const FJ_DISP_IMAGE_CONFIG* config_info );
FJ_ERR_CODE FJ_Disp_OSD_Set_Config( UCHAR disp_id, FJ_DISP_LAYERID_TYPE layerId, FJ_DISP_OSD_CONFIG* config_info );
FJ_ERR_CODE FJ_Disp_OSD_Enable( UCHAR disp_id, FJ_DISP_LAYERID_TYPE layerId );
FJ_ERR_CODE FJ_Disp_OSD_Disable( UCHAR disp_id, FJ_DISP_LAYERID_TYPE layerId );
FJ_ERR_CODE FJ_Disp_OSD_Rotate_Copy( UCHAR disp_id, FJ_DISP_LAYERID_TYPE layerId, FJ_DISP_OSD_RECT_INFO* rect_info, FJ_DISP_OSD_BUFF_ADDR* buff_addr );
FJ_ERR_CODE FJ_Disp_OSD_Render( UCHAR disp_id, FJ_DISP_LAYERID_TYPE layerId, UINT32 disp_buff_addr );
VOID FJ_HDMI_Init( HDMI_CALLBACK interrupt_callback );
#if 0
FJ_HDMI_HPD FJ_HDMI_Detect( VOID );
#else
FJ_ERR_CODE FJ_HDMI_Detect( VOID );
#endif;
FJ_ERR_CODE FJ_HDMI_Set_OutFormat( UCHAR format );
FJ_ERR_CODE FJ_HDMI_Connect_HDMI( UINT32 videoFormat );
FJ_ERR_CODE FJ_HDMI_Disconnect_HDMI( VOID );
VOID FJ_HDMI_Start_Sync( VOID );
VOID FJ_HDMI_Stop_Sync( VOID );
FJ_HDMI_HPD FJ_HDMI_Get_EDID( FJ_HDMI_DTD_MAN** dtdAddr, UCHAR edid_data_block_tag_flags );
FJ_ERR_CODE FJ_HDMI_Get_DTD_No( UINT32 videoFormat, UINT32* dtd_no );
FJ_ERR_CODE FJ_HDMI_Get_Format_Tbl_Addr( UINT32 videoFormat, FJ_HDMI_EDID_DTD** edid_addr );
FJ_ERR_CODE FJ_HDMI_Set_Ctrl_Common( FJ_HDMI_CTRL_COMMON const *const ctrl );
FJ_ERR_CODE FJ_HDMI_Get_Ctrl_Common( FJ_HDMI_CTRL_COMMON *const ctrl );
FJ_ERR_CODE FJ_HDMI_Set_Ctrl_Video( FJ_HDMI_CTRL_VIDEO const *const ctrl );
FJ_ERR_CODE FJ_HDMI_Get_Ctrl_Video( FJ_HDMI_CTRL_VIDEO *const ctrl );
FJ_ERR_CODE FJ_HDMI_Set_Ctrl_Audio( FJ_HDMI_CTRL_AUDIO const *const ctrl );
FJ_ERR_CODE FJ_HDMI_Get_Ctrl_Audio( FJ_HDMI_CTRL_AUDIO *const ctrl );
FJ_ERR_CODE FJ_HDMI_Audio_Mute( BOOL enable );
FJ_ERR_CODE FJ_HDMI_Set_Ctrl_I2s( FJ_HDMI_CTRL_AUDIO_I2S const *const ctrl );
FJ_ERR_CODE FJ_HDMI_Get_Ctrl_I2s( FJ_HDMI_CTRL_AUDIO_I2S *const ctrl );
FJ_ERR_CODE FJ_HDMI_Audio_Ctrl( unsigned long samp_freq );
VOID FJ_HDMI_Audio_Start( VOID );
VOID FJ_HDMI_Audio_Stop( VOID );
VOID FJ_HDMI_Audio_Set_Start( ULONG sample_freq );
FJ_ERR_CODE FJ_HDMI_Get_System_Status(FJ_HDMI_SYS_STAT* status);
#if 0
FJ_ERR_CODE FJ_HDMI_CEC_Init(VOID);
VOID FJ_HDMI_CEC_Stop(VOID);
#if 0
FJ_ERR_CODE 	FJ_HDMI_CEC_GetUserControlKeyEvent(FJ_CEC_USER_CONTROL_KEY_EVENT * const keyEvent);
#endif
FJ_ERR_CODE FJ_HDMI_CEC_SendMessage(FJ_CEC_OPCODE opcode, BYTE operand[],BYTE operandCount);
FJ_ERR_CODE	FJ_HDMI_CEC_InactiveSource(VOID);
FJ_ERR_CODE FJ_HDMI_CEC_OneTouchPlay(VOID);
FJ_ERR_CODE FJ_HDMI_CEC_SendPing(USHORT *pingMap);
FJ_ERR_CODE FJ_HDMI_CEC_MenuStatus(FJ_CEC_MENUSTATE menuStatue);
#if 0
FJ_ERR_CODE FJ_HDMI_CEC_ReportPowerStatus( FJ_CEC_POWERSTATUS powerStatus);
FJ_ERR_CODE FJ_HDMI_CEC_GiveDevicePowerStatus(VOID);
FJ_ERR_CODE FJ_HDMI_CEC_RequestActiveSource(VOID);
FJ_ERR_CODE FJ_HDMI_CEC_GetCECVersion(VOID);
FJ_ERR_CODE FJ_HDMI_CEC_MenuRequest(FJ_CEC_MENUREQ requestType);
FJ_ERR_CODE FJ_HDMI_CEC_GivePhysicalAddr(FJ_CEC_LOG_ADDR dest);
#endif
FJ_ERR_CODE FJ_HDMI_CEC_GiveDeviceVendorID(VOID);
USHORT FJ_HDMI_CEC_GetPhysicalAddress(VOID);
#endif
FJ_ERR_CODE FJ_MIPI_Video_Ctrl( FJ_MIPI_CTRL_VIDEO* mipi_video_ctrl );
FJ_ERR_CODE FJ_MIPI_Init( UCHAR freq_ctrl );
FJ_ERR_CODE FJ_MIPI_Set_Mode( UCHAR mode );
FJ_ERR_CODE FJ_MIPI_Command_Ctrl( FJ_MIPI_CMD_INFO* mipi_command_info );
FJ_ERR_CODE FJ_SetOSDDisplayAttr(FJ_DISP_TYPE disp_type,
								 E_OSDLayer layerId, E_FJ_OSD_ATTR_TYPE Attr,
								 INT32 wParam1, INT32 wParam2, INT32 wParam3, INT32 wParam4);
FJ_ERR_CODE FJ_OSD_Set_Main_Input_Size(E_OSDLayer layerId, const T_Rect* disp_rect);
FJ_ERR_CODE FJ_OSD_Get_Clip(E_DISP_DEV disp_device, T_CLIP_CAL_DATA* cal_data);
FJ_ERR_CODE FJ_OSD_Set_Clip(E_DISP_DEV disp_device, T_CLIP_CAL_DATA const* const cal_data);
FJ_ERR_CODE FJ_Show_SetBackColor(FJ_DISP_TYPE disp_type, UCHAR r_color, UCHAR g_color, UCHAR b_color);
FJ_ERR_CODE FJ_Show_BackColor(FJ_DISP_TYPE disp_type, BOOL enable);
FJ_ERR_CODE FJ_Show_Enable(E_OSDLayer layerId, BOOL enable);
FJ_ERR_CODE FJ_OSD_Initialize(VOID);
FJ_ERR_CODE FJ_Initialize_OSD_Layer(E_OSDLayer layerId);
FJ_ERR_CODE FJ_OSD_Set_Matrix(FJ_DISP_TYPE disp_type, FJ_OSD_MATRIX_KIND kind, BYTE enable, T_MATRIX_DATA const* const matrix);
FJ_ERR_CODE FJ_OSD_Connect(E_DISP_DEV disp_device, const T_HDMI_SET *HDMI_Setting_Data);
FJ_ERR_CODE FJ_OSD_Disconnect(E_DISP_DEV disp_device);
FJ_ERR_CODE FJ_Connect_HDMI(const T_HDMI_SET* hdmi_setting_data);
FJ_ERR_CODE FJ_OSD_Draw_OSD_Area(E_OSDLayer layerId, const T_Rect drawArea[FjDispE_OSD_DRAW_AREA_NUM], BYTE drawAreaNum);
FJ_ERR_CODE FJ_OSD_Set_OSD_Area_Enable(E_OSDLayer layerId, UINT32 enable_area);
FJ_ERR_CODE FJ_OSD_Get_OSD_Area_Enable(E_OSDLayer layerId, UINT32* enable_area);
ULONG FJ_OSD_Get_OSD_Area_Addr(E_OSDLayer layerId, UINT32 drawAreaNum, UINT32* global_width);
FJ_ERR_CODE FJ_Clear_Area_Buffer(E_OSDLayer layerId, UINT32 clear_area);
#if 0	// MILB Not Use
FJ_ERR_CODE FJ_OSD_Set_Tone_Correction(E_OSDLayer layerId, T_Y_CONV const *const y_conv, T_TC_DATA const *const tc_data);
#endif	// MILB Not Use
#if 0	// MILB Not Use
FJ_ERR_CODE FJ_OSD_Get_Tone_Correction(E_OSDLayer layerId, T_Y_CONV* y_conv, T_TC_DATA* tc_data);
#endif	// MILB Not Use
#if 0	// MILB Not Use
FJ_ERR_CODE FJ_OSD_Set_Tc_Table(E_OSDLayer layerId, T_TONE_CORRECTION_TBL const *const tone_correction);
#endif	// MILB Not Use
#if 0	// MILB Not Use
FJ_ERR_CODE FJ_OSD_Get_Tc_Table(E_OSDLayer layerId, T_TONE_CORRECTION_TBL* tone_correction);
#endif	// MILB Not Use
FJ_ERR_CODE FJ_OSD_Set_Inverse_Gamma(E_OSDLayer layerId, T_INVERSE_GAMMA_TBL const *const inverse_gamma);

更改后的公有函数名：
FJ_ERR_CODE 		fj_disp_fj_disp_open(FjDisp* self,  FjDispType disp_type, UCHAR *disp_id );
FJ_ERR_CODE 		fj_disp_fj_disp_close( FjDisp* self, UCHAR disp_id );
FJ_ERR_CODE 		fj_disp_fj_disp_lcd_config(FjDisp* self, UCHAR disp_id, FjDispLcdConfig *lcd_config_info );
FJ_ERR_CODE 		fj_disp_fj_disp_lcd_start_sync(FjDisp* self, UCHAR disp_id );
FJ_ERR_CODE 		fj_disp_fj_disp_lcd_stop_sync(FjDisp* self,  UCHAR disp_id );
FjdispLcdConnectState
							fj_disp_fj_disp_lcd_get_state(FjDisp* self );
FJ_ERR_CODE 		fj_disp_fj_disp_hdmi_set_detect_callback( FjDisp* self,  DISP_HDMI_CALLBACK interrupt_callback, FjdispHdmiDetectSetting const* const detect_setting );
FjDispHdmiDetect
							fj_disp_fj_disp_hdmi_get_detect_status(FjDisp* self );
FJ_ERR_CODE 		fj_disp_fj_disp_hdmi_get_sink( FjDisp* self,  UCHAR disp_id, FjDispHdmiSinkInfo* sink_info );
FJ_ERR_CODE 		fj_disp_fj_disp_hdmi_get_devicevendorproductid( FjDisp* self,  UCHAR disp_id, FjdispHdmidevVendorProductid* vendor_product_id );
FJ_ERR_CODE 		fj_disp_fj_disp_hdmi_set_vicinfo( FjDisp* self,  UCHAR disp_id, FjdispHdmiVicInfo* vicInfo );
FJ_ERR_CODE 		fj_disp_fj_disp_hdmi_set_spd(FjDisp* self, UCHAR disp_id, FjdispHdmiSPpdInfo* spd_info );
FJ_ERR_CODE 		fj_disp_fj_disp_hdmi_set_vendor_specific( FjDisp* self,  UCHAR disp_id, FjdispHdmiVendorSpecInfo* vendor_spec_info );
FJ_ERR_CODE 		fj_disp_fj_disp_hdmi_config_video( FjDisp* self,  UCHAR disp_id, FjDispVideoId videoId, UCHAR freq_ctrl );
FJ_ERR_CODE 		fj_disp_fj_disp_hdmi_config_audio( FjDisp* self,  UCHAR disp_id, ULONG samp_freq );
FJ_ERR_CODE 		fj_disp_fj_disp_hdmi_start_sync(  FjDisp* self,  UCHAR disp_id );
FJ_ERR_CODE 		fj_disp_fj_disp_hdmi_stop_sync(  FjDisp* self,  UCHAR disp_id );
FJ_ERR_CODE 		fj_disp_fj_disp_mipi_config_video( FjDisp* self,  UCHAR disp_id, FjDispLcdConfig *lcd_config_info );
FJ_ERR_CODE 		fj_disp_fj_disp_mipi_start_sync( FjDisp* self,  UCHAR disp_id );
FJ_ERR_CODE 		fj_disp_fj_disp_mipi_stop_sync( FjDisp* self,  UCHAR disp_id );
FJ_ERR_CODE		fj_disp_fj_set_display_window( FjDisp* self,  UCHAR disp_id, FjDispWindowConfig* window_config );
FJ_ERR_CODE		fj_disp_fj_get_display_window( FjDisp* self,  UCHAR disp_id, FjDispWindowConfig* window_config );
FJ_ERR_CODE 		fj_disp_fj_disp_video_render( FjDisp* self,  UCHAR disp_id, FjDispYccAddr* ycc_addr, UINT32 global_width );
FJ_ERR_CODE 		fj_disp_fj_disp_video_set_rotate(FjDisp* self, UCHAR disp_id, FjDispRotateDegree rotateDegree );
FJ_ERR_CODE 		fj_disp_fj_disp_video_get_rotate(FjDisp* self, UCHAR disp_id, FjDispRotateDegree* rotateDegree );
FJ_ERR_CODE 		fj_disp_fj_disp_video_enable( FjDisp* self,  UCHAR disp_id );
FJ_ERR_CODE 		fj_disp_fj_disp_video_disable( FjDisp* self,  UCHAR disp_id );
FJ_ERR_CODE 		fj_disp_fj_disp_show_boot_image( FjDisp* self,  const FjDispImageConfig* config_info );
FJ_ERR_CODE 		fj_disp_fj_disp_osd_set_config( FjDisp* self,  UCHAR disp_id, FjDispLayeridType layerId, FjDispOsdConfig* config_info );
FJ_ERR_CODE 		fj_disp_fj_disp_osd_enable( FjDisp* self,  UCHAR disp_id, FjDispLayeridType layerId );
FJ_ERR_CODE 		fj_disp_fj_disp_osd_disable( FjDisp* self,  UCHAR disp_id, FjDispLayeridType layerId );
FJ_ERR_CODE 		fj_disp_fj_disp_osd_rotate_copy( FjDisp* self,  UCHAR disp_id, FjDispLayeridType layerId, FjdispOsdRectInfo* rect_info, FjdispOsdBuffAddr* buff_addr );
FJ_ERR_CODE 		fj_disp_fj_disp_osd_render( FjDisp* self,  UCHAR disp_id, FjDispLayeridType layerId, UINT32 disp_buff_addr );
VOID 					fj_disp_fj_hdmi_init( FjDisp* self,  HDMI_CALLBACK interrupt_callback );
#if 0
FjHdmiHpd 			fj_disp_fj_hdmi_detect(FjDisp* self );
#else
FJ_ERR_CODE 		fj_disp_fj_hdmi_detect(FjDisp* self );
#endif
FJ_ERR_CODE 		fj_disp_fj_hdmi_set_outformat( FjDisp* self,  UCHAR format );
FJ_ERR_CODE 		fj_disp_fj_hdmi_connect_hdmi( FjDisp* self,  UINT32 videoFormat );
FJ_ERR_CODE 		fj_disp_fj_hdmi_disconnect_hdmi( FjDisp* self);
VOID 					fj_disp_fj_hdmi_start_sync( FjDisp* self);
VOID 					fj_disp_fj_hdmi_stop_sync(FjDisp* self );
FjHdmiHpd 	fj_disp_fj_hdmi_get_edid(FjDisp* self, FjHdmiDtdMan** dtdAddr, UCHAR edid_data_block_tag_flags );
FJ_ERR_CODE 		fj_disp_fj_hdmi_get_dtd_no( FjDisp* self,  UINT32 videoFormat, UINT32* dtd_no );
FJ_ERR_CODE 		fj_disp_fj_hdmi_get_format_tbl_addr(FjDisp* self, UINT32 videoFormat, FjHdmiEdidDtd** edid_addr );
FJ_ERR_CODE 		fj_disp_fj_hdmi_set_ctrl_common( FjDisp* self,  FjHdmiCtrlCommon const *const ctrl );
FJ_ERR_CODE 		fj_disp_fj_hdmi_get_ctrl_common( FjDisp* self,  FjHdmiCtrlCommon *const ctrl );
FJ_ERR_CODE 		fj_disp_fj_hdmi_set_ctrl_video( FjDisp* self,  FjHdmiCtrlVideo const *const ctrl );
FJ_ERR_CODE 		fj_disp_fj_hdmi_get_ctrl_video(FjDisp* self, FjHdmiCtrlVideo *const ctrl );
FJ_ERR_CODE 		fj_disp_fj_hdmi_set_ctrl_audio( FjDisp* self,  FjHdmiCtrlAudio const *const ctrl );
FJ_ERR_CODE 		fj_disp_fj_hdmi_get_ctrl_audio( FjDisp* self,  FjHdmiCtrlAudio *const ctrl );
FJ_ERR_CODE 		fj_disp_fj_hdmi_audio_mute( FjDisp* self,  BOOL enable );
FJ_ERR_CODE 		fj_disp_fj_hdmi_set_ctrl_i2s( FjDisp* self,  FjHdmiCtrlAudioi2s const *const ctrl );
FJ_ERR_CODE 		fj_disp_fj_hdmi_get_ctrl_i2s(FjDisp* self, FjHdmiCtrlAudioi2s *const ctrl );
FJ_ERR_CODE 		fj_disp_fj_hdmi_audio_ctrl( FjDisp* self,  unsigned long samp_freq );
VOID 					fj_disp_fj_hdmi_audio_start(FjDisp* self );
VOID 					fj_disp_fj_hdmi_audio_stop( FjDisp* self);
VOID 					fj_disp_fj_hdmi_audio_set_start( FjDisp* self,  ULONG sample_freq );
FJ_ERR_CODE 		fj_disp_fj_hdmi_get_system_status(FjDisp* self,  FjHdmiSysStat* status);
#if 0
FJ_ERR_CODE 		fj_disp_fj_hdmi_cec_init(FjDisp* self);
VOID 					fj_disp_fj_hdmi_cec_stop(FjDisp* self);
#if 0
FJ_ERR_CODE 		fj_disp_fj_hdmi_cec_getusercontrolkeyevent(FjDisp* self,  FJ_CEC_USER_CONTROL_KEY_EVENT * const keyEvent);
#endif
FJ_ERR_CODE 		fj_disp_fj_hdmi_cec_sendmessage(FjDisp* self,  FJ_CEC_OPCODE opcode, BYTE operand[],BYTE operandCount);
FJ_ERR_CODE		fj_disp_fj_hdmi_cec_inactivesource(FjDisp* self);
FJ_ERR_CODE 		fj_disp_fj_hdmi_cec_onetouchplay(FjDisp* self);
FJ_ERR_CODE 		fj_disp_fj_hdmi_cec_sendping(FjDisp* self,  USHORT *pingMap);
FJ_ERR_CODE 		fj_disp_fj_hdmi_cec_menustatus(FjDisp* self,  FJ_CEC_MENUSTATE menuStatue);
#if 0
FJ_ERR_CODE 		fj_disp_fj_hdmi_cec_reportpowerstatus(FjDisp* self, FJ_CEC_POWERSTATUS powerStatus);
FJ_ERR_CODE 		fj_disp_fj_hdmi_cec_givedevicepowerstatus(FjDisp* self);
FJ_ERR_CODE 		fj_disp_fj_hdmi_cec_requestactivesource(FjDisp* self);
FJ_ERR_CODE 		fj_disp_fj_hdmi_cec_getcecversion(FjDisp* self);
FJ_ERR_CODE 		fj_disp_fj_hdmi_cec_menurequest(FjDisp* self,  FJ_CEC_MENUREQ requestType);
FJ_ERR_CODE 		fj_disp_fj_hdmi_cec_givephysicaladdr(FjDisp* self,  FJ_CEC_LOG_ADDR dest);
#endif
FJ_ERR_CODE 		fj_disp_fj_hdmi_cec_givedevicevendorid(FjDisp* self);
USHORT 				fj_disp_fj_hdmi_cec_getphysicaladdress(FjDisp* self);
#endif
FJ_ERR_CODE 		fj_disp_fj_mipi_video_ctrl( FjDisp* self,  FjMipiCtrlVideo* mipi_video_ctrl );
FJ_ERR_CODE 		fj_disp_fj_mipi_init( FjDisp* self,  UCHAR freq_ctrl );
FJ_ERR_CODE 		fj_disp_fj_mipi_set_mode(FjDisp* self, UCHAR mode );
FJ_ERR_CODE 		fj_disp_fj_mipi_command_ctrl( FjDisp* self,  FjMipiCmdInfo* mipi_command_info );
FJ_ERR_CODE 		fj_disp_fj_setosddisplayattr(FjDisp* self,  FjDispType disp_type,
							EOsdLayer layerId, EfjOsdAttrType Attr,
							INT32 wParam1, INT32 wParam2, INT32 wParam3, INT32 wParam4);
FJ_ERR_CODE 		fj_disp_fj_osd_set_main_input_size(FjDisp* self,  EOsdLayer layerId, const TRect* disp_rect);
FJ_ERR_CODE 		fj_disp_fj_osd_get_clip(FjDisp* self,  EDispDev disp_device, TClipCalData* cal_data);
FJ_ERR_CODE 		fj_disp_fj_osd_set_clip(FjDisp* self,  EDispDev disp_device, TClipCalData const* const cal_data);
FJ_ERR_CODE 		fj_disp_fj_show_setbackcolor(FjDisp* self,  FjDispType disp_type, UCHAR r_color, UCHAR g_color, UCHAR b_color);
FJ_ERR_CODE 		fj_disp_fj_show_backcolor(FjDisp* self,  FjDispType disp_type, BOOL enable);
FJ_ERR_CODE 		fj_disp_fj_show_enable(FjDisp* self,  EOsdLayer layerId, BOOL enable);
FJ_ERR_CODE 		fj_disp_fj_osd_initialize(FjDisp* self);
FJ_ERR_CODE 		fj_disp_fj_initialize_osd_layer(FjDisp* self, EOsdLayer layerId);
FJ_ERR_CODE 		fj_disp_fj_osd_set_matrix(FjDisp* self,  FjDispType disp_type, FjOsdMatrixKind kind, BYTE enable, TMatrixData const* const matrix);
FJ_ERR_CODE 		fj_disp_fj_osd_connect(FjDisp* self,  EDispDev disp_device, const THdmiSet *HDMI_Setting_Data);
FJ_ERR_CODE 		fj_disp_fj_osd_disconnect(FjDisp* self,  EDispDev disp_device);
FJ_ERR_CODE 		fj_connect_hdmi(FjDisp* self,  const THdmiSet* hdmi_setting_data);
FJ_ERR_CODE 		fj_disp_fj_osd_draw_osd_area(FjDisp* self,  EOsdLayer layerId, const TRect drawArea[FjDispE_OSD_DRAW_AREA_NUM], BYTE drawAreaNum);
FJ_ERR_CODE 		fj_disp_fj_osd_set_osd_area_enable(FjDisp* self,  EOsdLayer layerId, UINT32 enable_area);
FJ_ERR_CODE 		fj_disp_fj_osd_get_osd_area_enable(FjDisp* self,  EOsdLayer layerId, UINT32* enable_area);
ULONG 				fj_disp_fj_osd_get_osd_area_addr(FjDisp* self,  EOsdLayer layerId, UINT32 drawAreaNum, UINT32* global_width);
FJ_ERR_CODE 		fj_disp_fj_clear_area_buffer(FjDisp* self,  EOsdLayer layerId, UINT32 clear_area);
#if 0	// MILB Not Use
FJ_ERR_CODE 		fj_disp_fj_osd_set_tone_correction(FjDisp* self,  EOsdLayer layerId, TYConv const *const y_conv, TTcData const *const tc_data);
#endif	// MILB Not Use
#if 0	// MILB Not Use
FJ_ERR_CODE 		fj_disp_fj_osd_get_tone_correction(FjDisp* self,  EOsdLayer layerId, TYConv* y_conv, TTcData* tc_data);
#endif	// MILB Not Use
#if 0	// MILB Not Use
FJ_ERR_CODE 		fj_disp_fj_osd_set_tc_table(FjDisp* self,  EOsdLayer layerId, TToneCorrectionTbl const *const tone_correction);
#endif	// MILB Not Use
#if 0	// MILB Not Use
FJ_ERR_CODE 		fj_disp_fj_osd_get_tc_table(FjDisp* self,  EOsdLayer layerId, TToneCorrectionTbl* tone_correction);
#endif	// MILB Not Use
FJ_ERR_CODE 		fj_disp_fj_osd_set_inverse_gamma(FjDisp* self,  EOsdLayer layerId, TInverseGammaTbl const *const inverse_gamma);


fjdipa.c 原公有函数名


FJ_ERR_CODE FJ_OSD_Get_Inverse_Gamma(E_OSDLayer layerId, T_INVERSE_GAMMA_TBL* inverse_gamma);
FJ_ERR_CODE FJ_OSD_Set_Gamma(E_OSDLayer layerId, T_GAMMA_TBL const *const gamma);
FJ_ERR_CODE FJ_OSD_Get_Gamma(E_OSDLayer layerId, T_GAMMA_TBL* gamma);
FJ_ERR_CODE FJ_OSD_Set_Compensation_Table_Enable(FJ_DISP_TYPE disp_type, E_CORRECT_SELECT select, T_TBL_ACCESS_SET const *const compensation_table);
FJ_ERR_CODE FJ_OSD_Get_Compensation_Table_Enable(FJ_DISP_TYPE disp_type, E_CORRECT_SELECT select, T_TBL_ACCESS_SET* compensation_table);
FJ_ERR_CODE FJ_OSD_Set_Layer_Order(FJ_DISP_TYPE disp_type, T_ORDER_LAYER const *const order_layer);
FJ_ERR_CODE FJ_OSD_Get_Layer_Order(FJ_DISP_TYPE disp_type, T_ORDER_LAYER* order_layer);
FJ_ERR_CODE FJ_OSD_Draw_Grid_Line(FJ_DISP_TYPE disp_type, T_GRID_SET const *const grid_set);
FJ_ERR_CODE FJ_OSD_Set_Grid_Line_Num(FJ_DISP_TYPE disp_type, T_GRID_NUM_SET const *const grid_num_set);
FJ_ERR_CODE FJ_OSD_Set_Grid_Line_Enable(FJ_DISP_TYPE disp_type, BOOL enable);
FJ_ERR_CODE FJ_OSD_Draw_Face_Frame(FJ_DISP_TYPE disp_type, const T_FACE_FRAME_EACH_SET face_pos[FjDispE_OSD_DRAW_FACE_NUM],  const T_FACE_FRAME_SET* face_set);
FJ_ERR_CODE FJ_OSD_Set_Face_Frame_Enable(FJ_DISP_TYPE disp_type, UINT32 enable, UINT32 top_face);
FJ_ERR_CODE FJ_OSD_Set_Color_Bar(FJ_DISP_TYPE disp_type, U_RGB_COLOR color[FjDispE_OSD_COLOR_BAR_NUM],  ULONG color_bar_num);
FJ_ERR_CODE FJ_SetMainDispBuffAddr(E_OSDLayer layerId, ULONG addr[3]);
FJ_ERR_CODE FJ_GetMainDispBuffAddr(E_OSDLayer layerId, ULONG addr[3]);
FJ_ERR_CODE FJ_SetOsdDispBuffAddr(E_OSDLayer layerId, UINT32 drawAreaNum, ULONG addr);
FJ_ERR_CODE FJ_GetOsdDispBuffAddr(E_OSDLayer layerId, UINT32 drawAreaNum, ULONG* addr);
FJ_ERR_CODE FJ_Set_Main_Display(E_DISP_DEV disp_device, E_FJ_IMAGE_SIZE image_type,E_FJ_IMAGE_FORMAT image_format, ULONG image_global_width);
FJ_ERR_CODE FJ_Set_OSD_Vsync_Callback(FJ_DISP_TYPE disp_type, BOOL bSetup, VP_CALLBACK pcallback);
FJ_ERR_CODE FJ_OSD_Flush_Draw_Area(const FJ_OSD_COMM_FLUSH_DARA_AREA_INFO* switch_buffer_infor,UINT32 switch_buffer_infor_size);
FJ_ERR_CODE FJ_LoadFontFile(CHAR const* const FontName);
FJ_ERR_CODE FJ_Clear_OSD_Buffer(E_OSDLayer layerId);
FJ_ERR_CODE FJ_OSD_Set_Blink_On_Off(E_OSDLayer layerId, BYTE blink_show_period[FjDispE_OSD_DRAW_AREA_NUM], BYTE blink_hide_period[FjDispE_OSD_DRAW_AREA_NUM], ULONG area);
FJ_ERR_CODE FJ_SetDispHistogramPosition(E_OSDLayer layerId, unsigned short histo_x, unsigned short histo_y,
										unsigned short histo_width, unsigned short histo_height, BYTE drawAreaNum);
UINT16 FJ_GetHistogramWidth(E_OSDLayer layerId);
UINT16 FJ_GetHistogramHeight(E_OSDLayer layerId);
FJ_ERR_CODE FJ_PreHistogram(E_OSDLayer layerId, UINT32 threshold);
FJ_ERR_CODE FJ_HistogramEnable(E_OSDLayer layerId);
FJ_ERR_CODE	FJ_OSDDrawShape(E_OSDLayer layerId, E_FJ_OSD_SHAPE_TYPE wType,
							INT32 wStartX, INT32 wStartY, INT32 uwWidth, INT32 uwHeight, BYTE drawAreaNum);
#if 0	// MILB Not Use
FJ_ERR_CODE FJ_OSDDrawLine(E_OSDLayer layerId, const FJ_LINE_COORDINATES* line, USHORT Thickness, BYTE TerminatorType, BYTE drawAreaNum);
#endif	// MILB Not Use
FJ_ERR_CODE FJ_OSDDrawImage(E_OSDLayer layerId, UCHAR* yAddr, UCHAR* c_addr,
							USHORT start_x, USHORT start_y, USHORT width, USHORT height);
FJ_ERR_CODE FJ_OSDDrawBufferOSD(E_OSDLayer layerId, BYTE* addr_src, T_Rect const* const draw_info, BYTE drawAreaNum, USHORT global_width);
FJ_ERR_CODE FJ_OSDClearPart(E_OSDLayer layerId, T_Rect clear_rect, BYTE drawAreaNum);
#if 0	// MILB Not Use
FJ_ERR_CODE FJ_SetGDA(FJ_E_OSD_GDA_ATTR_TYPE bAttr, INT32 wParam1, INT32 wParam2);
#endif	// MILB Not Use
#if 0	// MILB Not Use
FJ_ERR_CODE FJ_DrawShape(FJ_E_OSD_SHAPE_TYPE bShapeType, SHORT wStartX, SHORT wStartY,
						 USHORT uwSizeX, USHORT uwSizeY, USHORT uwGlobalWidth, FJ_T_OSD_ADDR_YCC const* const image_addr);
#endif	// MILB Not Use
#if 0	// MILB Not Use
FJ_ERR_CODE FJ_OSDPrint(E_OSDLayer layerId, FJ_OSD_PRINT_COLOR color[2], T_POS postion, CHAR* string, BYTE drawAreaNum);
#endif	// MILB Not Use
BOOL FJ_DirectSelectFont(E_Draw_Type ulFontId);
FJ_ERR_CODE 	FJ_DirectLoadFont(CHAR const* const szFontName);
FJ_ERR_CODE	FJ_LoadStringFile(CHAR const* const StringFileName);
FJ_ERR_CODE FJ_SetRGBAPalette(const char* RGBPaletteTableName);
FJ_ERR_CODE FJ_Set_Display_Stream(UINT32 stream_idx);
FJ_ERR_CODE FJ_Get_Display_Stream(UINT32* stream_idx);
FJ_ERR_CODE FJ_OSDTextOutID(E_OSDLayer layerId, INT32 wStartX, INT32 wStartY, INT32 wLength, INT32 uwStringID
							,E_DrawMode DrawMode, BYTE alpha, BYTE drawAreaNum);
FJ_ERR_CODE	FJ_DrawFile(E_OSDLayer layerId, FJ_GR_FILE_TYPE wFileType, CHAR* FileName,
						USHORT uStartX, USHORT uStartY, USHORT uWidth, USHORT uHight, BYTE drawAreaNum);
FJ_ERR_CODE FJ_OSDTextOutbyASCIITable(E_OSDLayer layerID, const T_OSD_TEXT_OUT_BY_ASCII_TABLE_INFO* textOutInfo);
FJ_ERR_CODE FJ_OSD_Icon_Notify_Loading_Complete( E_FJ_RESOURCE_TYPE type, UINT32 addr );

Fjdispa.h更改后公有函数

FJ_ERR_CODE 			fj_disp_a_fj_osd_get_inverse_gamma(FjDispA* self, E_OSDLayer layerId, T_INVERSE_GAMMA_TBL* inverse_gamma);
FJ_ERR_CODE 			fj_disp_a_fj_osd_set_gamma(FjDispA* self, E_OSDLayer layerId, T_GAMMA_TBL const *const gamma);
FJ_ERR_CODE		    fj_disp_a_fj_osd_get_gamma(FjDispA* self, E_OSDLayer layerId, T_GAMMA_TBL* gamma);
FJ_ERR_CODE 			fj_disp_a_fj_osd_set_compensation_table_enable(FjDispA* self, FJ_DISP_TYPE disp_type, E_CORRECT_SELECT select, T_TBL_ACCESS_SET const *const compensation_table);
FJ_ERR_CODE 			fj_disp_a_fj_osd_get_compensation_table_enable(FjDispA* self, FJ_DISP_TYPE disp_type, E_CORRECT_SELECT select, T_TBL_ACCESS_SET* compensation_table);
FJ_ERR_CODE 			fj_disp_a_fj_osd_set_layer_order(FjDispA* self, FJ_DISP_TYPE disp_type, T_ORDER_LAYER const *const order_layer);
FJ_ERR_CODE 			fj_disp_a_fj_osd_get_layer_order(FjDispA* self, FJ_DISP_TYPE disp_type, T_ORDER_LAYER* order_layer);
FJ_ERR_CODE 			fj_disp_a_fj_osd_draw_grid_line(FjDispA* self, FJ_DISP_TYPE disp_type, T_GRID_SET const *const grid_set);
FJ_ERR_CODE 			fj_disp_a_fj_osd_set_grid_line_num(FjDispA* self, FJ_DISP_TYPE disp_type, T_GRID_NUM_SET const *const grid_num_set);
FJ_ERR_CODE 			fj_disp_a_fj_osd_set_grid_line_enable(FjDispA* self, FJ_DISP_TYPE disp_type, BOOL enable);
FJ_ERR_CODE 			fj_disp_a_fj_osd_draw_face_frame(FjDispA* self, FJ_DISP_TYPE disp_type, const T_FACE_FRAME_EACH_SET face_pos[FjDispE_OSD_DRAW_FACE_NUM],  const T_FACE_FRAME_SET* face_set);
FJ_ERR_CODE 			fj_disp_a_fj_osd_set_face_frame_enable(FjDispA* self, FJ_DISP_TYPE disp_type, UINT32 enable, UINT32 top_face);
FJ_ERR_CODE 			fj_disp_a_fj_osd_set_color_bar(FjDispA* self, FJ_DISP_TYPE disp_type, U_RGB_COLOR color[FjDispE_OSD_COLOR_BAR_NUM],  ULONG color_bar_num);
FJ_ERR_CODE 			fj_disp_a_fj_setmaindispbuffaddr(FjDispA* self, E_OSDLayer layerId, ULONG addr[3]);
FJ_ERR_CODE 			fj_disp_a_fj_getmaindispbuffaddr(FjDispA* self, E_OSDLayer layerId, ULONG addr[3]);
FJ_ERR_CODE 			fj_disp_a_fj_setosddispbuffaddr(FjDispA* self, E_OSDLayer layerId, UINT32 drawAreaNum, ULONG addr);
FJ_ERR_CODE 			fj_disp_a_fj_getosddispbuffaddr(FjDispA* self, E_OSDLayer layerId, UINT32 drawAreaNum, ULONG* addr);
FJ_ERR_CODE 			fj_disp_a_fj_set_main_display(FjDispA* self, E_DISP_DEV disp_device, E_FJ_IMAGE_SIZE image_type,E_FJ_IMAGE_FORMAT image_format, ULONG image_global_width);
FJ_ERR_CODE 			fj_disp_a_fj_set_osd_vsync_callback(FjDispA* self, FJ_DISP_TYPE disp_type, BOOL bSetup, VP_CALLBACK pcallback);
FJ_ERR_CODE 			fj_disp_a_fj_osd_flush_draw_area(FjDispA* self, const FJ_OSD_COMM_FLUSH_DARA_AREA_INFO* switch_buffer_infor,UINT32 switch_buffer_infor_size);
FJ_ERR_CODE 			fj_disp_a_fj_loadfontfile(FjDispA* self, CHAR const* const FontName);
FJ_ERR_CODE 			fj_disp_a_fj_clear_osd_buffer(FjDispA* self, E_OSDLayer layerId);
FJ_ERR_CODE 			fj_disp_a_fj_osd_set_blink_on_off(FjDispA* self, E_OSDLayer layerId, BYTE blink_show_period[FjDispE_OSD_DRAW_AREA_NUM], BYTE blink_hide_period[FjDispE_OSD_DRAW_AREA_NUM], ULONG area);
FJ_ERR_CODE 			fj_disp_a_fj_setdisphistogramposition(FjDispA* self, E_OSDLayer layerId, unsigned short histo_x, unsigned short histo_y,
								unsigned short histo_width, unsigned short histo_height, BYTE drawAreaNum);
UINT16 					fj_disp_a_fj_gethistogramwidth(FjDispA* self, E_OSDLayer layerId);
UINT16 					fj_disp_a_fj_getHistogramheight(FjDispA* self, E_OSDLayer layerId);
FJ_ERR_CODE 			fj_disp_a_fj_prehistogram(FjDispA* self, E_OSDLayer layerId, UINT32 threshold);
FJ_ERR_CODE 			fj_disp_a_fj_histogramenable(FjDispA* self, E_OSDLayer layerId);
FJ_ERR_CODE			fj_disp_a_FJ_osddrawshape(FjDispA* self, E_OSDLayer layerId, E_FJ_OSD_SHAPE_TYPE wType,
								INT32 wStartX, INT32 wStartY, INT32 uwWidth, INT32 uwHeight, BYTE drawAreaNum);
#if 0	// MILB Not Use
FJ_ERR_CODE 			fj_disp_a_fj_osddrawline(FjDispA* self, E_OSDLayer layerId, const FJ_LINE_COORDINATES* line, USHORT Thickness, BYTE TerminatorType, BYTE drawAreaNum);
#endif	// MILB Not Use
FJ_ERR_CODE 			fj_disp_a_FJ_osddrawimage(FjDispA* self, E_OSDLayer layerId, UCHAR* yAddr, UCHAR* c_addr,
							    USHORT start_x, USHORT start_y, USHORT width, USHORT height);
FJ_ERR_CODE 			fj_disp_a_FJ_osddrawbufferosd(FjDispA* self, E_OSDLayer layerId, BYTE* addr_src, T_Rect const* const draw_info, BYTE drawAreaNum, USHORT global_width);
FJ_ERR_CODE 			fj_disp_a_FJ_osdclearpart(FjDispA* self, E_OSDLayer layerId, T_Rect clear_rect, BYTE drawAreaNum);
#if 0	// MILB Not Use
FJ_ERR_CODE			 fj_disp_a_fj_setgda(FjDispA* self, FJ_E_OSD_GDA_ATTR_TYPE bAttr, INT32 wParam1, INT32 wParam2);
#endif	// MILB Not Use
#if 0	// MILB Not Use
FJ_ERR_CODE 			fj_disp_a_FJ_drawshape(FjDispA* self, FJ_E_OSD_SHAPE_TYPE bShapeType, SHORT wStartX, SHORT wStartY,
						 	 	USHORT uwSizeX, USHORT uwSizeY, USHORT uwGlobalWidth, FJ_T_OSD_ADDR_YCC const* const image_addr);
#endif	// MILB Not Use
#if 0	// MILB Not Use
FJ_ERR_CODE 			fj_disp_a_fj_osdprint(FjDispA* self, E_OSDLayer layerId, FJ_OSD_PRINT_COLOR color[2], T_POS postion, CHAR* string, BYTE drawAreaNum);
#endif	// MILB Not Use
BOOL 						fj_disp_a_fj_directselectfont(FjDispA* self, E_Draw_Type ulFontId);
FJ_ERR_CODE 			fj_disp_a_Fj_directloadfont(FjDispA* self, CHAR const* const szFontName);
FJ_ERR_CODE			fj_disp_a_fj_loadstringfile(FjDispA* self, CHAR const* const StringFileName);
extern FJ_ERR_CODE
								fj_disp_a_fj_setrgbapalette(FjDispA* self, const char* RGBPaletteTableName);
FJ_ERR_CODE 			fj_disp_a_fj_set_display_stream(FjDispA* self, UINT32 stream_idx);
FJ_ERR_CODE 			fj_disp_a_fj_get_display_stream(FjDispA* self, UINT32* stream_idx);
FJ_ERR_CODE 			fj_disp_a_fj_osdtextoutid(FjDispA* self, E_OSDLayer layerId, INT32 wStartX, INT32 wStartY, INT32 wLength, INT32 uwStringID
								,E_DrawMode DrawMode, BYTE alpha, BYTE drawAreaNum);
FJ_ERR_CODE			fj_disp_a_fj_drawfile(FjDispA* self, E_OSDLayer layerId, FJ_GR_FILE_TYPE wFileType, CHAR* FileName,
								USHORT uStartX, USHORT uStartY, USHORT uWidth, USHORT uHight, BYTE drawAreaNum);
FJ_ERR_CODE 			fj_disp_a_fj_osdtextoutbyasciitable(FjDispA* self, E_OSDLayer layerID, const T_OSD_TEXT_OUT_BY_ASCII_TABLE_INFO* textOutInfo);
FJ_ERR_CODE		    fj_disp_a_fj_osd_icon_notify_loading_complete( FjDispA* self, E_FJ_RESOURCE_TYPE type, UINT32 addr );



由fj_disp.h拆分出的fjdispb.h文件
枚举            
修改前  typedef enum
  FJ_DISP_ROTATE_DEGREE 
  {
  FJ_DISP_ROTATE_DEGREE_0 = 0,	/**< not rotate						*/
	FJ_DISP_ROTATE_DEGREE_90,		/**< rotate 90 degree (clockwise)	*/
	FJ_DISP_ROTATE_DEGREE_180,		/**< rotate 180 degree (clockwise)	*/
	FJ_DISP_ROTATE_DEGREE_270,	
  }
  
修改后 FjDispRotateDegree
{
FjDispB_FJ_DISP_ROTATE_DEGREE_0 = 0,	/**< not rotate						*/
	FjDispB_FJ_DISP_ROTATE_DEGREE_90,		/**< rotate 90 degree (clockwise)	*/
	FjDispB_FJ_DISP_ROTATE_DEGREE_180,		/**< rotate 180 degree (clockwise)	*/
	FjDispB_FJ_DISP_ROTATE_DEGREE_270,		/**< rotate 270 degree (clockwise)	*/
}

修改前 FJ_DISP_LCD_SCAN_MODE	
{
FJ_DISP_LCD_SCAN_MODE_PROGRESSIVE = 0,			/**< Progressive		*/
	FJ_DISP_LCD_SCAN_MODE_INTERLACE,				/**< Interlace			*/
}

修改后 FjDispLcdScanMode
{
FjDispB_FJ_DISP_LCD_SCAN_MODE_PROGRESSIVE = 0,			/**< Progressive		*/
	FjDispB_FJ_DISP_LCD_SCAN_MODE_INTERLACE,				/**< Interlace			*/
}

修改前  FJ_DISP_LCD_EDGE_TYPE	
{

FJ_DISP_LCD_EDGE_TYPE_FALL = 0,					/**< Data changes near the falling edge of the clock	*/
	FJ_DISP_LCD_EDGE_TYPE_RISE,	
}
			
修改后 	FjDispLcdEdgeType
{
FjDispB_FJ_DISP_LCD_EDGE_TYPE_FALL = 0,					/**< Data changes near the falling edge of the clock	*/
	FjDispB_FJ_DISP_LCD_EDGE_TYPE_RISE,						/**< Data changes near the rising edge of the clock		*/
}

修改前 FJ_DISP_LCD_POLARITY_TYPE 	
{
FJ_DISP_LCD_POLARITY_TYPE_POSITIVE = 0,			/**< Positive polarity		*/
	FJ_DISP_LCD_POLARITY_TYPE_NEGATIVE,				/**< Negative polarity		*/
}
修改后  FjDispLcdPolarityType
{
FjDispB_FJ_DISP_LCD_POLARITY_TYPE_POSITIVE = 0,			/**< Positive polarity		*/
	FjDispB_FJ_DISP_LCD_POLARITY_TYPE_NEGATIVE,				/**< Negative polarity		*/
}

修改前 FJ_DISP_LCD_PIX_FMT
{
FJ_DISP_LCD_PIX_FMT_DELTA = 0,					/**< Delta				*/
	FJ_DISP_LCD_PIX_FMT_STRIPE,						/**< Stripe				*/
}
修改后  FjDispLcdPixFmt
{
FjDispB_FJ_DISP_LCD_PIX_FMT_DELTA = 0,					/**< Delta				*/
	FjDispB_FJ_DISP_LCD_PIX_FMT_STRIPE,						/**< Stripe				*/
}

修改前  FJ_DISP_LCD_OUTPUT_MODE
{
FJ_DISP_LCD_OUTPUT_MODE_RGB888_24BIT	= 0x00,			/**< RGB888 24bit									*/
	FJ_DISP_LCD_OUTPUT_MODE_RGB888_8BIT_1	= 0x04,			/**< RGB888 8bit 1 (R0->G1->B2->R3->G4->B5->...)	*/
	FJ_DISP_LCD_OUTPUT_MODE_RGB888_8BIT_2	= 0x05,			/**< RGB888 8bit 2 (R0->G0->B0->R1->G1->B1->...)	*/
	FJ_DISP_LCD_OUTPUT_MODE_RGB888_8BIT_3	= 0x06,			/**< RGB888 8bit 3 (RGB-dummy)						*/
	FJ_DISP_LCD_OUTPUT_MODE_RGB565_16BIT	= 0x0D,			/**< RGB565 16bit									*/
	FJ_DISP_LCD_OUTPUT_MODE_RGB666_18BIT	= 0x0E,			/**< RGB666 18bit									*/
	FJ_DISP_LCD_OUTPUT_MODE_YCC422_8BIT		= 0x40,			/**< YCbCr422 8bit									*/
	FJ_DISP_LCD_OUTPUT_MODE_YCC422_16BIT	= 0x41,			/**< YCbCr422 16bit									*/
}

修改后  FjdispLcdOutputMode
{
FjDispB_FJ_DISP_LCD_OUTPUT_MODE_RGB888_24BIT	= 0x00,			/**< RGB888 24bit									*/
	FjDispB_FJ_DISP_LCD_OUTPUT_MODE_RGB888_8BIT_1	= 0x04,			/**< RGB888 8bit 1 (R0->G1->B2->R3->G4->B5->...)	*/
	FjDispB_FJ_DISP_LCD_OUTPUT_MODE_RGB888_8BIT_2	= 0x05,			/**< RGB888 8bit 2 (R0->G0->B0->R1->G1->B1->...)	*/
	FjDispB_FJ_DISP_LCD_OUTPUT_MODE_RGB888_8BIT_3	= 0x06,			/**< RGB888 8bit 3 (RGB-dummy)						*/
	FjDispB_FJ_DISP_LCD_OUTPUT_MODE_RGB888_8BIT_3	= 0x0D,			/**< RGB565 16bit									*/
	FjDispB_FJ_DISP_LCD_OUTPUT_MODE_RGB666_18BIT	= 0x0E,			/**< RGB666 18bit									*/
	FjDispB_FJ_DISP_LCD_OUTPUT_MODE_YCC422_8BIT		= 0x40,			/**< YCbCr422 8bit									*/
	FjDispB_FJ_DISP_LCD_OUTPUT_MODE_YCC422_16BIT	= 0x41,			/**< YCbCr422 16bit									*/
}

修改前  FJ_DISP_LCD_OUTPUT_ORDER			
{
FJ_DISP_LCD_OUTPUT_ORDER_R_Y0	= 0,					/**< R (or Y0)		*/
	FJ_DISP_LCD_OUTPUT_ORDER_G_CB,							/**< G (or CB)		*/
	FJ_DISP_LCD_OUTPUT_ORDER_B_CR,							/**< B (or CR)		*/
	FJ_DISP_LCD_OUTPUT_ORDER_0_Y1,							/**< 0 (or Y1)		*/
}

修改后  FjdispLcdOutputOrder
{
FjDispB_FJ_DISP_LCD_OUTPUT_ORDER_R_Y0	= 0,					/**< R (or Y0)		*/
	FjDispB_FJ_DISP_LCD_OUTPUT_ORDER_G_CB,							/**< G (or CB)		*/
	FjDispB_FJ_DISP_LCD_OUTPUT_ORDER_B_CR,							/**< B (or CR)		*/
	FjDispB_FJ_DISP_LCD_OUTPUT_ORDER_0_Y1,							/**< 0 (or Y1)		*/
}

修改前 FJ_DISP_LCD_CONNECT_STATE
{
FJ_DISP_LCD_CONNECT_STATE_OFF = 0,
	FJ_DISP_LCD_CONNECT_STATE_ON
}
			
修改后  FjdispLcdConnectState
{
FjDispB_FJ_DISP_LCD_CONNECT_STATE_OFF = 0,
	FjDispB_FJ_DISP_LCD_CONNECT_STATE_ON
}

修改前 FJ_DISP_TYPE	
{
FJ_DISP_TYPE_LCD  = 0,		/**< LCD */
	FJ_DISP_TYPE_HDMI,			/**< HDMI */
}

修改后  FjDispType
{
FjDispB_FJ_DISP_TYPE_LCD  = 0,		/**< LCD */
	FjDispB_FJ_DISP_TYPE_HDMI,			/**< HDMI */
}

修改前  FJ_DISP_HDMI_FLAG_BIT_MAP	
{
FJ_DISP_HDMI_FLAG_BIT_MAP_HSYNC     = 0x02,			/**< H-sync polarity. 0 = negative, 1 = positive	*/
	FJ_DISP_HDMI_FLAG_BIT_MAP_VSYNC     = 0x04,			/**< V-sync polarity. 0 = negative, 1 = positive	*/
	FJ_DISP_HDMI_FLAG_BIT_MAP_INTERLACE = 0x80,			/**< Interlace flag	. 0 = non interlace, 1 = interlace	*/
}

修改后  FjdispHdmiFlagBitmap
{
FjDispB_FJ_DISP_HDMI_FLAG_BIT_MAP_HSYNC     = 0x02,			/**< H-sync polarity. 0 = negative, 1 = positive	*/
	FjDispB_FJ_DISP_HDMI_FLAG_BIT_MAP_VSYNC     = 0x04,			/**< V-sync polarity. 0 = negative, 1 = positive	*/
	FjDispB_FJ_DISP_HDMI_FLAG_BIT_MAP_INTERLACE = 0x80,			/**< Interlace flag	. 0 = non interlace, 1 = interlace	*/
}

修改前 FJ_DISP_VIDEO_ID	
{
FJ_DISP_VIDEO_ID_NONE				= 0,	/**<  None. ID is not support.								*/
	FJ_DISP_VIDEO_ID_DMT0659			= 1,	/**<   4:3                640x480p @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_480p				= 2,	/**<   4:3    8:9         720x480p @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_480pH				= 3,	/**<  16:9   32:37        720x480p @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_720p				= 4,	/**<  16:9    1:1        1280x720p @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_1080i				= 5,	/**<  16:9    1:1       1920x1080i @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_480i				= 6,	/**<   4:3    8:9   720(1440)x480i @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_480iH				= 7,	/**<  16:9   32:37  720(1440)x480i @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_240p				= 8,	/**<   4:3    8:9   720(1440)x240p @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_240pH				= 9,	/**<  16:9   32:37  720(1440)x240p @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_480i4x				= 10,	/**<   4:3    8:9      (2880)x480i @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_480i4xH			= 11,	/**<  16:9   32:37     (2880)x480i @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_240p4x				= 12,	/**<   4:3    8:9      (2880)x240p @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_240p4xH			= 13,	/**<  16:9   32:37     (2880)x240p @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_480p2x				= 14,	/**<   4:3    8:9        1440x480p @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_480p2xH			= 15,	/**<  16:9   32:37       1440x480p @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_1080p				= 16,	/**<  16:9    1:1       1920x1080p @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_576p				= 17,	/**<   4:3   16:15        720x576p @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_576pH				= 18,	/**<  16:9   64:45        720x576p @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_720p50				= 19,	/**<  16:9    1:1        1280x720p @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_1080i25			= 20,	/**<  16:9    1:1       1920x1080i @ 50 Hz*					*/
	FJ_DISP_VIDEO_ID_576i				= 21,	/**<   4:3   16:15  720(1440)x576i @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_576iH				= 22,	/**<  16:9   64:45  720(1440)x576i @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_288p				= 23,	/**<   4:3   16:15  720(1440)x288p @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_288pH				= 24,	/**<  16:9   64:45  720(1440)x288p @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_576i4x				= 25,	/**<   4:3   16:15     (2880)x576i @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_576i4xH			= 26,	/**<  16:9   64:45     (2880)x576i @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_288p4x				= 27,	/**<   4:3   16:15     (2880)x288p @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_288p4xH			= 28,	/**<  16:9   64:45     (2880)x288p @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_576p2x				= 29,	/**<   4:3   16:15       1440x576p @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_576p2xH			= 30,	/**<  16:9   64:45       1440x576p @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_1080p50			= 31,	/**<  16:9    1:1       1920x1080p @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_1080p24			= 32,	/**<  16:9    1:1       1920x1080p @ 23.98/24 Hz			*/
	FJ_DISP_VIDEO_ID_1080p25			= 33,	/**<  16:9    1:1       1920x1080p @ 25 Hz					*/
	FJ_DISP_VIDEO_ID_1080p30			= 34,	/**<  16:9    1:1       1920x1080p @ 29.97/30 Hz			*/
	FJ_DISP_VIDEO_ID_480p4x				= 35,	/**<   4:3    8:9      (2880)x480p @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_480p4xH			= 36,	/**<  16:9   32:37     (2880)x480p @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_576p4x				= 37,	/**<   4:3   16:15     (2880)x576p @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_576p4xH			= 38,	/**<  16:9   64:45     (2880)x576p @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_1080i25_1250		= 39,	/**<  16:9    1:1       1920x1080i @ 50 Hz* (1250 Total)	*/
	FJ_DISP_VIDEO_ID_1080i50			= 40,	/**<  16:9    1:1       1920x1080i @ 100 Hz					*/
	FJ_DISP_VIDEO_ID_720p100			= 41,	/**<  16:9    1:1        1280x720p @ 100 Hz					*/
	FJ_DISP_VIDEO_ID_576p100			= 42,	/**<   4:3    8:9         720x576p @ 100 Hz					*/
	FJ_DISP_VIDEO_ID_576p100H			= 43,	/**<  16:9   32:37        720x576p @ 100 Hz					*/
	FJ_DISP_VIDEO_ID_576i50				= 44,	/**<   4:3   16:15  720(1440)x576i @ 100 Hz					*/
	FJ_DISP_VIDEO_ID_576i50H			= 45,	/**<  16:9   64:45  720(1440)x576i @ 100 Hz					*/
	FJ_DISP_VIDEO_ID_1080i60			= 46,	/**<  16:9    1:1       1920x1080i @ 119.88/120 Hz			*/
	FJ_DISP_VIDEO_ID_720p120			= 47,	/**<  16:9    1:1        1280x720p @ 119.88/120 Hz			*/
	FJ_DISP_VIDEO_ID_480p119			= 48,	/**<   4:3   16:15        720x480p @ 119.88/120 Hz			*/
	FJ_DISP_VIDEO_ID_480p119H			= 49,	/**<  16:9   64:45        720x480p @ 119.88/120 Hz			*/
	FJ_DISP_VIDEO_ID_480i59				= 50,	/**<   4:3    8:9   720(1440)x480i @ 119.88/120 Hz			*/
	FJ_DISP_VIDEO_ID_480i59H			= 51,	/**<  16:9   32:37  720(1440)x480i @ 119.88/120 Hz			*/
	FJ_DISP_VIDEO_ID_576p200			= 52,	/**<   4:3   16:15        720x576p @ 200 Hz					*/
	FJ_DISP_VIDEO_ID_576p200H			= 53,	/**<  16:9   64:45        720x576p @ 200 Hz					*/
	FJ_DISP_VIDEO_ID_576i100			= 54,	/**<   4:3   16:15  720(1440)x576i @ 200 Hz					*/
	FJ_DISP_VIDEO_ID_576i100H			= 55,	/**<  16:9   64:45  720(1440)x576i @ 200 Hz					*/
	FJ_DISP_VIDEO_ID_480p239			= 56,	/**<   4:3    8:9         720x480p @ 239.76/240 Hz			*/
	FJ_DISP_VIDEO_ID_480p239H			= 57,	/**<  16:9   32:37        720x480p @ 239.76/240 Hz			*/
	FJ_DISP_VIDEO_ID_480i119			= 58,	/**<   4:3    8:9   720(1440)x480i @ 239.76/240 Hz			*/
	FJ_DISP_VIDEO_ID_480i119H			= 59,	/**<  16:9   32:37  720(1440)x480i @ 239.76/240 Hz			*/
	FJ_DISP_VIDEO_ID_720p24				= 60,	/**<  16:9    1:1        1280x720p @ 23.98/24 Hz			*/
	FJ_DISP_VIDEO_ID_720p25				= 61,	/**<  16:9    1:1        1280x720p @ 25Hz					*/
	FJ_DISP_VIDEO_ID_720p30				= 62,	/**<  16:9    1:1        1280x720p @ 29.97/30 Hz			*/
	FJ_DISP_VIDEO_ID_1080p120			= 63,	/**<  16:9    1:1       1920x1080p @ 119.88/120 Hz			*/
	FJ_DISP_VIDEO_ID_1080p100			= 64,	/**<  16:9    1:1       1920x1080p @ 100 Hz					*/
	FJ_DISP_VIDEO_ID_720p24_UW			= 65,	/**<  64:27   4:3        1280x720p @ 23.98/24 Hz			*/
	FJ_DISP_VIDEO_ID_720p25_UW			= 66,	/**<  64:27   4:3        1280x720p @ 25Hz					*/
	FJ_DISP_VIDEO_ID_720p30_UW			= 67,	/**<  64:27   4:3        1280x720p @ 29.97/30 Hz			*/
	FJ_DISP_VIDEO_ID_720p50_UW			= 68,	/**<  64:27   4:3        1280x720p @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_720p_UW			= 69,	/**<  64:27   4:3        1280x720p @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_720p100_UW			= 70,	/**<  64:27   4:3        1280x720p @ 100 Hz					*/
	FJ_DISP_VIDEO_ID_720p120_UW			= 71,	/**<  64:27   4:3        1280x720p @ 119.88/120 Hz			*/
	FJ_DISP_VIDEO_ID_1080p24_UW			= 72,	/**<  64:27   4:3       1920x1080p @ 23.98/24 Hz			*/
	FJ_DISP_VIDEO_ID_1080p25_UW			= 73,	/**<  64:27   4:3       1920x1080p @ 25Hz					*/
	FJ_DISP_VIDEO_ID_1080p30_UW			= 74,	/**<  64:27   4:3       1920x1080p @ 29.97/30 Hz			*/
	FJ_DISP_VIDEO_ID_1080p50_UW			= 75,	/**<  64:27   4:3       1920x1080p @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_1080p_UW			= 76,	/**<  64:27   4:3       1920x1080p @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_1080p100_UW		= 77,	/**<  64:27   4:3       1920x1080p @ 100 Hz					*/
	FJ_DISP_VIDEO_ID_1080p120_UW		= 78,	/**<  64:27   4:3       1920x1080p @ 119.88/120 Hz			*/
	FJ_DISP_VIDEO_ID_720p24_UW_1680		= 79,	/**<  64:27  64:63       1680x720p @ 23.98/24 Hz			*/
	FJ_DISP_VIDEO_ID_720p25_UW_1680		= 80,	/**<  64:27  64:63       1680x720p @ 25Hz					*/
	FJ_DISP_VIDEO_ID_720p30_UW_1680		= 81,	/**<  64:27  64:63       1680x720p @ 29.97/30 Hz			*/
	FJ_DISP_VIDEO_ID_720p50_UW_1680		= 82,	/**<  64:27  64:63       1680x720p @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_720p_UW_1680		= 83,	/**<  64:27  64:63       1680x720p @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_720p100_UW_1680	= 84,	/**<  64:27  64:63       1680x720p @ 100 Hz					*/
	FJ_DISP_VIDEO_ID_720p120_UW_1680	= 85,	/**<  64:27  64:63       1680x720p @ 119.88/120 Hz			*/
	FJ_DISP_VIDEO_ID_1080p24_UW_2560	= 86,	/**<  64:27   1:1       2560x1080p @ 23.98/24 Hz			*/
	FJ_DISP_VIDEO_ID_1080p25_UW_2560	= 87,	/**<  64:27   1:1       2560x1080p @ 25Hz					*/
	FJ_DISP_VIDEO_ID_1080p30_UW_2560	= 88,	/**<  64:27   1:1       2560x1080p @ 29.97/30 Hz			*/
	FJ_DISP_VIDEO_ID_1080p50_UW_2560	= 89,	/**<  64:27   1:1       2560x1080p @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_1080p_UW_2560		= 90,	/**<  64:27   1:1       2560x1080p @ 59.94/60 Hz 			*/
	FJ_DISP_VIDEO_ID_1080p100_UW_2560	= 91,	/**<  64:27   1:1       2560x1080p @ 100 Hz					*/
	FJ_DISP_VIDEO_ID_1080p120_UW_2560	= 92,	/**<  64:27   1:1       2560x1080p @ 119.88/120 Hz			*/
	FJ_DISP_VIDEO_ID_2160p24_3840		= 93,	/**<  16:9    1:1       3840x2160p @ 23.98/24 Hz			*/
	FJ_DISP_VIDEO_ID_2160p25_3840		= 94,	/**<  16:9    1:1       3840x2160p @ 25Hz					*/
	FJ_DISP_VIDEO_ID_2160p30_3840		= 95,	/**<  16:9    1:1       3840x2160p @ 29.97/30 Hz			*/
	FJ_DISP_VIDEO_ID_2160p50_3840		= 96,	/**<  16:9    1:1       3840x2160p @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_2160p_3840			= 97,	/**<  16:9    1:1       3840x2160p @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_2160p24_4096		= 98,	/**< 256:135  1:1       4096x2160p @ 23.98/24 Hz			*/
	FJ_DISP_VIDEO_ID_2160p25_4096		= 99,	/**< 256:135  1:1       4096x2160p @ 25Hz					*/
	FJ_DISP_VIDEO_ID_2160p30_4096		= 100,	/**< 256:135  1:1       4096x2160p @ 29.97/30 Hz			*/
	FJ_DISP_VIDEO_ID_2160p50_4096		= 101,	/**< 256:135  1:1       4096x2160p @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_2160p_4096			= 102,	/**< 256:135  1:1       4096x2160p @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_2160p24_UW_3840	= 103,	/**<  64:27   4:3       3840x2160p @ 23.98/24 Hz			*/
	FJ_DISP_VIDEO_ID_2160p25_UW_3840	= 104,	/**<  64:27   4:3       3840x2160p @ 25Hz					*/
	FJ_DISP_VIDEO_ID_2160p30_UW_3840	= 105,	/**<  64:27   4:3       3840x2160p @ 29.97/30 Hz			*/
	FJ_DISP_VIDEO_ID_2160p50_UW_3840	= 106,	/**<  64:27   4:3       3840x2160p @ 50 Hz					*/
	FJ_DISP_VIDEO_ID_2160p_UW_3840		= 107,	/**<  64:27   4:3       3840x2160p @ 59.94/60 Hz			*/
	FJ_DISP_VIDEO_ID_MAX						/**<  Stopper 												*/
}

修改后 FjDispVideoId
{
FjDispB_FJ_DISP_VIDEO_ID_NONE				= 0,	/**<  None. ID is not support.								*/
	FjDispB_FJ_DISP_VIDEO_ID_DMT0659			= 1,	/**<   4:3                640x480p @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_480p				= 2,	/**<   4:3    8:9         720x480p @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_480pH				= 3,	/**<  16:9   32:37        720x480p @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_720p				= 4,	/**<  16:9    1:1        1280x720p @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_1080i				= 5,	/**<  16:9    1:1       1920x1080i @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_480i				= 6,	/**<   4:3    8:9   720(1440)x480i @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_480iH				= 7,	/**<  16:9   32:37  720(1440)x480i @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_240p				= 8,	/**<   4:3    8:9   720(1440)x240p @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_240pH				= 9,	/**<  16:9   32:37  720(1440)x240p @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_480i4x				= 10,	/**<   4:3    8:9      (2880)x480i @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_480i4xH			= 11,	/**<  16:9   32:37     (2880)x480i @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_240p4x				= 12,	/**<   4:3    8:9      (2880)x240p @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_240p4xH			= 13,	/**<  16:9   32:37     (2880)x240p @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_480p2x				= 14,	/**<   4:3    8:9        1440x480p @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_480p2xH			= 15,	/**<  16:9   32:37       1440x480p @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p				= 16,	/**<  16:9    1:1       1920x1080p @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_576p				= 17,	/**<   4:3   16:15        720x576p @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_576pH				= 18,	/**<  16:9   64:45        720x576p @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_720p50				= 19,	/**<  16:9    1:1        1280x720p @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_1080i25			= 20,	/**<  16:9    1:1       1920x1080i @ 50 Hz*					*/
	FjDispB_FJ_DISP_VIDEO_ID_576i				= 21,	/**<   4:3   16:15  720(1440)x576i @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_576iH				= 22,	/**<  16:9   64:45  720(1440)x576i @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_288p				= 23,	/**<   4:3   16:15  720(1440)x288p @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_288pH				= 24,	/**<  16:9   64:45  720(1440)x288p @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_576i4x				= 25,	/**<   4:3   16:15     (2880)x576i @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_576i4xH			= 26,	/**<  16:9   64:45     (2880)x576i @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_288p4x				= 27,	/**<   4:3   16:15     (2880)x288p @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_288p4xH			= 28,	/**<  16:9   64:45     (2880)x288p @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_576p2x				= 29,	/**<   4:3   16:15       1440x576p @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_576p2x			= 30,	/**<  16:9   64:45       1440x576p @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_576p2x			= 31,	/**<  16:9    1:1       1920x1080p @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p24			= 32,	/**<  16:9    1:1       1920x1080p @ 23.98/24 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p25			= 33,	/**<  16:9    1:1       1920x1080p @ 25 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p30			= 34,	/**<  16:9    1:1       1920x1080p @ 29.97/30 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_480p4x				= 35,	/**<   4:3    8:9      (2880)x480p @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_480p4xH			= 36,	/**<  16:9   32:37     (2880)x480p @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_576p4x				= 37,	/**<   4:3   16:15     (2880)x576p @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_576p4xH			= 38,	/**<  16:9   64:45     (2880)x576p @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_1080i25_1250		= 39,	/**<  16:9    1:1       1920x1080i @ 50 Hz* (1250 Total)	*/
	FjDispB_FJ_DISP_VIDEO_ID_1080i50			= 40,	/**<  16:9    1:1       1920x1080i @ 100 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_720p100			= 41,	/**<  16:9    1:1        1280x720p @ 100 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_576p100			= 42,	/**<   4:3    8:9         720x576p @ 100 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_576p100H			= 43,	/**<  16:9   32:37        720x576p @ 100 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_576i50				= 44,	/**<   4:3   16:15  720(1440)x576i @ 100 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_576i50H			= 45,	/**<  16:9   64:45  720(1440)x576i @ 100 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_1080i60			= 46,	/**<  16:9    1:1       1920x1080i @ 119.88/120 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_720p120			= 47,	/**<  16:9    1:1        1280x720p @ 119.88/120 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_480p119			= 48,	/**<   4:3   16:15        720x480p @ 119.88/120 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_480p119H			= 49,	/**<  16:9   64:45        720x480p @ 119.88/120 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_480i59				= 50,	/**<   4:3    8:9   720(1440)x480i @ 119.88/120 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_480i59H			= 51,	/**<  16:9   32:37  720(1440)x480i @ 119.88/120 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_576p200			= 52,	/**<   4:3   16:15        720x576p @ 200 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_576p200H			= 53,	/**<  16:9   64:45        720x576p @ 200 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_576i100			= 54,	/**<   4:3   16:15  720(1440)x576i @ 200 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_576i100H			= 55,	/**<  16:9   64:45  720(1440)x576i @ 200 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_480p239			= 56,	/**<   4:3    8:9         720x480p @ 239.76/240 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_480p239H			= 57,	/**<  16:9   32:37        720x480p @ 239.76/240 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_480i119			= 58,	/**<   4:3    8:9   720(1440)x480i @ 239.76/240 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_480i119H			= 59,	/**<  16:9   32:37  720(1440)x480i @ 239.76/240 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_720p24				= 60,	/**<  16:9    1:1        1280x720p @ 23.98/24 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_720p25				= 61,	/**<  16:9    1:1        1280x720p @ 25Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_720p30				= 62,	/**<  16:9    1:1        1280x720p @ 29.97/30 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p120			= 63,	/**<  16:9    1:1       1920x1080p @ 119.88/120 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p100			= 64,	/**<  16:9    1:1       1920x1080p @ 100 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_720p24_UW			= 65,	/**<  64:27   4:3        1280x720p @ 23.98/24 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_720p25_UW			= 66,	/**<  64:27   4:3        1280x720p @ 25Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_720p30_UW			= 67,	/**<  64:27   4:3        1280x720p @ 29.97/30 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_720p50_UW			= 68,	/**<  64:27   4:3        1280x720p @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_720p_UW			= 69,	/**<  64:27   4:3        1280x720p @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_720p100_UW			= 70,	/**<  64:27   4:3        1280x720p @ 100 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_720p120_UW			= 71,	/**<  64:27   4:3        1280x720p @ 119.88/120 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p24_UW			= 72,	/**<  64:27   4:3       1920x1080p @ 23.98/24 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p25_UW			= 73,	/**<  64:27   4:3       1920x1080p @ 25Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p30_UW			= 74,	/**<  64:27   4:3       1920x1080p @ 29.97/30 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p50_UW			= 75,	/**<  64:27   4:3       1920x1080p @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p_UW			= 76,	/**<  64:27   4:3       1920x1080p @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p100_UW		= 77,	/**<  64:27   4:3       1920x1080p @ 100 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p120_UW		= 78,	/**<  64:27   4:3       1920x1080p @ 119.88/120 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_720p24_UW_1680		= 79,	/**<  64:27  64:63       1680x720p @ 23.98/24 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_720p25_UW_1680		= 80,	/**<  64:27  64:63       1680x720p @ 25Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_720p30_UW_1680		= 81,	/**<  64:27  64:63       1680x720p @ 29.97/30 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_720p50_UW_1680		= 82,	/**<  64:27  64:63       1680x720p @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_720p_UW_1680		= 83,	/**<  64:27  64:63       1680x720p @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_720p100_UW_1680	= 84,	/**<  64:27  64:63       1680x720p @ 100 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_720p120_UW_1680	= 85,	/**<  64:27  64:63       1680x720p @ 119.88/120 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p24_UW_2560	= 86,	/**<  64:27   1:1       2560x1080p @ 23.98/24 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p25_UW_2560	= 87,	/**<  64:27   1:1       2560x1080p @ 25Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p30_UW_2560	= 88,	/**<  64:27   1:1       2560x1080p @ 29.97/30 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p50_UW_2560	= 89,	/**<  64:27   1:1       2560x1080p @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p_UW_2560		= 90,	/**<  64:27   1:1       2560x1080p @ 59.94/60 Hz 			*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p100_UW_2560	= 91,	/**<  64:27   1:1       2560x1080p @ 100 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_1080p120_UW_2560	= 92,	/**<  64:27   1:1       2560x1080p @ 119.88/120 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_2160p24_3840		= 93,	/**<  16:9    1:1       3840x2160p @ 23.98/24 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_2160p25_3840		= 94,	/**<  16:9    1:1       3840x2160p @ 25Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_2160p30_3840		= 95,	/**<  16:9    1:1       3840x2160p @ 29.97/30 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_2160p50_3840		= 96,	/**<  16:9    1:1       3840x2160p @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_2160p_3840			= 97,	/**<  16:9    1:1       3840x2160p @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_2160p24_4096		= 98,	/**< 256:135  1:1       4096x2160p @ 23.98/24 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_2160p25_4096		= 99,	/**< 256:135  1:1       4096x2160p @ 25Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_2160p30_4096		= 100,	/**< 256:135  1:1       4096x2160p @ 29.97/30 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_2160p50_4096		= 101,	/**< 256:135  1:1       4096x2160p @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_2160p_4096			= 102,	/**< 256:135  1:1       4096x2160p @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_2160p24_UW_3840	= 103,	/**<  64:27   4:3       3840x2160p @ 23.98/24 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_2160p25_UW_3840	= 104,	/**<  64:27   4:3       3840x2160p @ 25Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_2160p30_UW_3840	= 105,	/**<  64:27   4:3       3840x2160p @ 29.97/30 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_2160p50_UW_3840	= 106,	/**<  64:27   4:3       3840x2160p @ 50 Hz					*/
	FjDispB_FJ_DISP_VIDEO_ID_2160p_UW_3840		= 107,	/**<  64:27   4:3       3840x2160p @ 59.94/60 Hz			*/
	FjDispB_FJ_DISP_VIDEO_ID_MAX						/**<  Stopper 										
}

修改前 FJ_DISP_HDMI_SPD_DEV_TYPE
{
FJ_DISP_HDMI_SPD_DEV_TYPE_UNKNOWN = 0,			/**< unknown			*/
	FJ_DISP_HDMI_SPD_DEV_TYPE_DIGITAL_STB,			/**< Digital STB		*/
	FJ_DISP_HDMI_SPD_DEV_TYPE_DVD_PLAYER,			/**< DVD player			*/
	FJ_DISP_HDMI_SPD_DEV_TYPE_D_VHS,				/**< D-VHS				*/
	FJ_DISP_HDMI_SPD_DEV_TYPE_HDD_VIDEORECORDER,	/**< HDD Videorecorder	*/
	FJ_DISP_HDMI_SPD_DEV_TYPE_DVC,					/**< DVC				*/
	FJ_DISP_HDMI_SPD_DEV_TYPE_DSC,					/**< DSC				*/
	FJ_DISP_HDMI_SPD_DEV_TYPE_VIDEO_CD,				/**< Video CD			*/
	FJ_DISP_HDMI_SPD_DEV_TYPE_GAME,					/**< Game				*/
	FJ_DISP_HDMI_SPD_DEV_TYPE_PC_GENERAL,			/**< PC general			*/
	FJ_DISP_HDMI_SPD_DEV_TYPE_BLURAY_DISC,			/**< Blu-Ray Disc		*/
	FJ_DISP_HDMI_SPD_DEV_TYPE_SUPER_AUDIO_CD,		/**< Super Audio CD		*/
	FJ_DISP_HDMI_SPD_DEV_TYPE_MAX					/**< Stopper			*/
}
修改后 FjdispHdmiSpdDevtype 
{
FjDispB_FJ_DISP_HDMI_SPD_DEV_TYPE_UNKNOWN = 0,			/**< unknown			*/
	FjDispB_FJ_DISP_HDMI_SPD_DEV_TYPE_DIGITAL_STB,			/**< Digital STB		*/
	FjDispB_FJ_DISP_HDMI_SPD_DEV_TYPE_DVD_PLAYER,			/**< DVD player			*/
	FjDispB_FJ_DISP_HDMI_SPD_DEV_TYPE_D_VHS,				/**< D-VHS				*/
	FjDispB_FJ_DISP_HDMI_SPD_DEV_TYPE_HDD_VIDEORECORDER,	/**< HDD Videorecorder	*/
	FjDispB_FJ_DISP_HDMI_SPD_DEV_TYPE_DVC,					/**< DVC				*/
	FjDispB_FJ_DISP_HDMI_SPD_DEV_TYPE_DSC,					/**< DSC				*/
	FjDispB_FJ_DISP_HDMI_SPD_DEV_TYPE_VIDEO_CD,				/**< Video CD			*/
	FjDispB_FJ_DISP_HDMI_SPD_DEV_TYPE_GAME,					/**< Game				*/
	FjDispB_FJ_DISP_HDMI_SPD_DEV_TYPE_PC_GENERAL,			/**< PC general			*/
	FjDispB_FJ_DISP_HDMI_SPD_DEV_TYPE_BLURAY_DISC,			/**< Blu-Ray Disc		*/
	FjDispB_FJ_DISP_HDMI_SPD_DEV_TYPE_SUPER_AUDIO_CD,		/**< Super Audio CD		*/
	FjDispB_FJ_DISP_HDMI_SPD_DEV_TYPE_MAX					/**< Stopper			*/
}
修改前 FJ_DISP_HDMI_VENDOR_SPEC_VIDEO_FORMAT 
{
FJ_DISP_HDMI_VENDOR_SPEC_VIDEO_FORMAT_NO	= 0x00,		/**< No additional */
	FJ_DISP_HDMI_VENDOR_SPEC_VIDEO_FORMAT_EX	= 0x20,		/**< Extended resolution format (e.g. used for 4K x 2K video) */
	FJ_DISP_HDMI_VENDOR_SPEC_VIDEO_FORMAT_3D	= 0x40		/**< 3D format */
}

修改后 FjdispHdmivendorSpecvideoFormat
{
FjDispB_FJ_DISP_HDMI_VENDOR_SPEC_VIDEO_FORMAT_NO	= 0x00,		/**< No additional */
	FjDispB_FJ_DISP_HDMI_VENDOR_SPEC_VIDEO_FORMAT_EX	= 0x20,		/**< Extended resolution format (e.g. used for 4K x 2K video) */
	FjDispB_FJ_DISP_HDMI_VENDOR_SPEC_VIDEO_FORMAT_3D	= 0x40		/**< 3D format */
}

修改前 FJ_DISP_HDMI_VENDOR_SPEC_VIC	
{
FJ_DISP_HDMI_VENDOR_SPEC_VIC_1_4K2K_30HZ		= 0x1,		/**< 4K x 2K, 29.97, 30Hz */
	FJ_DISP_HDMI_VENDOR_SPEC_VIC_1_4K2K_25HZ		= 0x2,		/**< 4K x 2K, 29.97, 25Hz */
	FJ_DISP_HDMI_VENDOR_SPEC_VIC_1_4K2K_24HZ		= 0x3,		/**< 4K x 2K, 23.98, 24Hz */
	FJ_DISP_HDMI_VENDOR_SPEC_VIC_1_4K2K_24HZ_SMPTE	= 0x4,		/**< 4K x 2K, 29.97, 24Hz (SMPTE) */
}
修改后 FjdispHdmiVendorSpecVic
{
FjDispB_FJ_DISP_HDMI_VENDOR_SPEC_VIC_1_4K2K_30HZ		= 0x1,		/**< 4K x 2K, 29.97, 30Hz */
	FjDispB_FJ_DISP_HDMI_VENDOR_SPEC_VIC_1_4K2K_25HZ		= 0x2,		/**< 4K x 2K, 29.97, 25Hz */
	FjDispB_FJ_DISP_HDMI_VENDOR_SPEC_VIC_1_4K2K_24HZ		= 0x3,		/**< 4K x 2K, 23.98, 24Hz */
	FjDispB_FJ_DISP_HDMI_VENDOR_SPEC_VIC_1_4K2K_24HZ_SMPTE	= 0x4,		/**< 4K x 2K, 29.97, 24Hz (SMPTE) */
}

修改前 FJ_DISP_HDMI_VENDOR_SPEC_3D_STRUCTURE	
{
FJ_DISP_HDMI_VENDOR_SPEC_3D_STRUCTURE_FRAME_PACKING		= 0x00,	/**< Frame packing */
	FJ_DISP_HDMI_VENDOR_SPEC_3D_STRUCTURE_L_DEPTH			= 0x40,	/**< L+depth */
	FJ_DISP_HDMI_VENDOR_SPEC_3D_STRUCTURE_SIDE_BY_SIDE_FULL	= 0x30,	/**< (Side-by-Side(Full) */
	FJ_DISP_HDMI_VENDOR_SPEC_3D_STRUCTURE_SIDE_BY_SIDE_HALF	= 0x80,	/**< Side-by-Side(Half) */
	FJ_DISP_HDMI_VENDOR_SPEC_3D_STRUCTURE_TOP_AND_BOTTOM	= 0x60,	/**< Top-and-Bottom */
}
修改后 FjdispHdmiVendorspec3Dstructure
{
FjDispB_FJ_DISP_HDMI_VENDOR_SPEC_3D_STRUCTURE_FRAME_PACKING		= 0x00,	/**< Frame packing */
	FjDispB_FJ_DISP_HDMI_VENDOR_SPEC_3D_STRUCTURE_L_DEPTH			= 0x40,	/**< L+depth */
	FjDispB_FJ_DISP_HDMI_VENDOR_SPEC_3D_STRUCTURE_SIDE_BY_SIDE_FULL	= 0x30,	/**< (Side-by-Side(Full) */
	FjDispB_FJ_DISP_HDMI_VENDOR_SPEC_3D_STRUCTURE_SIDE_BY_SIDE_HALF	= 0x80,	/**< Side-by-Side(Half) */
	FjDispB_FJ_DISP_HDMI_VENDOR_SPEC_3D_STRUCTURE_TOP_AND_BOTTOM	= 0x60,	/**< Top-and-Bottom */
}

 修改前 FJ_DISP_HDMI_DETECT
 {
FJ_DISP_HDMI_DETECT_DISCONNECTED = 0,	/**< Detected hotplug disconnect */
	FJ_DISP_HDMI_DETECT_CONNECTED			/**< Detected hotplug connect */
 }
 
修改后 FjDispHdmiDetect
{
FjDispB_FJ_DISP_HDMI_DETECT_DISCONNECTED = 0,	/**< Detected hotplug disconnect */
	FjDispB_FJ_DISP_HDMI_DETECT_CONNECTED			/**< Detected hotplug connect */
}

修改前  FJ_DISP_HDMI_CHECK_SIGNAL	
{

FJ_DISP_HDMI_CHECK_SIGNAL_HPD_ONLY		 = 0,	/**< Check HPD only */
	FJ_DISP_HDMI_CHECK_SIGNAL_HPD_RX_SENSE,			/**< Check HPD and RX_SENSE*/
}
修改后 FjdispHdmiCheckSignal
{
FjDispB_FJ_DISP_HDMI_CHECK_SIGNAL_HPD_ONLY		 = 0,	/**< Check HPD only */
	FjDispB_FJ_DISP_HDMI_CHECK_SIGNAL_HPD_RX_SENSE,			/**< Check HPD and RX_SENSE*/
}
修改前 FJ_DISP_MIPI_LANE	
{
FJ_DISP_MIPI_LANE1  = 0,	/**< One data lane(lane 0)					*/
	FJ_DISP_MIPI_LANE2,			/**< Two data lanes(lanes 0 and 1)			*/
	FJ_DISP_MIPI_LANE3,			/**<Three data lanes(lanes 0, 1, and 2)		*/
	FJ_DISP_MIPI_LANE4			/**< Four data lanes(lanes 0, 1, 2, and 3)	*/
}							

修改后 FjDispMipiLane
{
	FjDispB_FJ_DISP_MIPI_LANE1  = 0,	/**< One data lane(lane 0)					*/
	FjDispB_FJ_DISP_MIPI_LANE2,			/**< Two data lanes(lanes 0 and 1)			*/
	FjDispB_FJ_DISP_MIPI_LANE3,			/**<Three data lanes(lanes 0, 1, and 2)		*/
	FjDispB_FJ_DISP_MIPI_LANE4			/**< Four data lanes(lanes 0, 1, 2, and 3)	*/
}
修改前 FJ_DISP_MIPI_CLR	
{
FJ_DISP_MIPI_COR16  = 0x00,		/**< RGB565 16Bit	*/
	FJ_DISP_MIPI_COR18	= 0x03,		/**< RGB666 18Bit	*/
	FJ_DISP_MIPI_COR24	= 0x05,		/**< RGB888 24Bit	*/
}
修改后 FjDispMipiClr
{
FjDispB_FJ_DISP_MIPI_COR16  = 0x00,		/**< RGB565 16Bit	*/
	FjDispB_FJ_DISP_MIPI_COR18	= 0x03,		/**< RGB666 18Bit	*/
	FjDispB_FJ_DISP_MIPI_COR24	= 0x05,		/**< RGB888 24Bit	*/
}
修改前 FJ_DISP_LAYERID_TYPE
{
J_DISP_LAYERID_TYPE_OSD0 = 0,		/**< OSD-0 Layer */
	FJ_DISP_LAYERID_TYPE_OSD1 = 1		/**< OSD-1 Layer */
}							
修改后  FjDispLayeridType
{
FjDispB_FJ_DISP_LAYERID_TYPE_OSD0 = 0,		/**< OSD-0 Layer */
	FjDispB_FJ_DISP_LAYERID_TYPE_OSD1 = 1		/**< OSD-1 Layer */
}

修改前 FJ_DISP_OSD_FORMAT	
{
FJ_DISP_OSD_FORMAT_RGBA8888 = 0,	/**< RGBA8888 format */
	FJ_DISP_OSD_FORMAT_RGBA4444			/**< RGBA4444 format */
}

修改后 FjDispOsdFormat
{
FjDispB_FJ_DISP_OSD_FORMAT_RGBA8888 = 0,	/**< RGBA8888 format */
	FjDispB_FJ_DISP_OSD_FORMAT_RGBA4444			/**< RGBA4444 format */
}
修改前  FJ_HDMI_HPD
{


FJ_HDMI_HPD_DETACH = 0,					/**< HPD:Detach		*/
	FJ_HDMI_HPD_ATTACH,						/**< HPD:Attach		*/
	FJ_HDMI_HPD_UNKNOWN						/**< HPD:Unknown	*/
}										
修改后 FjHdmiHpd
{
FjDispB_FJ_HDMI_HPD_DETACH = 0,					/**< HPD:Detach		*/
	FjDispB_FJ_HDMI_HPD_ATTACH,						/**< HPD:Attach		*/
	FjDispB_FJ_HDMI_HPD_UNKNOWN						/**< HPD:Unknown	*/
}
修改前 FJ_HDMI_DISPLAY_INTERFACE
{

FJ_HDMI_DISPLAY_INTERFACE_UNKNOWN = 0,		/**< interface:Unknown				*/
	FJ_HDMI_DISPLAY_INTERFACE_DVI,				/**< interface:DVI					*/
	FJ_HDMI_DISPLAY_INTERFACE_HDMI				/**< interface:HDMI					*/
}				
修改后 FjHdmiDisplayInterface
{
FjDispB_FJ_HDMI_DISPLAY_INTERFACE_UNKNOWN = 0,		/**< interface:Unknown				*/
	FjDispB_FJ_HDMI_DISPLAY_INTERFACE_DVI,				/**< interface:DVI					*/
	FjDispB_FJ_HDMI_DISPLAY_INTERFACE_HDMI				/**< interface:HDMI					*/
}
修改前 FJ_HDMI_VIDEO_FORMAT	
{
FJ_HDMI_VIDEO_FORMAT_640x480p60Hz_4_3 = 0,	/**< 640x480p 60Hz    4:3 */
	FJ_HDMI_VIDEO_FORMAT_1280x720p60Hz_16_9,	/**< 1280x720p 60Hz  16:9 */
	FJ_HDMI_VIDEO_FORMAT_1280x720p50Hz_16_9,	/**< 1280x720p 50Hz  16:9 */
	FJ_HDMI_VIDEO_FORMAT_1920x1080i60Hz_16_9,	/**< 1920x1080i 60Hz 16:9 */
	FJ_HDMI_VIDEO_FORMAT_1920x1080i50Hz_16_9,	/**< 1920x1080i 50Hz 16:9 */
	FJ_HDMI_VIDEO_FORMAT_720x480p60Hz_4_3,		/**< 720x480p 60Hz    4:3 */
	FJ_HDMI_VIDEO_FORMAT_720x480p60Hz_16_9,		/**< 720x480p 60Hz   16:9 */
	FJ_HDMI_VIDEO_FORMAT_720x576p50Hz_4_3,		/**< 720x576p 50Hz    4:3 */
	FJ_HDMI_VIDEO_FORMAT_720x576p50Hz_16_9,		/**< 720x576p 50Hz   16:9 */
	FJ_HDMI_VIDEO_FORMAT_1920x1080p30Hz_16_9,	/**< 1920x1080p 30Hz 16:9 */
	FJ_HDMI_VIDEO_FORMAT_1920x1080p24Hz_16_9,	/**< 1920x1080p 24Hz 16:9 */
	FJ_HDMI_VIDEO_FORMAT_1920x1080p25Hz_16_9	/**< 1920x1080p 25Hz 16:9 */
}
修改后 FjHdmiVideoFormat
{
FjDispB_FJ_HDMI_VIDEO_FORMAT_640x480p60Hz_4_3 = 0,	/**< 640x480p 60Hz    4:3 */
	FjDispB_FJ_HDMI_VIDEO_FORMAT_1280x720p60Hz_16_9,	/**< 1280x720p 60Hz  16:9 */
	FjDispB_FJ_HDMI_VIDEO_FORMAT_1280x720p50Hz_16_9,	/**< 1280x720p 50Hz  16:9 */
	FjDispB_FJ_HDMI_VIDEO_FORMAT_1920x1080i60Hz_16_9,	/**< 1920x1080i 60Hz 16:9 */
	FjDispB_FJ_HDMI_VIDEO_FORMAT_1920x1080i50Hz_16_9,	/**< 1920x1080i 50Hz 16:9 */
	FjDispB_FJ_HDMI_VIDEO_FORMAT_720x480p60Hz_4_3,		/**< 720x480p 60Hz    4:3 */
	FjDispB_FJ_HDMI_VIDEO_FORMAT_720x480p60Hz_16_9,		/**< 720x480p 60Hz   16:9 */
	FjDispB_FJ_HDMI_VIDEO_FORMAT_720x576p50Hz_4_3,		/**< 720x576p 50Hz    4:3 */
	FjDispB_FJ_HDMI_VIDEO_FORMAT_720x576p50Hz_16_9,		/**< 720x576p 50Hz   16:9 */
	FjDispB_FJ_HDMI_VIDEO_FORMAT_1920x1080p30Hz_16_9,	/**< 1920x1080p 30Hz 16:9 */
	FjDispB_FJ_HDMI_VIDEO_FORMAT_1920x1080p24Hz_16_9,	/**< 1920x1080p 24Hz 16:9 */
	FjDispB_FJ_HDMI_VIDEO_FORMAT_1920x1080p25Hz_16_9	/**< 1920x1080p 25Hz 16:9 */
}
修改前 FJ_HDMI_EDID_DBC_TAG	
{
FJ_HDMI_EDID_DBC_TAG_RESERVED1	= 0,		/**< Reserved					*/
	FJ_HDMI_EDID_DBC_TAG_AUDIO,				/**< Audio Data Block				*/
	FJ_HDMI_EDID_DBC_TAG_VIDEO,				/**< Video Data Block				*/
	FJ_HDMI_EDID_DBC_TAG_VENDOR,				/**< Vendor Specific Data Block 	*/
	FJ_HDMI_EDID_DBC_TAG_SPEAKER,				/**< Speaker Allocation Data Block	*/
	FJ_HDMI_EDID_DBC_TAG_VESA,					/**< VESA DTC Data Block			*/
	FJ_HDMI_EDID_DBC_TAG_RESERVED2,			/**< Reserved						*/
	FJ_HDMI_EDID_DBC_TAG_EXTENDED				/**< Use Extended Tag				*/
}					
修改后 FjHdmiEdidDbctag
{
FjDispB_FJ_HDMI_EDID_DBC_TAG_RESERVED1	= 0,		/**< Reserved					*/
	FjDispB_FJ_HDMI_EDID_DBC_TAG_AUDIO,				/**< Audio Data Block				*/
	FjDispB_FJ_HDMI_EDID_DBC_TAG_VIDEO,				/**< Video Data Block				*/
	FjDispB_FJ_HDMI_EDID_DBC_TAG_VENDOR,				/**< Vendor Specific Data Block 	*/
	FjDispB_FJ_HDMI_EDID_DBC_TAG_SPEAKER,				/**< Speaker Allocation Data Block	*/
	FjDispB_FJ_HDMI_EDID_DBC_TAG_VESA,					/**< VESA DTC Data Block			*/
	FjDispB_FJ_HDMI_EDID_DBC_TAG_RESERVED2,			/**< Reserved						*/
	FjDispB_FJ_HDMI_EDID_DBC_TAG_EXTENDED				/**< Use Extended Tag				*/
}
修改前 FJ_HDMI_EDID_AUDIO_FORMAT
{
FJ_HDMI_EDID_AUDIO_FORMAT_RESERVED1 = 0,	/**< Reserved						*/
	FJ_HDMI_EDID_AUDIO_FORMAT_LINEAR_PCM,		/**< Linear PCM (e.g., IEC 60958)	*/
	FJ_HDMI_EDID_AUDIO_FORMAT_AC_3,				/**< AC-3							*/
	FJ_HDMI_EDID_AUDIO_FORMAT_MPEG1,			/**< MPEG1 (lAYERS 1 & 2)			*/
	FJ_HDMI_EDID_AUDIO_FORMAT_MP3,				/**< MP3 (MPEG1 Layer 3)			*/
	FJ_HDMI_EDID_AUDIO_FORMAT_MPEG2,			/**< MPEG2 (multichannel)			*/
	FJ_HDMI_EDID_AUDIO_FORMAT_AAC,				/**< AAC							*/
	FJ_HDMI_EDID_AUDIO_FORMAT_DTS,				/**< DTS							*/
	FJ_HDMI_EDID_AUDIO_FORMAT_ATRAC,			/**< ATRAC							*/
	FJ_HDMI_EDID_AUDIO_FORMAT_ONE_BIT,			/**< One Bit Audio					*/
	FJ_HDMI_EDID_AUDIO_FORMAT_DOLBY_DIGITAL,	/**< Dolby Digital					*/
	FJ_HDMI_EDID_AUDIO_FORMAT_DTS_HD,			/**< DTS-HD							*/
	FJ_HDMI_EDID_AUDIO_FORMAT_MAT,				/**< MAT(MLP)						*/
	FJ_HDMI_EDID_AUDIO_FORMAT_DST,				/**< DST							*/
	FJ_HDMI_EDID_AUDIO_FORMAT_WMA_PRO,			/**< WMA Pro						*/
	FJ_HDMI_EDID_AUDIO_FORMAT_RESERVED2			/**< Reserved for audio format 15	*/
}			
修改后 FjdimiEdidAudioFormat
{
FjDispB_FJ_HDMI_EDID_AUDIO_FORMAT_RESERVED1 = 0,	/**< Reserved						*/
	FjDispB_FJ_HDMI_EDID_AUDIO_FORMAT_LINEAR_PCM,		/**< Linear PCM (e.g., IEC 60958)	*/
	FjDispB_FJ_HDMI_EDID_AUDIO_FORMAT_AC_3,				/**< AC-3							*/
	FjDispB_FJ_HDMI_EDID_AUDIO_FORMAT_MPEG1,			/**< MPEG1 (lAYERS 1 & 2)			*/
	FjDispB_FJ_HDMI_EDID_AUDIO_FORMAT_MP3,				/**< MP3 (MPEG1 Layer 3)			*/
	FjDispB_FJ_HDMI_EDID_AUDIO_FORMAT_MPEG2,			/**< MPEG2 (multichannel)			*/
	FjDispB_FJ_HDMI_EDID_AUDIO_FORMAT_AAC,				/**< AAC							*/
	FjDispB_FJ_HDMI_EDID_AUDIO_FORMAT_DTS,				/**< DTS							*/
	FjDispB_FJ_HDMI_EDID_AUDIO_FORMAT_ATRAC,			/**< ATRAC							*/
	FjDispB_FJ_HDMI_EDID_AUDIO_FORMAT_ONE_BIT,			/**< One Bit Audio					*/
	FjDispB_FJ_HDMI_EDID_AUDIO_FORMAT_DOLBY_DIGITAL,	/**< Dolby Digital					*/
	FjDispB_FJ_HDMI_EDID_AUDIO_FORMAT_DTS_HD,			/**< DTS-HD							*/
	FjDispB_FJ_HDMI_EDID_AUDIO_FORMAT_MAT,				/**< MAT(MLP)						*/
	FjDispB_FJ_HDMI_EDID_AUDIO_FORMAT_DST,				/**< DST							*/
	FjDispB_FJ_HDMI_EDID_AUDIO_FORMAT_WMA_PRO,			/**< WMA Pro						*/
	FjDispB_FJ_HDMI_EDID_AUDIO_FORMAT_RESERVED2			/**< Reserved for audio format 15	*/
}

修改前 FJ_HDMI_EDID_AUDIO_CHANNEL
{
FJ_HDMI_EDID_AUDIO_CHANNEL_REFER = 0,		/**< Refer to Stream Header			*/
	FJ_HDMI_EDID_AUDIO_CHANNEL_2CH,				/**< 2ch							*/
	FJ_HDMI_EDID_AUDIO_CHANNEL_3CH,				/**< 3ch							*/
	FJ_HDMI_EDID_AUDIO_CHANNEL_4CH,				/**< 4ch							*/
	FJ_HDMI_EDID_AUDIO_CHANNEL_5CH,				/**< 5ch							*/
	FJ_HDMI_EDID_AUDIO_CHANNEL_6CH,				/**< 6ch							*/
	FJ_HDMI_EDID_AUDIO_CHANNEL_7CH,				/**< 7ch							*/
	FJ_HDMI_EDID_AUDIO_CHANNEL_8CH				/**< 8ch							*/
}
修改后 FjdimiEdidAudioChannel
{
FjDispB_FJ_HDMI_EDID_AUDIO_CHANNEL_REFER = 0,		/**< Refer to Stream Header			*/
	FjDispB_FJ_HDMI_EDID_AUDIO_CHANNEL_2CH,				/**< 2ch							*/
	FjDispB_FJ_HDMI_EDID_AUDIO_CHANNEL_3CH,				/**< 3ch							*/
	FjDispB_FJ_HDMI_EDID_AUDIO_CHANNEL_4CH,				/**< 4ch							*/
	FjDispB_FJ_HDMI_EDID_AUDIO_CHANNEL_5CH,				/**< 5ch							*/
	FjDispB_FJ_HDMI_EDID_AUDIO_CHANNEL_6CH,				/**< 6ch							*/
	FjDispB_FJ_HDMI_EDID_AUDIO_CHANNEL_7CH,				/**< 7ch							*/
	FjDispB_FJ_HDMI_EDID_AUDIO_CHANNEL_8CH				/**< 8ch							*/
}
修改前 FJ_HDMI_EDID_AUDIO_SAMPLE_FREQUENCY
{
FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_REFER  = 0x00,	/**< Refer						*/
	FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_32 	  = 0x01,	/**< 32     kHz					*/
	FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_44_1   = 0x02,	/**< 44.1   kHz					*/
	FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_48	  = 0x04,	/**< 48     kHz					*/
	FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_88_2   = 0x08,	/**< 88.2   kHz					*/
	FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_96     = 0x10,	/**< 96     kHz					*/
	FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_176_4  = 0x20,	/**< 176.4  kHz					*/
	FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_192    = 0x40	/**< 192    kHz					*/
}
修改后 FjdimiEdidaudioSampleFrequency
{
FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_REFER  = 0x00,	/**< Refer						*/
	FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_32 	  = 0x01,	/**< 32     kHz					*/
	FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_44_1   = 0x02,	/**< 44.1   kHz					*/
	FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_48	  = 0x04,	/**< 48     kHz					*/
	FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_88_2   = 0x08,	/**< 88.2   kHz					*/
	FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_96     = 0x10,	/**< 96     kHz					*/
	FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_176_4  = 0x20,	/**< 176.4  kHz					*/
	FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_192    = 0x40	/**< 192    kHz					*/
}
修改前 FJ_HDMI_EDID_AUDIO_SAMPLE_SIZE			
{
FJ_HDMI_EDID_AUDIO_SAMPLE_REFER = 0x00,		/**< Refer							*/
	FJ_HDMI_EDID_AUDIO_SAMPLE_1BIT  = 0x01,		/**< 1 bit							*/
	FJ_HDMI_EDID_AUDIO_SAMPLE_16BIT = 0x02,		/**< 16 bit							*/
	FJ_HDMI_EDID_AUDIO_SAMPLE_20BIT = 0x04,		/**< 20 bit							*/
	FJ_HDMI_EDID_AUDIO_SAMPLE_24BIT = 0x08		/**< 24 bit							*/
}
修改后 FjhdmiEdidAudioSamplesize
{
FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_REFER = 0x00,		/**< Refer							*/
	FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_1BIT  = 0x01,		/**< 1 bit							*/
	FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_16BIT = 0x02,		/**< 16 bit							*/
	FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_20BIT = 0x04,		/**< 20 bit							*/
	FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_24BIT = 0x08		/**< 24 bit							*/
}
修改前 FJ_HDMI_FREQ_SVAL			
{

FJ_HDMI_FREQ_SVAL_MCLK128FS = 0,			/**< MCLK_CONF:MCLK is 128*Fs		*/
	FJ_HDMI_FREQ_SVAL_MCLK256FS,				/**< MCLK_CONF:MCLK is 256*Fs		*/
	FJ_HDMI_FREQ_SVAL_MCLK384FS,				/**< MCLK_CONF:MCLK is 384*Fs		*/
	FJ_HDMI_FREQ_SVAL_MCLK512FS,				/**< MCLK_CONF:MCLK is 512*Fs		*/
	FJ_HDMI_FREQ_SVAL_MCLK768FS,				/**< MCLK_CONF:MCLK is 768*Fs		*/
	FJ_HDMI_FREQ_SVAL_MCLK1024FS,				/**< MCLK_CONF:MCLK is 1024*Fs		*/
	FJ_HDMI_FREQ_SVAL_MCLK1152FS,				/**< MCLK_CONF:MCLK is 1152*Fs		*/
	FJ_HDMI_FREQ_SVAL_MCLK192FS					/**< MCLK_CONF:MCLK is 192*Fs		*/
}						
修改后 FjHdimiFreqSval
{
FjDispB_FJ_HDMI_FREQ_SVAL_MCLK128FS = 0,			/**< MCLK_CONF:MCLK is 128*Fs		*/
	FjDispB_FJ_HDMI_FREQ_SVAL_MCLK256FS,				/**< MCLK_CONF:MCLK is 256*Fs		*/
	FjDispB_FJ_HDMI_FREQ_SVAL_MCLK384FS,				/**< MCLK_CONF:MCLK is 384*Fs		*/
	FjDispB_FJ_HDMI_FREQ_SVAL_MCLK512FS,				/**< MCLK_CONF:MCLK is 512*Fs		*/
	FjDispB_FJ_HDMI_FREQ_SVAL_MCLK768FS,				/**< MCLK_CONF:MCLK is 768*Fs		*/
	FjDispB_FJ_HDMI_FREQ_SVAL_MCLK1024FS,				/**< MCLK_CONF:MCLK is 1024*Fs		*/
	FjDispB_FJ_HDMI_FREQ_SVAL_MCLK1152FS,				/**< MCLK_CONF:MCLK is 1152*Fs		*/
	FjDispB_FJ_HDMI_FREQ_SVAL_MCLK192FS					/**< MCLK_CONF:MCLK is 192*Fs		*/
}
修改前 FJ_HDMI_MPEG_3D_STRUCTURE				
{
FJ_HDMI_MPEG_3D_STRUCTURE_FRAME_PACKING				= 0,				/**<Frame packing*/
	FJ_HDMI_MPEG_3D_STRUCTURE_L_DEPTH					= 1,				/**<L+depth*/
	FJ_HDMI_MPEG_3D_STRUCTURE_SIDE_BY_SIDE_FULL			= 2,				/**<(Side-by-Side(Full)*/
	FJ_HDMI_MPEG_3D_STRUCTURE_SIDE_BY_SIDE_HALF			= 3,				/**<Side-by-Side(Half)*/
	FJ_HDMI_MPEG_3D_STRUCTURE_TOP_AND_BOTTOM			= 4,				/**<Top-and-Bottom*/
}
修改后 FjHdmiMpeg3dStructure
{
FjDispB_FJ_HDMI_MPEG_3D_STRUCTURE_FRAME_PACKING				= 0,				/**<Frame packing*/
	FjDispB_FJ_HDMI_MPEG_3D_STRUCTURE_L_DEPTH					= 1,				/**<L+depth*/
	FjDispB_FJ_HDMI_MPEG_3D_STRUCTURE_SIDE_BY_SIDE_FULL			= 2,				/**<(Side-by-Side(Full)*/
	FjDispB_FJ_HDMI_MPEG_3D_STRUCTURE_SIDE_BY_SIDE_HALF			= 3,				/**<Side-by-Side(Half)*/
	FjDispB_FJ_HDMI_MPEG_3D_STRUCTURE_TOP_AND_BOTTOM			= 4,				/**<Top-and-Bottom*/
}
修改前 FJ_HDMI_I2S_SELECT							
{
FJ_HDMI_I2S_SELECT_S_PDIF	= 0,	/**< Selects SPDIF interface		*/
	FJ_HDMI_I2S_SELECT_I2S				/**< Selects I2S Audio Interface	*/
}
修改后 FjHdmiI2sSelect
{
FjDispB_FJ_HDMI_I2S_SELECT_S_PDIF	= 0,	/**< Selects SPDIF interface		*/
	FjDispB_FJ_HDMI_I2S_SELECT_I2S				/**< Selects I2S Audio Interface	*/
}
修改前 FJ_HDMI_CTS_MANUAL	
{
FJ_HDMI_CTS_MANUAL_AUTO	= 0,	/**< 00:Divides by 1		*/
	FJ_HDMI_CTS_MANUAL_MANUAL			/**< Manual			*/
}						
修改后 FjHdmiCtsManual
{
FjDispB_FJ_HDMI_CTS_MANUAL_AUTO	= 0,	/**< 00:Divides by 1		*/
	FjDispB_FJ_HDMI_CTS_MANUAL_MANUAL			/**< Manual			*/
}
修改前 FJ_HDMI_VIDEO_MAPPING
{
FJ_HDMI_VIDEO_MAPPING_RGB444_8BIT		= 0x01,		/**< RGB 4:4:4 8 bits				*/
	FJ_HDMI_VIDEO_MAPPING_RGB444_10BIT		= 0x03,		/**< RGB 4:4:4/10 bits				*/
	FJ_HDMI_VIDEO_MAPPING_RGB444_12BIT		= 0x05,		/**< RGB 4:4:4/12 bits				*/
	FJ_HDMI_VIDEO_MAPPING_RGB444_16BIT		= 0x07,		/**< RGB 4:4:4/16 bits				*/
	FJ_HDMI_VIDEO_MAPPING_YCC444_420_8BIT	= 0x09,		/**< YCbCr 4:4:4 or 4:2:0/8 bits	*/
	FJ_HDMI_VIDEO_MAPPING_YCC444_420_10BIT	= 0x0B,		/**< YCbCr 4:4:4 or 4:2:0/10 bits	*/
	FJ_HDMI_VIDEO_MAPPING_YCC444_420_12BIT	= 0x0D,		/**< YCbCr 4:4:4 or 4:2:0/12 bits	*/
	FJ_HDMI_VIDEO_MAPPING_YCC444_420_16BIT	= 0x0F,		/**< YCbCr 4:4:4 or 4:2:0/16 bits	*/
	FJ_HDMI_VIDEO_MAPPING_YCC422_12BIT		= 0x12,		/**< YCbCr 4:2:2/12 bits			*/
	FJ_HDMI_VIDEO_MAPPING_YCC422_10BIT		= 0x14,		/**< YCbCr 4:2:2/10 bits			*/
	FJ_HDMI_VIDEO_MAPPING_YCC422_8BIT		= 0x16,		/**< YCbCr 4:2:2/8 bits				*/
	FJ_HDMI_VIDEO_MAPPING_YCC444_IPI_8BIT	= 0x17,		/**< YCbCr 4:4:4 (IPI)/8 bits		*/
	FJ_HDMI_VIDEO_MAPPING_YCC444_IPI_10BIT	= 0x18,		/**< YCbCr 4:4:4 (IPI)/10 bits		*/
	FJ_HDMI_VIDEO_MAPPING_YCC444_IPI_12BIT	= 0x19,		/**< YCbCr 4:4:4 (IPI)/12 bits		*/
	FJ_HDMI_VIDEO_MAPPING_YCC444_IPI_16BIT	= 0x1A,		/**< YCbCr 4:4:4 (IPI)/16 bits		*/
	FJ_HDMI_VIDEO_MAPPING_YCC422_IPI_12BIT	= 0x1B,		/**< YCbCr 4:2:2 (IPI)/12 bits		*/
	FJ_HDMI_VIDEO_MAPPING_YCC420_IPI_8BIT	= 0x1C,		/**< YCbCr 4:2:0 (IPI)/8 bits		*/
	FJ_HDMI_VIDEO_MAPPING_YCC420_IPI_10BIT	= 0x1D,		/**< YCbCr 4:2:0 (IPI)/10 bits		*/
	FJ_HDMI_VIDEO_MAPPING_YCC420_IPI_12BIT	= 0x1E,		/**< YCbCr 4:2:0 (IPI)/12 bits		*/
	FJ_HDMI_VIDEO_MAPPING_YCC420_IPI_16BIT	= 0x1F		/**< YCbCr 4:2:0 (IPI)/16 bits		*/
}
修改后FjHdmiVideoMapping
{
FjDispB_FJ_HDMI_VIDEO_MAPPING_RGB444_8BIT		= 0x01,		/**< RGB 4:4:4 8 bits				*/
	FjDispB_FJ_HDMI_VIDEO_MAPPING_RGB444_10BIT		= 0x03,		/**< RGB 4:4:4/10 bits				*/
	FjDispB_FJ_HDMI_VIDEO_MAPPING_RGB444_12BIT		= 0x05,		/**< RGB 4:4:4/12 bits				*/
	FjDispB_FJ_HDMI_VIDEO_MAPPING_RGB444_16BIT		= 0x07,		/**< RGB 4:4:4/16 bits				*/
	FjDispB_FJ_HDMI_VIDEO_MAPPING_YCC444_420_8BIT	= 0x09,		/**< YCbCr 4:4:4 or 4:2:0/8 bits	*/
	FjDispB_FJ_HDMI_VIDEO_MAPPING_YCC444_420_10BIT	= 0x0B,		/**< YCbCr 4:4:4 or 4:2:0/10 bits	*/
	FjDispB_FJ_HDMI_VIDEO_MAPPING_YCC444_420_12BIT	= 0x0D,		/**< YCbCr 4:4:4 or 4:2:0/12 bits	*/
	FjDispB_FJ_HDMI_VIDEO_MAPPING_YCC444_420_16BIT	= 0x0F,		/**< YCbCr 4:4:4 or 4:2:0/16 bits	*/
	FjDispB_FJ_HDMI_VIDEO_MAPPING_YCC422_12BIT		= 0x12,		/**< YCbCr 4:2:2/12 bits			*/
	FjDispB_FJ_HDMI_VIDEO_MAPPING_YCC422_10BIT		= 0x14,		/**< YCbCr 4:2:2/10 bits			*/
	FjDispB_FJ_HDMI_VIDEO_MAPPING_YCC422_8BIT		= 0x16,		/**< YCbCr 4:2:2/8 bits				*/
	FjDispB_FJ_HDMI_VIDEO_MAPPING_YCC444_IPI_8BIT	= 0x17,		/**< YCbCr 4:4:4 (IPI)/8 bits		*/
	FjDispB_FJ_HDMI_VIDEO_MAPPING_YCC444_IPI_10BIT	= 0x18,		/**< YCbCr 4:4:4 (IPI)/10 bits		*/
	FjDispB_FJ_HDMI_VIDEO_MAPPING_YCC444_IPI_12BIT	= 0x19,		/**< YCbCr 4:4:4 (IPI)/12 bits		*/
	FjDispB_FJ_HDMI_VIDEO_MAPPING_YCC444_IPI_16BIT	= 0x1A,		/**< YCbCr 4:4:4 (IPI)/16 bits		*/
	FjDispB_FJ_HDMI_VIDEO_MAPPING_YCC422_IPI_12BIT	= 0x1B,		/**< YCbCr 4:2:2 (IPI)/12 bits		*/
	FjDispB_FJ_HDMI_VIDEO_MAPPING_YCC420_IPI_8BIT	= 0x1C,		/**< YCbCr 4:2:0 (IPI)/8 bits		*/
	FjDispB_FJ_HDMI_VIDEO_MAPPING_YCC420_IPI_10BIT	= 0x1D,		/**< YCbCr 4:2:0 (IPI)/10 bits		*/
	FjDispB_FJ_HDMI_VIDEO_MAPPING_YCC420_IPI_12BIT	= 0x1E,		/**< YCbCr 4:2:0 (IPI)/12 bits		*/
	FjDispB_FJ_HDMI_VIDEO_MAPPING_YCC420_IPI_16BIT	= 0x1F		/**< YCbCr 4:2:0 (IPI)/16 bits		*/
}
修改前 FJ_HDMI_VP_REMAP	
{
FJ_HDMI_VP_REMAP_16BIT	= 0,	/**< YCC 422 16-bit input video (8 bits per component).		*/
	FJ_HDMI_VP_REMAP_20BIT	= 1,	/**< YCC 422 20-bit input video (10 bits per component).	*/
	FJ_HDMI_VP_REMAP_24BIT	= 2		/**< YCC 422 24-bit input video (12 bits per component).	*/
}				
修改后	FjHdmiVpRemap
{
FjDispB_FJ_HDMI_VP_REMAP_16BIT	= 0,	/**< YCC 422 16-bit input video (8 bits per component).		*/
	FjDispB_FJ_HDMI_VP_REMAP_20BIT	= 1,	/**< YCC 422 20-bit input video (10 bits per component).	*/
	FjDispB_FJ_HDMI_VP_REMAP_24BIT	= 2		/**< YCC 422 24-bit input video (12 bits per component).	*/
}



结构体typedef struct
 FJ_DISP_POS 							BFjDispPos
FJ_DISP_RECT							BFjDispRect
FJ_DISP_LCD_POLARITY				FjDispLcdPolarity	
FJ_DISP_LCD_TIMING					FjDispLcdTiming	

修改前 FJ_DISP_LCD_FORMAT	
{
FjdispLcdOutputMode		output_mode;		/**< LCD output mode<br>
														<ul><li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_MODE_RGB888_24BIT
															<li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_MODE_RGB888_8BIT_1
															<li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_MODE_RGB888_8BIT_2
															<li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_MODE_RGB888_8BIT_3
															<li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_MODE_RGB888_8BIT_3
															<li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_MODE_RGB666_18BIT
															<li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_MODE_YCC422_8BIT
															<li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_MODE_YCC422_16BIT</ul>		*/
	FjdispLcdOutputOrder	output_order[6];	/**< LCD data output order.<br>
														 Please refer to the DISP macro specifications.
														 <ul><li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_ORDER_R_Y0
															 <li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_ORDER_G_CB
															 <li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_ORDER_B_CR
															 <li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_ORDER_0_Y1</ul>			*/
	FjDispLcdPixFmt			pix_fmt;			/**< LCD pixel format type<br>
														<ul><li>@ref FjDispB_FJ_DISP_LCD_PIX_FMT_DELTA
															<li>@ref FjDispB_FJ_DISP_LCD_PIX_FMT_STRIPE</ul>				*/
}
			
修改后	FjDispLcdFormat	
{
FjdispLcdOutputMode		outputMode;		/**< LCD output mode<br>
														<ul><li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_MODE_RGB888_24BIT
															<li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_MODE_RGB888_8BIT_1
															<li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_MODE_RGB888_8BIT_2
															<li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_MODE_RGB888_8BIT_3
															<li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_MODE_RGB888_8BIT_3
															<li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_MODE_RGB666_18BIT
															<li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_MODE_YCC422_8BIT
															<li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_MODE_YCC422_16BIT</ul>		*/
	FjdispLcdOutputOrder	outputOrder[6];	/**< LCD data output order.<br>
														 Please refer to the DISP macro specifications.
														 <ul><li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_ORDER_R_Y0
															 <li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_ORDER_G_CB
															 <li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_ORDER_B_CR
															 <li>@ref FjDispB_FJ_DISP_LCD_OUTPUT_ORDER_0_Y1</ul>			*/
	FjDispLcdPixFmt			pixFmt;			/**< LCD pixel format type<br>
														<ul><li>@ref FjDispB_FJ_DISP_LCD_PIX_FMT_DELTA
															<li>@ref FjDispB_FJ_DISP_LCD_PIX_FMT_STRIPE</ul>				*/
}
修改前 FJ_DISP_LCD_CONFIG
{
UINT32						lcd_clk;			/**< LCD clock[KHz]<br>
														 Value range:6750~65000										*/
	FjDispLcdPolarity		lcd_polarity;		/**< LCD signal polarity information							*/
	FjDispLcdTiming			lcd_timing;			/**< LCD timing information										*/
	FjDispLcdFormat			lcd_format;			/**< LCD format information										*/
}						
修改后  FjDispLcdConfig
{
UINT32						lcdClk;			/**< LCD clock[KHz]<br>
														 Value range:6750~65000										*/
	FjDispLcdPolarity		lcdPolarity;		/**< LCD signal polarity information							*/
	FjDispLcdTiming			lcdTiming;			/**< LCD timing information										*/
	FjDispLcdFormat			lcdFormat;			/**< LCD format information										*/
}

修改前 FJ_DISP_HDMI_DETECT_SETTING	
{
FjdispHdmiCheckSignal	check_signal;		/**< Check signal (HPD only or HPD and RX_SENSE)	*/
	UINT32						interval_ms;		/**< Detect check interval(msec)			*/
	UINT32						detect_count;		/**< Detects continues count in check_count	*/
	UINT32						check_count;		/**< Total check count						*/
}	

修改后 FjdispHdmiDetectSetting	
{
FjdispHdmiCheckSignal	checkSignal;		/**< Check signal (HPD only or HPD and RX_SENSE)	*/
	UINT32						intervalMs;		/**< Detect check interval(msec)			*/
	UINT32						detectCount;		/**< Detects continues count in checkCount	*/
	UINT32						checkCount;		/**< Total check count						*/
}
修改前 FJ_DISP_HDMI_VIC_INFO	
{
FjDispVideoId	video_id;					/**< Video ID Code							*/
	UINT32				h_active;					/**< Horizontal Active						*/
	UINT32				v_active;					/**< Vertical Active						*/
	UINT32				h_total; 					/**< Horizonal Total						*/
	UINT32				h_blank; 					/**< Horizonal Blank						*/
	UINT32				v_total; 					/**< Vertical Total							*/
	UINT32				v_blank; 					/**< Vertical Blank							*/
	USHORT				h_sync_offset;				/**< H sync offset					*/
	USHORT				v_sync_offset;				/**< V sync offset					*/
	UINT32				h_pulse_width;				/**< Horizonal Pulse width 					*/
	UINT32				v_pulse_width;				/**< Vertical Pulse width	 				*/
	USHORT				h_image_size;				/**< H image size					*/
	USHORT				v_image_size;				/**< V image size					*/
	UINT32				pixel_freq;					/**< Pixel Frequency(KHz)	 				*/
	UCHAR				format_flags;				/**< 1) Synchronization polarity<br>
														 2) Interlace or not<br>
														See @ref FjdispHdmiFlagBitmap		*/
	UCHAR				phy_index; 		 			/**< PHY Register configuration index */
}
			
修改后 	FjdispHdmiVicInfo
{
FjDispVideoId	videoId;					/**< Video ID Code							*/
	UINT32				hActive;					/**< Horizontal Active						*/
	UINT32				vActive;					/**< Vertical Active						*/
	UINT32				hTotal; 					/**< Horizonal Total						*/
	UINT32				hBlank; 					/**< Horizonal Blank						*/
	UINT32				vTotal; 					/**< Vertical Total							*/
	UINT32				vBlank; 					/**< Vertical Blank							*/
	USHORT				hSyncSffset;				/**< H sync offset					*/
	USHORT				vSyncOffset;				/**< V sync offset					*/
	UINT32				hPulseWidth;				/**< Horizonal Pulse width 					*/
	UINT32				vPulseWidth;				/**< Vertical Pulse width	 				*/
	USHORT				hImageSize;				/**< H image size					*/
	USHORT				vImageSize;				/**< V image size					*/
	UINT32				pixelFreq;					/**< Pixel Frequency(KHz)	 				*/
	UCHAR				formatFlags;				/**< 1) Synchronization polarity<br>
														 2) Interlace or not<br>
														See @ref FjdispHdmiFlagBitmap		*/
	UCHAR				phyIndex; 		 			/**< PHY Register configuration index */
}
修改前 FJ_DISP_HDMI_SINK_INFO		
{

UINT32							vic_info_num; 			/**< Number of valid vic_info			*/
	FjdispHdmiVicInfo			vic_info[128];			/**< VIC resolution information list	*/
}			
修改后 FjDispHdmiSinkInfo
{
UINT32							vicInfoNum; 			/**< Number of valid vicInfo			*/
	FjdispHdmiVicInfo			vicInfo[128];			/**< VIC resolution information list	*/
}
修改前 FJ_DISP_HDMI_DEV_VENDOR_PRODUCT_ID			
{
UCHAR	vendor_id[3];			 /**< Vendor ID			*/
	UCHAR	product_code[2];		 /**< Product Code		*/
	UCHAR	serial_id[4];			 /**< Serial No.		*/
	UCHAR	manufacture_model[2];	 /**< Week of Manufacture or Model Year Flag, Year of Manufacture or Model Year No.	*/
}
修改后 FjdispHdmidevVendorProductid
{
UCHAR	vendorId[3];			 /**< Vendor ID			*/
	UCHAR	productCode[2];		 /**< Product Code		*/
	UCHAR	serialId[4];			 /**< Serial No.		*/
	UCHAR	manufactureModel[2];	 /**< Week of Manufacture or Model Year Flag, Year of Manufacture or Model Year No.	*/
}
修改前  FJ_DISP_HDMI_SPD_INFO		
{
UCHAR						vendorId[8+1];			 /**< Vendor Name Character			*/
	UCHAR						productCode[16+1];		 /**< Product Description Character	*/
	FjdispHdmiSpdDevtype	device_type;			 /**< Source Device Information		*/
}
修改后 	FjdispHdmiSPpdInfo
{
UCHAR						vendorId[8+1];			 /**< Vendor Name Character			*/
	UCHAR						productCode[16+1];		 /**< Product Description Character	*/
	FjdispHdmiSpdDevtype	deviceType;			 /**< Source Device Information		*/
}

修改前 FJ_DISP_HDMI_VENDOR_SPEC_INFO	
{
FjdispHdmivendorSpecvideoFormat	video_format;	/**< HDMI Video Format			*/
	FjdispHdmiVendorSpecVic			vic;			/**< HDMI proprietary Video Format Identification Code
																 @remarks Please specify only the case of video_format = FjDispB_FJ_DISP_HDMI_VENDOR_SPEC_VIDEO_FORMAT_EX. */
	FjdispHdmiVendorspec3Dstructure	structure_3d;	/**< 3D Structure
																 @remarks Please specify only the case of video_format = FjDispB_FJ_DISP_HDMI_VENDOR_SPEC_VIDEO_FORMAT_3D. */
}
		
修改后 FjdispHdmiVendorSpecInfo
{
FjdispHdmivendorSpecvideoFormat	videoFormat;	/**< HDMI Video Format			*/
	FjdispHdmiVendorSpecVic			vic;			/**< HDMI proprietary Video Format Identification Code
																 @remarks Please specify only the case of videoFormat = FjDispB_FJ_DISP_HDMI_VENDOR_SPEC_VIDEO_FORMAT_EX. */
	FjdispHdmiVendorspec3Dstructure	structure3d;	/**< 3D Structure
																 @remarks Please specify only the case of videoFormat = FjDispB_FJ_DISP_HDMI_VENDOR_SPEC_VIDEO_FORMAT_3D. */
}
 修改前  FJ_MIPI_CTRL_VIDEO		
 {

UINT32						lane;					/**< Set the number of data lanes		*/
	UINT32						color_coding;			/**< Set the color code of the DPI		*/
	UINT32						vid_pkt_size;			/**< video packet size					*/
	UINT32						vid_hsa_time;			/**< horizontal synchronism active time	*/
	UINT32						vid_hbp_time;			/**< horizontal back porch time			*/
	UINT32						vid_hline_time;			/**< the size of the total line time(HSA+HBP+HACT+HFP)	*/
	UINT32						vid_vsa_lines;			/**< vertical synchronism active period	*/
	UINT32						vid_vbp_lines;			/**< vertical back porch period			*/
	UINT32						vid_vfp_lines;			/**< vertical front porch period		*/
	UINT32						vid_vactive_lines;		/**< vertical active period				*/
 }				
 修改后FjMipiCtrlVideo
 {
 UINT32						lane;					/**< Set the number of data lanes		*/
	UINT32						colorCoding;			/**< Set the color code of the DPI		*/
	UINT32						vidPktSize;			/**< video packet size					*/
	UINT32						vidHsaTime;			/**< horizontal synchronism active time	*/
	UINT32						vidHbpTime;			/**< horizontal back porch time			*/
	UINT32						vidHlineTime;			/**< the size of the total line time(HSA+HBP+HACT+HFP)	*/
	UINT32						vidVsaLines;			/**< vertical synchronism active period	*/
	UINT32						vidVbpLines;			/**< vertical back porch period			*/
	UINT32						vidVfpLines;			/**< vertical front porch period		*/
	UINT32						vidVactiveLines;		/**< vertical active period				*/
 }
 
修改前 FJ_MIPI_CMD_VALUE	
{
UCHAR						cmd_id;					/**< Command Id			*/
	UCHAR						param_size;				/**< parameter Size		*/
	UCHAR						param[14];				/**< Parameter			*/
}					
修改后 FjMipiCmdValue
{
UCHAR						cmdId;					/**< Command Id			*/
	UCHAR						paramSize;				/**< parameter Size		*/
	UCHAR						param[14];				/**< Parameter			*/
}

修改前 FJ_MIPI_CMD_INFO	
{
UINT32						cmd_num;				/**< number of commands	*/
	FjMipiCmdValue			cmd_val[16];			/**< Command Value		*/
}
修改后 FjMipiCmdInfo
{
UINT32						cmdNum;				/**< number of commands	*/
	FjMipiCmdValue			cmdVal[16];			/**< Command Value		*/
}
修改前 FJ_DISP_WINDOW_CONFIG
{
UINT32		in_x_pos;		/**< Input X offset		*/
	UINT32		in_y_pos;		/**< Input Y offset		*/
	UINT32		in_width;		/**< Input width		*/
	UINT32		in_lines;		/**< Input lines		*/
	UINT32		out_x_pos;		/**< Output X offset	*/
	UINT32		out_y_pos;		/**< Output Y offset	*/
	UINT32		out_width;		/**< Output width		*/
	UINT32		out_lines;		/**< Output lines		*/
}					
修改后 FjDispWindowConfig
{
UINT32		inXPos;		/**< Input X offset		*/
	UINT32		inYPos;		/**< Input Y offset		*/
	UINT32		inWidth;		/**< Input width		*/
	UINT32		inLines;		/**< Input lines		*/
	UINT32		outXPos;		/**< Output X offset	*/
	UINT32		outYPos;		/**< Output Y offset	*/
	UINT32		outWidth;		/**< Output width		*/
	UINT32		outLines;		/**< Output lines		*/
}
修改前 FJ_DISP_YCC_ADDR						
{
UINT32		y_addr;			/**< Y    data stored address. */
	UINT32		cbcr_addr;		/**< CbCr data stored address. */
}
修改后 FjDispYccAddr
{
UINT32		yAddr;			/**< Y    data stored address. */
	UINT32		cbcrAddr;		/**< CbCr data stored address. */
}
修改前 FJ_DISP_IMAGE_CONFIG	
{
UINT32 addr;				/**< Logo Data address.		*/
	UINT32 g_width;				/**< Logo Data global width.		*/
	UINT32 g_height;			/**< Logo Data global height.		*/
	FjDispType block;			/**< Display Enumelation	*/
	FjDispWindowConfig window;/**< Display window config.*/
}
					
修改后 FjDispImageConfig
{
UINT32 addr;				/**< Logo Data address.		*/
	UINT32 gWidth;				/**< Logo Data global width.		*/
	UINT32 gHeight;			/**< Logo Data global height.		*/
	FjDispType block;			/**< Display Enumelation	*/
	FjDispWindowConfig window;/**< Display window config.*/
}FjDispImageConfig;
}
修改前 FJ_DISP_OSD_CONFIG
{
BFjDispRect in_osd;		/**< Input OSD size and position	*/
	USHORT in_pitch;			/**< Input OSD pitch information	*/
	FjDispOsdFormat in_fmt;	/**< Input format type				*/
	BFjDispRect out_osd;		/**< Output OSD size and position	*/
	USHORT out_pitch;			/**< Output OSD pitch information	*/
	FjDispOsdFormat out_fmt;	/**< Output format type				*/
}
修改后 FjDispOsdConfig
{
BFjDispRect inOsd;		/**< Input OSD size and position	*/
	USHORT inPitch;			/**< Input OSD pitch information	*/
	FjDispOsdFormat inFmt;	/**< Input format type				*/
	BFjDispRect outOsd;		/**< Output OSD size and position	*/
	USHORT outPitch;			/**< Output OSD pitch information	*/
	FjDispOsdFormat outFmt;	/**< Output format type				*/
}
修改前 FJ_DISP_OSD_RECT_INFO
{
BFjDispRect inOsd;						/**< Input OSD size and position	*/
	USHORT inPitch;							/**< Input OSD pitch information	*/
	BFjDispRect outOsd;						/**< Output OSD size and position	*/
	USHORT outPitch;							/**< Output OSD pitch information	*/
	FjDispRotateDegree rotate_degree;		/**< Rotation Degree (clockwise)	*/
}					
修改后 FjdispOsdRectInfo
{
BFjDispRect inOsd;						/**< Input OSD size and position	*/
	USHORT inPitch;							/**< Input OSD pitch information	*/
	BFjDispRect outOsd;						/**< Output OSD size and position	*/
	USHORT outPitch;							/**< Output OSD pitch information	*/
	FjDispRotateDegree rotateDegree;		/**< Rotation Degree (clockwise)	*/
}
修改前 FJ_DISP_OSD_BUFF_ADDR		
{
UINT32 in_buff_addr;						/**< input OSD buffer address	*/
	UINT32 out_buff_addr;						/**< output OSD buffer address	*/
}			
修改后  FjdispOsdBuffAddr
{
UINT32 inBuffAddr;						/**< input OSD buffer address	*/
	UINT32 outBuffBddr;						/**< output OSD buffer address	*/
}
修改前 T_FACE_FRAME_EACH_SET					
{
BFjDispRect   start_pos;		/**< The start of coordinate and size.	*/
	UINT32   v_thickness;	/**< The vertical thickness of the frame.
									 Value range:2~62 (2-pixel unit)		*/
	UINT32   h_thickness;	/**< The horizontal thickness of the frame.
									 Value range:2~62 (2-pixel unit)		*/
	TIconColor  rgba;		/**< Line color.								*/
}
修改后 TfaceFrameEachEt
{
BFjDispRect   startPos;		/**< The start of coordinate and size.	*/
	UINT32   vThickness;	/**< The vertical thickness of the frame.
									 Value range:2~62 (2-pixel unit)		*/
	UINT32   hThickness;	/**< The horizontal thickness of the frame.
									 Value range:2~62 (2-pixel unit)		*/
	TIconColor  rgba;		/**< Line color.								*/
}
修改前 T_FACE_FRAME_SET						
{
USHORT   face_count;	/**< Number of face frame. Erased, except for the specified face.<br>
						         (face frame 0 ~ face frame 15).<br>		*/
	USHORT   iv_size;		/**< Screen vertical size used as the standard of
										"Face Frame Information".			*/
	USHORT   ih_size;		/**< Screen horizonal size used as the standard of
										"Face Frame Information".			*/
}
TFaceFrameSet
{
USHORT   faceCount;	/**< Number of face frame. Erased, except for the specified face.<br>
						         (face frame 0 ~ face frame 15).<br>		*/
	USHORT   ivSize;		/**< Screen vertical size used as the standard of
										"Face Frame Information".			*/
	USHORT   ihSize;		/**< Screen horizonal size used as the standard of
										"Face Frame Information".			*/
}
修改前 FJ_HDMI_EDID_DTD						
{
USHORT		VideoIDCode;		/**< Video ID Code					*/
	USHORT		PixelClock;			/**< Pixel Freq						*/
	USHORT		H_Active;			/**< H active						*/
	USHORT		V_Active;			/**< V active						*/
	USHORT		H_Blanking;			/**< H blank						*/
	USHORT		V_Blanking;			/**< V blank						*/
	USHORT		H_SyncOffset;		/**< H sync offset					*/
	USHORT		V_SyncOffset;		/**< V sync offset					*/
	USHORT		H_SyncPulseWidth;	/**< H sync pulse width				*/
	USHORT		V_SyncPulseWidth;	/**< V sync pulse width				*/
	USHORT		H_ImageSize;		/**< H image size					*/
	USHORT		V_ImageSize;		/**< V image size					*/
	UCHAR		Flags;				/**< output format flags<br>
										 Combine the following three elements.<br>
										<ul><li>@ref FjDispE_FJ_HDMI_INTERLACE or @ref FjDispE_FJ_HDMI_NON_INTERLACE
											<li>@ref FjDispE_FJ_HDMI_VSYNC_POS or @ref FjDispE_FJ_HDMI_VSYNC_NEG
											<li>@ref FjDispE_FJ_HDMI_HSYNC_POS or @ref FjDispE_FJ_HDMI_HSYNC_NEG</ul> */
	UCHAR		Phy_Index;			/**< PHY Register configuration index */
}
修改后 FjHdmiEdidDtd
{
USHORT		VideoIDCode;		/**< Video ID Code					*/
	USHORT		PixelClock;			/**< Pixel Freq						*/
	USHORT		hActive;			/**< H active						*/
	USHORT		vActive;			/**< V active						*/
	USHORT		hBlanking;			/**< H blank						*/
	USHORT		vBlanking;			/**< V blank						*/
	USHORT		hSyncOffset;		/**< H sync offset					*/
	USHORT		vSyncOffset;		/**< V sync offset					*/
	USHORT		hSyncPulseWidth;	/**< H sync pulse width				*/
	USHORT		vSyncPulseWidth;	/**< V sync pulse width				*/
	USHORT		hImageSize;		/**< H image size					*/
	USHORT		vImageSize;		/**< V image size					*/
	UCHAR		Flags;				/**< output format flags<br>
										 Combine the following three elements.<br>
										<ul><li>@ref FjDispE_FJ_HDMI_INTERLACE or @ref FjDispE_FJ_HDMI_NON_INTERLACE
											<li>@ref FjDispE_FJ_HDMI_VSYNC_POS or @ref FjDispE_FJ_HDMI_VSYNC_NEG
											<li>@ref FjDispE_FJ_HDMI_HSYNC_POS or @ref FjDispE_FJ_HDMI_HSYNC_NEG</ul> */
	UCHAR		phyIndex;			/**< PHY Register configuration index */
}
修改前 FJ_HDMI_EDID_DTD_SAD					
{
FjdimiEdidAudioFormat		audio_type;			/**< AUDIO Format Type Code.<br>	*/
	FjdimiEdidAudioChannel		audio_max_channels;	/**< AUDIO Max Channels.<br>		*/
	UCHAR							audio_sample_rate;	/**< AUDIO Sample Frequency.<br>
															<ul><li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_REFER
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_32
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_44_1
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_48
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_88_2
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_96
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_176_4
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_192</ul> */
	UCHAR							audio_sample_size;	/**< AUDIO Sample Size.<br>
															<ul><li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_REFER
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_16BIT
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_20BIT
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_24BIT</ul> */
	UCHAR							audio_dbyte;		/**< AUDIO Data Byte.				*/
}
修改后 FjHdmiEdidDtdsad
{
FjdimiEdidAudioFormat		audioType;			/**< AUDIO Format Type Code.<br>	*/
	FjdimiEdidAudioChannel		audioMaxChannels;	/**< AUDIO Max Channels.<br>		*/
	UCHAR							audioSampleRate;	/**< AUDIO Sample Frequency.<br>
															<ul><li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_REFER
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_32
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_44_1
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_48
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_88_2
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_96
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_176_4
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_FREQ_192</ul> */
	UCHAR							audioSampleSize;	/**< AUDIO Sample Size.<br>
															<ul><li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_REFER
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_16BIT
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_20BIT
																<li>@ref FjDispB_FJ_HDMI_EDID_AUDIO_SAMPLE_24BIT</ul> */
	UCHAR							audioDbyte;		/**< AUDIO Data Byte.				*/
}
修改前 FJ_HDMI_DTD_MAN		
{
USHORT							dtd_num;				/**< DTD number						*/
	ULONG*							dtd_addr;				/**< DTD address. See @ref FjHdmiEdidDtd */
	USHORT							phy_addr;				/**< IEEE24bit address				*/
	ULONG							sup_fmat;				/**< support format<br>
																<ul><li>@ref FjDispE_FJ_HDMI_1280x720p60Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_1280x720p50Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_1920x1080i60Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_1920x1080i50Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_720x480p60Hz_4_3
																	<li>@ref FjDispE_FJ_HDMI_720x576p50Hz_4_3
																	<li>@ref FjDispE_FJ_HDMI_1920x1080p30Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_1920x1080p25Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_1920x1080p60Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_1920x1080p50Hz_16_9
																	<li>@ref FJ_HDMI_1280x720p25Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_1280x720p30Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_3840x2160p25Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_3840x2160p30Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_DVI_MONITOR</ul>*/
	UCHAR							out_fmat;				/**< out format<br>
																<ul><li>@ref FjDispE_FJ_HDMI_OUT_RGB
																	<li>@ref FjDispE_FJ_HDMI_OUT_YCC422
																	<li>@ref FjDispE_FJ_HDMI_OUT_YCC444</ul> */
	UCHAR							scn_mode;				/**< scan mode<br>
																<ul><li>@ref FjDispE_FJ_HDMI_SCAN_OVER
																	<li>@ref FjDispE_FJ_HDMI_SCAN_UNDER</ul> */
	FjHdmiDisplayInterface 		dev_inf;				/**< device interface <br>
																<ul><li>@ref FjDispB_FJ_HDMI_DISPLAY_INTERFACE_DVI
																	<li>@ref FjDispB_FJ_HDMI_DISPLAY_INTERFACE_HDMI</ul> */
	UCHAR							data_block_flags;		/**< CEA Data Block Tag flags (0-7bit) 0:skip 1:parse.<br>
																<ul><li>@ref FjDispE_FJ_HDMI_EDID_TAG_FLAG_AUDIO
																	<li>@ref FjDispE_FJ_HDMI_EDID_TAG_FLAG_VIDEO
																	<li>@ref FjDispE_FJ_HDMI_EDID_TAG_FLAG_VENDOR
																	<li>@ref FjDispE_FJ_HDMI_EDID_TAG_FLAG_SPEAKER
																	<li>@ref FjDispE_FJ_HDMI_EDID_TAG_FLAG_VESA
																	<li>@ref FjDispE_FJ_HDMI_EDID_TAG_FLAG_EXTENDED</ul>*/
	UCHAR							short_audio_count;		/**< CEA Data Block - Short Audio Descriptor Count  */
	FjHdmiEdidDtdsad 			short_audio_desc[10];	/**< CEA Data Block - Short Audio Descriptor */
	UCHAR							speaker_data_block;		/**< CEA Data Block - Speaker Allocation Data Block (The first byte)*/
	UCHAR							vesa_dtc_size;			/**< CEA Data Block - VESA DTC Data Block size*/
	UCHAR							vesa_dtc_dbyte[31];		/**< CEA Data Block - VESA DTC Data Block*/
	UCHAR							use_extended_size;		/**< CEA Data Block - Use Extended Data Block size(Include Extended Tag Code)*/
	UCHAR							use_extended_dbyte[31]; /**< CEA Data Block - Use Extended Data Block (Include Extended Tag Code)*/
}				
修改后FjHdmiDtdMan
{
USHORT							dtdNum;				/**< DTD number						*/
	ULONG*							dtdAddr;				/**< DTD address. See @ref FjHdmiEdidDtd */
	USHORT							phyAddr;				/**< IEEE24bit address				*/
	ULONG							supFmat;				/**< support format<br>
																<ul><li>@ref FjDispE_FJ_HDMI_1280x720p60Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_1280x720p50Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_1920x1080i60Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_1920x1080i50Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_720x480p60Hz_4_3
																	<li>@ref FjDispE_FJ_HDMI_720x576p50Hz_4_3
																	<li>@ref FjDispE_FJ_HDMI_1920x1080p30Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_1920x1080p25Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_1920x1080p60Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_1920x1080p50Hz_16_9
																	<li>@ref FJ_HDMI_1280x720p25Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_1280x720p30Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_3840x2160p25Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_3840x2160p30Hz_16_9
																	<li>@ref FjDispE_FJ_HDMI_DVI_MONITOR</ul>*/
	UCHAR							outFmat;				/**< out format<br>
																<ul><li>@ref FjDispE_FJ_HDMI_OUT_RGB
																	<li>@ref FjDispE_FJ_HDMI_OUT_YCC422
																	<li>@ref FjDispE_FJ_HDMI_OUT_YCC444</ul> */
	UCHAR							scnMode;				/**< scan mode<br>
																<ul><li>@ref FjDispE_FJ_HDMI_SCAN_OVER
																	<li>@ref FjDispE_FJ_HDMI_SCAN_UNDER</ul> */
	FjHdmiDisplayInterface 		devInf;				/**< device interface <br>
																<ul><li>@ref FjDispB_FJ_HDMI_DISPLAY_INTERFACE_DVI
																	<li>@ref FjDispB_FJ_HDMI_DISPLAY_INTERFACE_HDMI</ul> */
	UCHAR							dataBlockFlags;		/**< CEA Data Block Tag flags (0-7bit) 0:skip 1:parse.<br>
																<ul><li>@ref FjDispE_FJ_HDMI_EDID_TAG_FLAG_AUDIO
																	<li>@ref FjDispE_FJ_HDMI_EDID_TAG_FLAG_VIDEO
																	<li>@ref FjDispE_FJ_HDMI_EDID_TAG_FLAG_VENDOR
																	<li>@ref FjDispE_FJ_HDMI_EDID_TAG_FLAG_SPEAKER
																	<li>@ref FjDispE_FJ_HDMI_EDID_TAG_FLAG_VESA
																	<li>@ref FjDispE_FJ_HDMI_EDID_TAG_FLAG_EXTENDED</ul>*/
	UCHAR							shortAudioCount;		/**< CEA Data Block - Short Audio Descriptor Count  */
	FjHdmiEdidDtdsad 			shortAudioDesc[10];	/**< CEA Data Block - Short Audio Descriptor */
	UCHAR							speakerDataBlock;		/**< CEA Data Block - Speaker Allocation Data Block (The first byte)*/
	UCHAR							vesaDtcSize;			/**< CEA Data Block - VESA DTC Data Block size*/
	UCHAR							vesaDtcDbyte[31];		/**< CEA Data Block - VESA DTC Data Block*/
	UCHAR							useExtendedSize;		/**< CEA Data Block - Use Extended Data Block size(Include Extended Tag Code)*/
	UCHAR							useExtendedDbyte[31]; /**< CEA Data Block - Use Extended Data Block (Include Extended Tag Code)*/
}
共用体typedef union
T_IconColor							TIconColor


由fj_disp.h拆分出的fjdispc.h文件

共用体typedef union
FJ_HDMI_SYS_CTRL1					FjHdmiSYysCtrl1
修改前  FJ_HDMI_SYS_STAT	
{
UCHAR		byte;				/**< for byte access			*/
	struct {
		UCHAR	TX_PHY_LOCK	:1;		/**< TX_PHY_LOCK : TX PHY PLL lock indication.<br>
										 Value 0:PLL is unlocked, 1:PLL is locked.								*/
		UCHAR	HPD			:1;		/**< HPD : HDMI Hot Plug Detect indication.<br>
										 Value 0:non active, 1:active.											*/
		UCHAR				:2;		/**< Reserve																*/
		UCHAR	RX_SENSE_0	:1;		/**< RX_SENSE_0 : TX PHY RX_SENSE indication for TMDS channel 0 driver.<br>
										 Value 0:non active, 1:active.											*/
		UCHAR	RX_SENSE_1	:1;		/**< RX_SENSE_1 : TX PHY RX_SENSE indication for TMDS channel 1 driver.<br>
										 Value 0:non active, 1:active.											*/
		UCHAR	RX_SENSE_2	:1;		/**< RX_SENSE_2 : TX PHY RX_SENSE indication for TMDS channel 2 driver.<br>
										 Value 0:non active, 1:active.											*/
		UCHAR	RX_SENSE_3	:1;		/**< RX_SENSE_3 : TX PHY RX_SENSE indication for TMDS channel 3 driver.<br>
										 Value 0:non active, 1:active.											*/
		 } bit;							/**< for bit access			*/
}				
修改后 FjHdmiSysStat
{
UCHAR		byte;				/**< for byte access			*/
	struct {
		UCHAR	txPhyLock	:1;		/**< txPhyLock : TX PHY PLL lock indication.<br>
										 Value 0:PLL is unlocked, 1:PLL is locked.								*/
		UCHAR	HPD			:1;		/**< HPD : HDMI Hot Plug Detect indication.<br>
										 Value 0:non active, 1:active.											*/
		UCHAR				:2;		/**< Reserve																*/
		UCHAR	rxSense0	:1;		/**< rxSense0 : TX PHY RX_SENSE indication for TMDS channel 0 driver.<br>
										 Value 0:non active, 1:active.											*/
		UCHAR	rxSense1	:1;		/**< rxSense1 : TX PHY RX_SENSE indication for TMDS channel 1 driver.<br>
										 Value 0:non active, 1:active.											*/
		UCHAR	rxSense2	:1;		/**< rxSense2 : TX PHY RX_SENSE indication for TMDS channel 2 driver.<br>
										 Value 0:non active, 1:active.											*/
		UCHAR	rxSense3	:1;		/**< rxSense3 : TX PHY RX_SENSE indication for TMDS channel 3 driver.<br>
										 Value 0:non active, 1:active.											*/
		} bit;							/**< for bit access			*/
}
修改前 FJ_HDMI_DCTL	
{
UCHAR		byte;				/**< for byte access			*/
	struct {
		UCHAR	HDCP_SEL		:1;		/**< HDCP_SEL: HDCP Select.(Read only bit)<br>
											 <ul><li>@ref FjDispE_FJ_HDMI_HDCP_SEL_UNENCRYPTED
												 <li>@ref FjDispE_FJ_HDMI_HDCP_SEL_ENCRYPTED</ul>			*/
		UCHAR	AUD_MUTE		:1;		/**< AUD_MUTE: Audio mute or not.<br>
											 <ul><li>@ref FjDispE_FJ_HDMI_AUD_MUTE_NORMAL
												 <li>@ref FjDispE_FJ_HDMI_AUD_MUTE_SEND_ZERO</ul>			*/
		UCHAR	VID_BANK		:1;		/**< VID_BLANK: Video output is blank or not.<br>
											 <ul><li>@ref FjDispE_FJ_HDMI_VID_BLANK_NORMAL
												 <li>@ref FjDispE_FJ_HDMI_VID_BLANK_BLANKED</ul>			*/
		UCHAR					:5;		/**< Reserve												*/
	} bit;							/**< for bit access			*/
}
					
修改后 FjHdmiDctl
{
UCHAR		byte;				/**< for byte access			*/
	struct {
		UCHAR	hdcpSel		:1;		/**< hdcpSel: HDCP Select.(Read only bit)<br>
											 <ul><li>@ref FjDispE_FJ_HDMI_HDCP_SEL_UNENCRYPTED
												 <li>@ref FjDispE_FJ_HDMI_HDCP_SEL_ENCRYPTED</ul>			*/
		UCHAR	audMute		:1;		/**< audMute: Audio mute or not.<br>
											 <ul><li>@ref FjDispE_FJ_HDMI_AUD_MUTE_NORMAL
												 <li>@ref FjDispE_FJ_HDMI_AUD_MUTE_SEND_ZERO</ul>			*/
		UCHAR	vidBank		:1;		/**< VID_BLANK: Video output is blank or not.<br>
											 <ul><li>@ref FjDispE_FJ_HDMI_VID_BLANK_NORMAL
												 <li>@ref FjDispE_FJ_HDMI_VID_BLANK_BLANKED</ul>			*/
		UCHAR					:5;		/**< Reserve												*/
	} bit;							/**< for bit access			*/
}
修改前FJ_HDMI_DE_CTRL		
{
UCHAR		byte;				/**< for byte access			*/
	struct {
		UCHAR					:4;		/**< Reserve												*/
		UCHAR	HS_POL			:1;		/**< HS_POL: HSYNC polarity.<br>
											 Value 0:Positive polarity, 1:Negative polarity			*/
		UCHAR	VS_POL			:1;		/**< VS_POL: VSYNC polatity.<br>
											 Value 0:Positive polarity, 1:Negative polarity			*/
		UCHAR	DE_GEN			:1;		/**< DE_GEN: Generate DE signal.<br>
											 Value 0:Disabled, 1:Enabled							*/
		UCHAR					:1;		/**< Reserve												*/
	} bit;							/**< for bit access			*/
}			
修改后FjHdmiDeCtrl
{
UCHAR		byte;				/**< for byte access			*/
	struct {
		UCHAR					:4;		/**< Reserve												*/
		UCHAR	hsPol			:1;		/**< hsPol: HSYNC polarity.<br>
											 Value 0:Positive polarity, 1:Negative polarity			*/
		UCHAR	vsPol			:1;		/**< vsPol: VSYNC polatity.<br>
											 Value 0:Positive polarity, 1:Negative polarity			*/
		UCHAR	deGen			:1;		/**< deGen: Generate DE signal.<br>
											 Value 0:Disabled, 1:Enabled							*/
		UCHAR					:1;		/**< Reserve												*/
	} bit;							/**< for bit access			*/
}
修改前 FJ_HDMI_IADJUST
{
UCHAR		byte;				/**< for byte access			*/
	struct {
		UCHAR	F2VOFST			:1;		/**< F2VOFST: Select the VBIT_TO_VSYNC decremented/incremented.<br>
											 Value 0:VBIT_TO_VSYNC is decremented by one during field 2<br>
											 Value 1:VBIT_TO_VSYNC is incremented by one during field 2<br>		*/
		UCHAR	F2VADJ			:1;		/**< F2VADJ: VBIT_TO_VSYNC value adjust.<br>
											 Value 0:default<br>
											 Value 1:VBIT_TO_VSYNC value is adjusted during field 2.<br>		*/
		UCHAR	DE_ADJ			:1;		/**< DE_ADJ: Enable VSYNC.<br>
											 Value 0:Enable VSYNC, 1:Disable VSYNC<br>							*/
		UCHAR					:5;		/**< Reserve															*/
}					
修改后 FjHdmiIAdjust
{
UCHAR		byte;				/**< for byte access			*/
	struct {
		UCHAR	F2VOFST			:1;		/**< F2VOFST: Select the VBIT_TO_VSYNC decremented/incremented.<br>
											 Value 0:VBIT_TO_VSYNC is decremented by one during field 2<br>
											 Value 1:VBIT_TO_VSYNC is incremented by one during field 2<br>		*/
		UCHAR	F2VADJ			:1;		/**< F2VADJ: VBIT_TO_VSYNC value adjust.<br>
											 Value 0:default<br>
											 Value 1:VBIT_TO_VSYNC value is adjusted during field 2.<br>		*/
		UCHAR	deAdj			:1;		/**< deAdj: Enable VSYNC.<br>
											 Value 0:Enable VSYNC, 1:Disable VSYNC<br>							*/
		UCHAR					:5;		/**< Reserve															*/
	} bit;							/**< for bit access			*/
}
FJ_HDMI_VID_CTRL					FjHdmiVidCtrl
FJ_HDMI_VID_ACEN					FjHdmiVidAcen
FJ_HDMI_VID_MODE					FjHdmiVidMode
FJ_HDMI_VID_DITHER					FjHdmiVidDither
FJ_HDMI_RGB2XVYCC_CT				FjHdmiRgb2xvyccCt
FJ_HDMI_INT_SOURCE				FjHdmiINtSource
FJ_HDMI_INT_CTRL					FjHdmiINtCtrl
FJ_HDMI_ACR_CTRL					FjHdmiAcrCtrl
FJ_HDMI_AUD_MODE					FjHdmiAudMode
FJ_HDMI_AUDIO_I2S_IN_MAP				FjHdmiaudioI2sinMap
FJ_HDMI_AUDIO_I2S_CONTROL			FjHdmiaudioI2sControl
FJ_HDMI_AUDIO_I2S_CHST3				FjHdmiaudioI2sChst3
 FJ_HDMI_AUDIO_I2S_CHST4				FjHdmiaudioI2sChst4
FJ_HDMI_AUDIO_I2S_CHST5				FjHdmiaudioI2sChst5
FJ_HDMI_AUDIO_I2S_IN_LEN				FjHdmiaudioI2sInlen
FJ_HDMI_AUDIO_I2S_SWAP_I2S			FjHdmiI2sSwapI2s
FJ_HDMI_ASRC						FjHdmiAsrc
FJ_HDMI_HDMI_CTRL					FjHdmiHdmiCtrl
FJ_HDMI_DPD						FjHDdmiDpd
FJ_HDMI_CTRL_COMMON				FjHdmiCtrlCommon
FJ_HDMI_VP_PR_CD					FjHdmivpPrCd
FJ_HDMI_VP_CONF					FjHdmiVpConf
FJ_HDMI_FC_INVIDCONF				FjHdmiFcInvidconf
FJ_HDMI_AUD_CONF0					FjHdmiAudConf0
FJ_HDMI_AUD_CONF1					FjHdmiAudConf1
FJ_HDMI_AUD_CONF2					FjHdmiAudConf2
FJ_HDMI_AUD_SPDIF1					FjHdmiAudSpdif1
FJ_HDMI_FC_AUDSCONF				FjHdmiFcAudsconf
FJ_HDMI_AUDIO_CONFIG				FjHdmiAudioConfig
FJ_HDMI_TX_INVID0					FjHdmiTxInvid0
FJ_HDMI_FC_AVICONF3				FjHdmiFcAviconf3
FJ_HDMI_FC_AVICONF0				FjHdmiFcAviconfo
 FJ_HDMI_FC_AVICONF1				FjHdmiFcAviconf1
FJ_HDMI_FC_AVICONF2				FjHdmiFcAviconf2
 FJ_HDMI_FC_PRCONF					FjHdmiFcPrconf
FJ_HDMI_FC_AUDICONF0				FjHdmiFcAudiconf0
FJ_HDMI_FC_AUDICONF1				FjHdmiFcAudiconf1
FJ_HDMI_FC_AUDICONF3				FjHdmiFcAudiconf3



结构体typedef struct

修改前 FJ_HDMI_PLL_CONFIG	
{
FjHdmivpPrCd				vpPrCd;					/**< Video Packetizer Pixel Repetition and Color Depth Register.	*/
	UCHAR							phy_reg_num;				/**< PHY Register Number.											*/
	UCHAR							phy_i2cm_address[8];		/**< PHY I2C Address Configuration Register.<br>
																	 Value range : 0x00~0xFF.										*/
	USHORT							phy_i2cm_datao[8];			/**< PHY I2C Data Write Register.<br>
																	 Value range : 0x00~0xFF.										*/

}				
修改后  FjHdmiPllConfig
{
FjHdmivpPrCd				vpPrCd;					/**< Video Packetizer Pixel Repetition and Color Depth Register.	*/
	UCHAR							phyRegNum;				/**< PHY Register Number.											*/
	UCHAR							phyI2cmAddress[8];		/**< PHY I2C Address Configuration Register.<br>
																	 Value range : 0x00~0xFF.										*/
	USHORT							phyI2cmDatao[8];			/**< PHY I2C Data Write Register.<br>
																	 Value range : 0x00~0xFF.										*/
}

      
由fj_disp.h拆分出的fjdispd.h文件

结构体
typedef struct
修改前 FJ_HDMI_INFO_FRAMES				
{
FjHdmiFcAviconfo				fc_aviconf0;				/**< Frame Composer AVI Packet Configuration Register 0.						*/
	FjHdmiFcAviconf1				fc_aviconf1;				/**< Frame Composer AVI Packet Configuration Register 1.						*/
	FjHdmiFcAviconf2				fc_aviconf2;				/**< Frame Composer AVI Packet Configuration Register 2.						*/
	FjHdmiFcAviconf3				fc_aviconf3;				/**< Frame Composer AVI Packet Configuration Register 3.						*/
	UCHAR							fc_avivid;					/**< Frame Composer AVI Packet VIC Register.<br>
																	 Value range : 0~255.														*/
	FjHdmiFcPrconf				fc_prconf;					/**< Frame Composer Pixel Repetition Configuration Register.					*/
	FjHdmiFcAudiconf0			fc_audiconf0;				/**< Frame Composer AUD Packet Configuration Register 0.						*/
	FjHdmiFcAudiconf1			fc_audiconf1;				/**< Frame Composer AUD Packet Configuration Register 1.						*/
	UCHAR							fc_audiconf2;				/**< Frame Composer AUD Packet Configuration Register 2.<br>
																	 Value range : 0~255.														*/
	FjHdmiFcAudiconf3			fc_audiconf3;				/**< Frame Composer AUD Packet Configuration Register 3.						*/
	UCHAR							fc_vsdieeeid[3];			/**< Frame Composer VSI Packet Data IEEE Register.<br>
																	 index=0 -> fc_vsdieeeid0 ~ index=2 -> fc_vsdieeeid2.<br>
																	 Value range : 0~255.														*/
	UCHAR							video_mode;					/**< Video Mode.<br>
																	 Value:<br>
																		0x20:HDMI Video Mode.</ul>
																		0x40:3D Video Mode.														*/
	UCHAR							videoFormat;				/**< Video Format.<br>
																	 If Video Mode=HDMI, this is HDMI Video Format.<br>
																	 - Value range : 0~255.<br>
																	 If Video Mode=3D, this is Format of 3D Video data and 3D_Meta_present.<br>
																	 - bit[7:4]: Format of 3D Video data.<br>
																	 - bit[3]: 3D_Meta_present.													*/
	UCHAR							meta_present;				/**< 3D_Meta_present.<br>
																	 Value range : 0~1.															*/
	UCHAR							additional_video_format;	/**< 3D_EXT_DATA  EAdditional Video Format.<br>
																	 Value range : 0~15.														*/
	UCHAR							meta_type;					/**< 3D_Metadata_Type.<br>
																	 Value range : 0~7.															*/
	UCHAR							meta_length;				/**< 3D_Metadata_Length.<br>
																	 Value range : 0~31.														*/
	UCHAR							meta_data[8];				/**< 3D_Metadata.<br>
																	 Value range : 0~255.														*/
	UCHAR							scrambler_on;				/**< the HDMI 2.0 scrambler feature.											*/
}
修改后 FjHdmiInfoFrames
{
FjHdmiFcAviconfo				fcAviconf0;				/**< Frame Composer AVI Packet Configuration Register 0.						*/
	FjHdmiFcAviconf1				fcAviconf1;				/**< Frame Composer AVI Packet Configuration Register 1.						*/
	FjHdmiFcAviconf2				fcAviconf2;				/**< Frame Composer AVI Packet Configuration Register 2.						*/
	FjHdmiFcAviconf3				fcAviconf3;				/**< Frame Composer AVI Packet Configuration Register 3.						*/
	UCHAR							fcAvivid;					/**< Frame Composer AVI Packet VIC Register.<br>
																	 Value range : 0~255.														*/
	FjHdmiFcPrconf				fcPrconf;					/**< Frame Composer Pixel Repetition Configuration Register.					*/
	FjHdmiFcAudiconf0			fcAudiconf0;				/**< Frame Composer AUD Packet Configuration Register 0.						*/
	FjHdmiFcAudiconf1			fcAudiconf1;				/**< Frame Composer AUD Packet Configuration Register 1.						*/
	UCHAR							fcAudiconf2;				/**< Frame Composer AUD Packet Configuration Register 2.<br>
																	 Value range : 0~255.														*/
	FjHdmiFcAudiconf3			fcAudiconf3;				/**< Frame Composer AUD Packet Configuration Register 3.						*/
	UCHAR							fcVsdieeeid[3];			/**< Frame Composer VSI Packet Data IEEE Register.<br>
																	 index=0 -> fc_vsdieeeid0 ~ index=2 -> fc_vsdieeeid2.<br>
																	 Value range : 0~255.														*/
	UCHAR							videoMode;					/**< Video Mode.<br>
																	 Value:<br>
																		0x20:HDMI Video Mode.</ul>
																		0x40:3D Video Mode.														*/
	UCHAR							videoFormat;				/**< Video Format.<br>
																	 If Video Mode=HDMI, this is HDMI Video Format.<br>
																	 - Value range : 0~255.<br>
																	 If Video Mode=3D, this is Format of 3D Video data and 3D_Meta_present.<br>
																	 - bit[7:4]: Format of 3D Video data.<br>
																	 - bit[3]: 3D_Meta_present.													*/
	UCHAR							metaPresent;				/**< 3D_Meta_present.<br>
																	 Value range : 0~1.															*/
	UCHAR							additionalVideoFormat;	/**< 3D_EXT_DATA  EAdditional Video Format.<br>
																	 Value range : 0~15.														*/
	UCHAR							metaType;					/**< 3D_Metadata_Type.<br>
																	 Value range : 0~7.															*/
	UCHAR							metaLength;				/**< 3D_Metadata_Length.<br>
																	 Value range : 0~31.														*/
	UCHAR							metaData[8];				/**< 3D_Metadata.<br>
																	 Value range : 0~255.														*/
	UCHAR							scramblerOn;				/**< the HDMI 2.0 scrambler feature.											*/
}
修改前 FJ_HDMI_CTRL_COMMON
{
FjHdmiVideoMapping			video_input_mapping;		/**< Video Input mapping. See @ref FjHdmiVideoMapping.				*/
	UCHAR							hdcp_keepout;				/**< Start/stop HDCP keepout window generation.
																	 Value : 0=Active Low, 1=Active High.								*/
	UCHAR							vsync_in_polarity;			/**< Vsync input polarity.<br>
																	 Value : 0=Active Low, 1=Active High.								*/
	UCHAR							hsync_in_polarity;			/**< Hsync input polarity.<br>
																	 Value : 0=Active Low, 1=Active High.								*/
	UCHAR							de_in_polarity;				/**< Data enable input polarity.<br>
																	 Value : 0=Active Low, 1=Active High.								*/
	UCHAR							DVI_modez;					/**< DVI mode selected.<br>
																	 Value : 0=DVI mode, 1=HDMI mode.									*/
	UCHAR							r_v_blank_in_osc;			/**< Used for CEA861-D modes.<br>
																	 Value : 0=Active Low, 1=Active High.								*/
	UCHAR							in_i_p;						/**< Input video mode.<br>
																	 Value : 0=Progressive, 1=Interlace.								*/
	USHORT							h_in_activ;					/**< Input video Horizontal active pixel region width.<br>
																	 Value range :0~16383.												*/
	USHORT							v_in_activ;					/**< Input video Vertical active pixel region width.<br>
																	 Value range :0~8191.												*/
	USHORT							fc_invact_2d;				/**< 2D Input video vertical active pixel region width.<br>
																	 Value range :0~4095.												*/
	FjHdmifcActspcHdlrcfg		fc_actspc_hdFjHdmifcActspcHdlrcfglr_cfg;			/**< Frame Composer Active Space Control.								*/
	USHORT							fc_inhblank;				/**< Frame Composer Input Video HBlank Pixels Register 0/1.<br>
																	 Value range : 0~8191.												*/
	UCHAR							fc_invblank;				/**< Frame Composer Input Video VBlank Pixels Register.<br>
																	 Value range : 0~255.												*/
	USHORT							fc_hsyncindelay;			/**< Frame Composer Input Video HSync Front Porch Register 0/1.<br>
																	 Value range : 0~8191.												*/
	USHORT							fc_hsyncinwidth;			/**< Frame Composer Input Video HSync width Register 0/1.<br>
																	 Value range : 0~1023.												*/
	UCHAR							fc_vsyncindelay;			/**< Frame Composer Input Video VSync Front Porch Register.<br>
																	 Value range : 0~255.												*/
	UCHAR							fc_vsyncinwidth;			/**< Frame Composer Input Video VSync width Register.<br>
																	 Value range : 0~63.												*/
	FjHdmiPllConfig				pll_config;					/**< PLL configuration data.											*/
	FjHdmiAudioConfig			audio_config;				/**< Audio configuration data.											*/
	FjHdmiInfoFrames				info_frames;				/**< Infoframes configuration data.										*/
}
修改后FjHdmiCtrlCommon
{
	FjHdmiVideoMapping			videoInputMapping;		/**< Video Input mapping. See @ref FjHdmiVideoMapping.				*/
	UCHAR							hdcpKeepout;				/**< Start/stop HDCP keepout window generation.
																	 Value : 0=Active Low, 1=Active High.								*/
	UCHAR							vsyncInPolarity;			/**< Vsync input polarity.<br>
																	 Value : 0=Active Low, 1=Active High.								*/
	UCHAR							hsyncInPolarity;			/**< Hsync input polarity.<br>
																	 Value : 0=Active Low, 1=Active High.								*/
	UCHAR							deInPolarity;				/**< Data enable input polarity.<br>
																	 Value : 0=Active Low, 1=Active High.								*/
	UCHAR							dviModez;					/**< DVI mode selected.<br>
																	 Value : 0=DVI mode, 1=HDMI mode.									*/
	UCHAR							rVBlankInOsc;			/**< Used for CEA861-D modes.<br>
																	 Value : 0=Active Low, 1=Active High.								*/
	UCHAR							inIP;						/**< Input video mode.<br>
																	 Value : 0=Progressive, 1=Interlace.								*/
	USHORT							hInActiv;					/**< Input video Horizontal active pixel region width.<br>
																	 Value range :0~16383.												*/
	USHORT							vInActiv;					/**< Input video Vertical active pixel region width.<br>
																	 Value range :0~8191.												*/
	USHORT							fcInvact2d;				/**< 2D Input video vertical active pixel region width.<br>
																	 Value range :0~4095.												*/
	FjHdmifcActspcHdlrcfg		fcActspcHdFjHdmifcActspcHdlrcfglrCfg;			/**< Frame Composer Active Space Control.								*/
	USHORT							fcInhblank;				/**< Frame Composer Input Video HBlank Pixels Register 0/1.<br>
																	 Value range : 0~8191.												*/
	UCHAR							fcInvblank;				/**< Frame Composer Input Video VBlank Pixels Register.<br>
																	 Value range : 0~255.												*/
	USHORT							fcHsyncindelay;			/**< Frame Composer Input Video HSync Front Porch Register 0/1.<br>
																	 Value range : 0~8191.												*/
	USHORT							fcHsyncinwidth;			/**< Frame Composer Input Video HSync width Register 0/1.<br>
																	 Value range : 0~1023.												*/
	UCHAR							fcVsyncindelay;			/**< Frame Composer Input Video VSync Front Porch Register.<br>
																	 Value range : 0~255.												*/
	UCHAR							fcVsyncinwidth;			/**< Frame Composer Input Video VSync width Register.<br>
																	 Value range : 0~63.												*/
	FjHdmiPllConfig				pllConfig;					/**< PLL configuration data.											*/
	FjHdmiAudioConfig			audioConfig;				/**< Audio configuration data.											*/
	FjHdmiInfoFrames				infoFrames;				/**< Infoframes configuration data.										*/
}
 修改前 FJ_HDMI_CTRL_VIDEO	
 {
 // Data input control register area.
	FjHdmiTxInvid0				tx_invid0;				/**< Video Sampler register. */
	FjHdmivpPrCd				vp_pr_cd;				/**< Video Packetizer Pixel Repetition and Color Depth Register.			*/
	FjHdmiVpRemap				vp_remap;				/**< Video Packetizer YCC422 Remapping Register.<br>
																 See @ref FjHdmiVpRemap.												*/
	FjHdmiVpConf					vp_conf;				/**< vp_conf: Video Packetizer Output, Bypass and Enable Configuration Register.	*/
	FjHdmiFcInvidconf			fc_invidconf;			/**< fc_invidconf: Frame Composer Input Video Configuration.						*/
	USHORT							fc_inhactiv;			/**< fc_inhactiv: Frame Composer Input Video HActive Pixels Register 0/1.<br>
																 Value range : 0~16838.															*/
	USHORT							fcInhblank;			/**< fcInhblank: Frame Composer Input Video HBlank Pixels Register 0/1.<br>
																 Value range : 0~8191.															*/
	USHORT							fc_invactiv;			/**< fc_invactiv: Frame Composer Input Video VActive Pixels Register 0/1.<br>
																 Value range : 0~8191.															*/
	UCHAR							fcInvblank;			/**< fcInvblank: Frame Composer Input Video VBlank Pixels Register.<br>
																 Value range : 0~255.															*/
	USHORT							fcHsyncindelay;		/**< fcHsyncindelay: Frame Composer Input Video HSync Front Porch Register 0/1.<br>
																 Value range : 0~8191.															*/
	USHORT							fcHsyncinwidth;		/**< fcHsyncinwidth: Frame Composer Input Video HSync width Register 0/1.<br>
																 Value range : 0~1023.															*/
	UCHAR							fcVsyncindelay;		/**< fcVsyncindelay: Frame Composer Input Video VSync Front Porch Register.<br>
																 Value range : 0~255.															*/
	UCHAR							fcVsyncinwidth;		/**< fcVsyncinwidth: Frame Composer Input Video VSync width Register.<br>
																 Value range : 0~63.															*/
	FjHdmiFcAviconfo				fcAviconf0;			/**< fcAviconf0: Frame Composer AVI Packet Configuration Register 0.				*/
	FjHdmiFcAviconf1				fcAviconf1;			/**< fcAviconf1: Frame Composer AVI Packet Configuration Register 1.				*/
	FjHdmiFcAviconf2				fcAviconf2;			/**< fcAviconf2: Frame Composer AVI Packet Configuration Register 2.				*/
	FjHdmiFcAviconf3				fcAviconf3;			/**< fcAviconf3: Frame Composer AVI Packet Configuration Register 3.				*/
	UCHAR							fcAvivid;				/**< fcAvivid: Frame Composer AVI Packet VIC Register.<br>
																 Value range : 0~255.	
 }			
 修改后 FjHdmiCtrlVideo
 {
 // Data input control register area.
	FjHdmiTxInvid0				txInvid0;				/**< Video Sampler register. */
	FjHdmivpPrCd				vpPrCd;				/**< Video Packetizer Pixel Repetition and Color Depth Register.			*/
	FjHdmiVpRemap				vpRemap;				/**< Video Packetizer YCC422 Remapping Register.<br>
																 See @ref FjHdmiVpRemap.												*/
	FjHdmiVpConf					vpConf;				/**< vpConf: Video Packetizer Output, Bypass and Enable Configuration Register.	*/
	FjHdmiFcInvidconf			fcInvidconf;			/**< fcInvidconf: Frame Composer Input Video Configuration.						*/
	USHORT							fcInhactiv;			/**< fcInhactiv: Frame Composer Input Video HActive Pixels Register 0/1.<br>
																 Value range : 0~16838.															*/
	USHORT							fcInhblank;			/**< fcInhblank: Frame Composer Input Video HBlank Pixels Register 0/1.<br>
																 Value range : 0~8191.															*/
	USHORT							fcInvactiv;			/**< fcInvactiv: Frame Composer Input Video VActive Pixels Register 0/1.<br>
																 Value range : 0~8191.															*/
	UCHAR							fcInvblank;			/**< fcInvblank: Frame Composer Input Video VBlank Pixels Register.<br>
																 Value range : 0~255.															*/
	USHORT							fcHsyncindelay;		/**< fcHsyncindelay: Frame Composer Input Video HSync Front Porch Register 0/1.<br>
																 Value range : 0~8191.															*/
	USHORT							fcHsyncinwidth;		/**< fcHsyncinwidth: Frame Composer Input Video HSync width Register 0/1.<br>
																 Value range : 0~1023.															*/
	UCHAR							fcVsyncindelay;		/**< fcVsyncindelay: Frame Composer Input Video VSync Front Porch Register.<br>
																 Value range : 0~255.															*/
	UCHAR							fcVsyncinwidth;		/**< fcVsyncinwidth: Frame Composer Input Video VSync width Register.<br>
																 Value range : 0~63.															*/
	FjHdmiFcAviconfo				fcAviconf0;			/**< fcAviconf0: Frame Composer AVI Packet Configuration Register 0.				*/
	FjHdmiFcAviconf1				fcAviconf1;			/**< fcAviconf1: Frame Composer AVI Packet Configuration Register 1.				*/
	FjHdmiFcAviconf2				fcAviconf2;			/**< fcAviconf2: Frame Composer AVI Packet Configuration Register 2.				*/
	FjHdmiFcAviconf3				fcAviconf3;			/**< fcAviconf3: Frame Composer AVI Packet Configuration Register 3.				*/
	UCHAR							fcAvivid;				/**< fcAvivid: Frame Composer AVI Packet VIC Register.<br>
																 Value range : 0~255.															*/
	FjHdmiFcPrconf				fcPrconf;				/**< fcPrconf: Frame Composer Pixel Repetition Configuration Register.				*/
	UCHAR							mcFlowctrl;			/**< Main Controller Feed Through Control Register.<br>
																 Value 0:CSC is bypassed, 1:CSC is in the video data path.						*/
 }
修改前 FJ_HDMI_CTRL_AUDIO	
{
// Data input control register area.
	FjHdmiAudConf0				aud_conf0;				/**< Audio I2S Control Register 0.											*/
	FjHdmiAudConf1				aud_conf1;				/**< Audio I2S Control Register 1.											*/
	FjHdmiAudConf2				aud_conf2;				/**< Audio I2S Control Register 2.											*/
	FjHdmiAudSpdif1				aud_spdif1;				/**< Audio SPDIF Control Register 1.										*/
	UCHAR							aud_inputclkfs;			/**< Audio Input Clock FS Factor Register.<br>
																 Value:<br>
																	 0:128xFs.<br>
																	 1:256xFs.<br>
																	 2:512xFs.<br>
																	 3:invalid.<br>
																	 4:64xFs.<br>
																	 If the value is 5-7, same as 128xFs(= 0).							*/
	FjHdmiFcAudiconf1			fcAudiconf1;			/**< Frame Composer AUD Packet Configuration Register 1. 					*/
	FjHdmiFcAudsconf				fc_audsconf;			/**< Frame Composer Audio Sample Flat and Layout Configuration Register.	*/
}			
修改后 FjHdmiCtrlAudio
{
// Data input control register area.
	FjHdmiAudConf0				audConf0;				/**< Audio I2S Control Register 0.											*/
	FjHdmiAudConf1				audConf1;				/**< Audio I2S Control Register 1.											*/
	FjHdmiAudConf2				audConf2;				/**< Audio I2S Control Register 2.											*/
	FjHdmiAudSpdif1				audSpdif1;				/**< Audio SPDIF Control Register 1.										*/
	UCHAR							audInputclkfs;			/**< Audio Input Clock FS Factor Register.<br>
																 Value:<br>
																	 0:128xFs.<br>
																	 1:256xFs.<br>
																	 2:512xFs.<br>
																	 3:invalid.<br>
																	 4:64xFs.<br>
																	 If the value is 5-7, same as 128xFs(= 0).							*/
	FjHdmiFcAudiconf1			fcAudiconf1;			/**< Frame Composer AUD Packet Configuration Register 1. 					*/
	FjHdmiFcAudsconf				fcAudsconf;			/**< Frame Composer Audio Sample Flat and Layout Configuration Register.	*/
}
修改前 FJ_HDMI_CTRL_AUDIO_I2S	
{
// Data input control register area.
	FjHdmiaudioI2sinMap		i2s_in_map;			/**< I2S_IN_MAP: Audio In I2S Data In Map Register.<br>					*/
	FjHdmiaudioI2sControl		i2s_control;		/**< I2S_CONTROL: Audio In I2S Control setting register.<br>			*/
	UCHAR							i2s_chst1;			/**< I2S_CHST1: Audio In I2S Channel Status setting register.<br>		*/
	UCHAR							i2s_chst2;			/**< I2S_CHST2: Audio In I2S Channel Status setting register.<br>		*/
	FjHdmiaudioI2sChst3			i2s_chst3;			/**< I2S_CHST3: Audio In I2S Channel Status setting register.<br>		*/
	FjHdmiaudioI2sChst4			i2s_chst4;			/**< I2S_CHST4: Audio In I2S Channel Status setting register.<br>		*/
	FjHdmiaudioI2sChst5			i2s_chst5;			/**< I2S_CHST5: Audio In I2S Channel Status setting register.<br>		*/
	FjHdmiaudioI2sInlen		i2s_in_len;			/**< I2S_IN_LEN: Audio In I2S Input Length setting register.<br>		*/
	FjHdmiI2sSwapI2s		i2s_swap_i2s;		/**<*Audio In I2S Channel Swap Register */

}			
修改后 FjHdmiCtrlAudioi2s
{
// Data input control register area.
	FjHdmiaudioI2sinMap		i2sInMap;			/**< I2S_IN_MAP: Audio In I2S Data In Map Register.<br>					*/
	FjHdmiaudioI2sControl		i2sControl;		/**< I2S_CONTROL: Audio In I2S Control setting register.<br>			*/
	UCHAR							i2sChst1;			/**< I2S_CHST1: Audio In I2S Channel Status setting register.<br>		*/
	UCHAR							i2sChst2;			/**< I2S_CHST2: Audio In I2S Channel Status setting register.<br>		*/
	FjHdmiaudioI2sChst3			i2sChst3;			/**< I2S_CHST3: Audio In I2S Channel Status setting register.<br>		*/
	FjHdmiaudioI2sChst4			i2sChst4;			/**< I2S_CHST4: Audio In I2S Channel Status setting register.<br>		*/
	FjHdmiaudioI2sChst5			i2sChst5;			/**< I2S_CHST5: Audio In I2S Channel Status setting register.<br>		*/
	FjHdmiaudioI2sInlen		i2sInLen;			/**< I2S_IN_LEN: Audio In I2S Input Length setting register.<br>		*/
	FjHdmiI2sSwapI2s		i2sSwapI2s;		/**<*Audio In I2S Channel Swap Register */
}


 T_CAL_DATA				TCalAta

T_CLIP_DATA	
{
USHORT	clip_h;					/**< Clip's H.<br>
										 Value range:0x0000~0xFFFF<br>
										 0xFFFF is set up when clip processing is not performed.	*/
	USHORT	clip_l;					/**< Clip's L.<br>
										 Value range:0x0000~0xFFFF<br>
										 0x0000 is set up when clip processing is not performed.	*/
}					
修改后 TCliDate
{
	USHORT	clipH;					/**< Clip's H.<br>
										 Value range:0x0000~0xFFFF<br>
										 0xFFFF is set up when clip processing is not performed.	*/
	USHORT	clipL;					/**< Clip's L.<br>
										 Value range:0x0000~0xFFFF<br>
										 0x0000 is set up when clip processing is not performed.	*/
}
修改前 T_CLIP_CAL_DATA
{
TCalAta		y_cal;		/**< Gain and offset setting of Y data		*/
	TCliDate		y_clip;		/**< Clip setting of Y data					*/
	TCalAta		cb_cal;		/**< Gain and offset setting of Cb data		*/
	TCliDate		cb_clip;	/**< Clip setting of Cb data				*/
	TCalAta		cr_cal;		/**< Gain and offset setting of Cr data		*/
	TCliDate		cr_clip;	/**< Clip setting of Cr data				*/
}					
修改后 TClipCalData
{
TCalAta		yCal;		/**< Gain and offset setting of Y data		*/
	TCliDate		yClip;		/**< Clip setting of Y data					*/
	TCalAta		cbCal;		/**< Gain and offset setting of Cb data		*/
	TCliDate		cbClip;	/**< Clip setting of Cb data				*/
	TCalAta		crCal;		/**< Gain and offset setting of Cr data		*/
	TCliDate		crClip;	/**< Clip setting of Cr data				*/
}
修改前 T_MATRIX_DATA		
{
/**
	@remarks
	The order cannot be changed
	*/
	BYTE Coefficient00;	/**< Matrix coefficient 00<br>
							 Value range:0~255(-2.0~-0.008)<br>	*/
	BYTE Coefficient01;	/**< Matrix coefficient 01<br>
							 Value range:0~255(-2.0~-0.008)<br>	*/
	BYTE Coefficient02;	/**< Matrix coefficient 02<br>
							 Value range:0~255(-2.0~-0.008)<br>	*/
	BYTE Coefficient10;	/**< Matrix coefficient 10<br>
							 Value range:0~255(-2.0~-0.008)<br>	*/
	BYTE Coefficient11;	/**< Matrix coefficient 11<br>
							 Value range:0~255(-2.0~-0.008)<br>	*/
	BYTE Coefficient12;	/**< Matrix coefficient 12<br>
							 Value range:0~255(-2.0~-0.008)<br>	*/
	BYTE Coefficient20;	/**< Matrix coefficient 20<br>
							 Value range:0~255(-2.0~-0.008)<br>	*/
	BYTE Coefficient21;	/**< Matrix coefficient 21<br>
							 Value range:0~255(-2.0~-0.008)<br>	*/
	BYTE Coefficient22;	/**< Matrix coefficient 22<br>
							 Value range:0~255(-2.0~-0.008)<br>	*/
}			
修改后 TMatrixData
{
	/**
	@remarks
	The order cannot be changed
	*/
	BYTE coefficient00;	/**< Matrix coefficient 00<br>
							 Value range:0~255(-2.0~-0.008)<br>	*/
	BYTE coefficient01;	/**< Matrix coefficient 01<br>
							 Value range:0~255(-2.0~-0.008)<br>	*/
	BYTE coefficient02;	/**< Matrix coefficient 02<br>
							 Value range:0~255(-2.0~-0.008)<br>	*/
	BYTE coefficient10;	/**< Matrix coefficient 10<br>
							 Value range:0~255(-2.0~-0.008)<br>	*/
	BYTE coefficient11;	/**< Matrix coefficient 11<br>
							 Value range:0~255(-2.0~-0.008)<br>	*/
	BYTE coefficient12;	/**< Matrix coefficient 12<br>
							 Value range:0~255(-2.0~-0.008)<br>	*/
	BYTE coefficient20;	/**< Matrix coefficient 20<br>
							 Value range:0~255(-2.0~-0.008)<br>	*/
	BYTE coefficient21;	/**< Matrix coefficient 21<br>
							 Value range:0~255(-2.0~-0.008)<br>	*/
	BYTE coefficient22;	/**< Matrix coefficient 22<br>
							 Value range:0~255(-2.0~-0.008)<br>	*/
}
修改前 T_POS		
{
SHORT StartX;	/**< Coordinate of X	*/
	SHORT StartY;	/**< Coordinate of Y	*/
}					
修改后 TPos
{
SHORT startX;	/**< Coordinate of X	*/
	SHORT startY;	/**< Coordinate of Y	*/
}
修改前 T_Rect		
{
TPos Postion;	/**< Rectangle's coordinate	*/
	SHORT Width;	/**< Rectangle's Width		*/
	SHORT Height;	/**< Rectangle's Height		*/
}					
修改后 TRect
{
TPos postion;	/**< Rectangle's coordinate	*/
	SHORT width;	/**< Rectangle's width		*/
	SHORT height;	/**< Rectangle's height		*/
}
修改前 T_Y_CONV			
{
USHORT y_conv0;	/**< Y convert coefficient0(0~255)	*/
	USHORT y_conv1;	/**< Y convert coefficient1(0~255)	*/
	USHORT y_conv2;	/**< Y convert coefficient2(0~255)	*/
}			
修改后 TYConv
{
USHORT yConv0;	/**< Y convert coefficient0(0~255)	*/
	USHORT yConv1;	/**< Y convert coefficient1(0~255)	*/
	USHORT yConv2;	/**< Y convert coefficient2(0~255)	*/
}
修改前 T_TC_DATA		
{
ETcResolution tc_res;		/**< Compare resolution	*/
	BYTE            tc_tbl;		/**< Table selection	*/
	BOOL            tc_blend;	/**< Table blend enable	*/
	SHORT           tc_ratio;	/**< Table blend ratio	*/
}				
修改后 TTcData
{
ETcResolution tcRes;		/**< Compare resolution	*/
	BYTE            tcTbl;		/**< Table selection	*/
	BOOL            tcBlend;	/**< Table blend enable	*/
	SHORT           tcRatio;	/**< Table blend ratio	*/
}


 T_TONE_CORRECTION_TBL			TToneCorrectionTbl

修改前 T_ORDER_LAYER	
{
layer_id
}
				
修改后TOrderLayer
{
layerId
}

修改前 T_HDMI_SET	
{
EHdResolutiion		HD_resolution;					/**< Resolution of HDMI connected was.
															@ref EHdResolutiion					*/
	USHORT	polarity_scan;								/**< 1) Synchronization polarity <br>
													         2) Interlace or not.
													        See @ref EHdmiFlagBitMap				*/
	USHORT H_ActiveSize;	/**< HDMI horizonal size									*/
	USHORT V_ActiveSize;	/**< HDMI vertical size										*/
	USHORT H_BlankSize;		/**< HDMI horizonal blank size								*/
	USHORT V_BlankSize;		/**< HDMI vertical blank size								*/
	USHORT H_OffsetSize;	/**< HDMI horizonal offset size								*/
	USHORT V_OffsetSize;	/**< HDMI vertical offset size								*/
	USHORT H_PulseSize;		/**< HDMI horizonal pulse size								*/
	USHORT V_PulseSize;		/**< HDMI vertical pulse size								*/
	TRect osd_size[2];		/**<OSDx's coodinate and size.<br>
							osd_size[0] is GR0's data and osd_size[1] is GR1's data.*/
}					
修改后 THdmiSet
{
EHdResolutiion		hdResolution;					/**< Resolution of HDMI connected was.
															@ref EHdResolutiion					*/
	USHORT	polarityScan;								/**< 1) Synchronization polarity <br>
													         2) Interlace or not.
													        See @ref EHdmiFlagBitMap				*/
	USHORT hActiveSize;	/**< HDMI horizonal size									*/
	USHORT vActiveSize;	/**< HDMI vertical size										*/
	USHORT hBlankSize;		/**< HDMI horizonal blank size								*/
	USHORT vBlankSize;		/**< HDMI vertical blank size								*/
	USHORT hOffsetSize;	/**< HDMI horizonal offset size								*/
	USHORT vOffsetSize;	/**< HDMI vertical offset size								*/
	USHORT hPulseSize;		/**< HDMI horizonal pulse size								*/
	USHORT vPulseSize;		/**< HDMI vertical pulse size								*/
	TRect osdSize[2];		/**<OSDx's coodinate and size.<br>
							osdSize[0] is GR0's data and osdSize[1] is GR1's data.*/
}
修改前 T_GRID_SET	
{
TRect   v_pos;			/**< The start of the vertical coordinate and size.
								 postion : vertical grid line start postion(X,Y).
								 width   : vertical grid line thickness.
								 height  : vertical grid line size.							*/
	TRect   h_pos;			/**< The start of the horizontal coordinate and size.
								 postion : horizontal grid line start postion(X,Y).
								 width   : horizontal grid line size.
								 height  : horizontal grid line thickness.					*/
	USHORT   v_interval;	/**< Interval of the vertical line.								*/
	USHORT   h_interval;	/**< Interval of the horizontal line.							*/
	USHORT   v_numLine;		/**< The number of vertical lines.[1-8]							*/
	USHORT   h_numLine;		/**< The number of horizontal lines.[1-8]						*/
	USHORT   ivSize;		/**< Screen vertical size used as the standard of
										"Grid Information".									*/
	USHORT   ihSize;		/**< Screen horizonal size used as the standard of
										"Grid Information".									*/
	TIconColor  rgba;		/**< Line color.
								 a(Alpha) : 0 :  25%
											1 :  50%
											2 :  75%
											3 : 100% 										*/
}
					
修改后 TGridSet

{
TRect   vPos;			/**< The start of the vertical coordinate and size.
								 postion : vertical grid line start postion(X,Y).
								 width   : vertical grid line thickness.
								 height  : vertical grid line size.							*/
	TRect   hPos;			/**< The start of the horizontal coordinate and size.
								 postion : horizontal grid line start postion(X,Y).
								 width   : horizontal grid line size.
								 height  : horizontal grid line thickness.					*/
	USHORT   vInterval;	/**< Interval of the vertical line.								*/
	USHORT   hInterval;	/**< Interval of the horizontal line.							*/
	USHORT   vNumLine;		/**< The number of vertical lines.[1-8]							*/
	USHORT   hNumLine;		/**< The number of horizontal lines.[1-8]						*/
	USHORT   ivSize;		/**< Screen vertical size used as the standard of
										"Grid Information".									*/
	USHORT   ihSize;		/**< Screen horizonal size used as the standard of
										"Grid Information".									*/
	TIconColor  rgba;		/**< Line color.
								 a(Alpha) : 0 :  25%
											1 :  50%
											2 :  75%
											3 : 100% 										*/
}

修改前 T_GRID_NUM_SET		
{
USHORT   v_numLine;			/**< The number of vertical lines.[1-8]				*/
	USHORT   h_numLine;			/**< The number of horizontal lines.[1-8]			*/
	USHORT   ivSize;			/**< Screen vertical size used as the standard of
										"Grid Information".							*/
	USHORT   ihSize;			/**< Screen horizonal size used as the standard of
										"Grid Information".							*/
	UGridLineWidth width;	/**< Grid line width informatin.					*/
	TIconColor  rgba;		/**< Line color.
								a(Alpha) : 0 :  25%
										   1 :  50%
										   2 :  75%
										   3 : 100% 				
}			
修改后 TGridNumSet
{
USHORT   vNumLine;			/**< The number of vertical lines.[1-8]				*/
	USHORT   hNumLine;			/**< The number of horizontal lines.[1-8]			*/
	USHORT   ivSize;			/**< Screen vertical size used as the standard of
										"Grid Information".							*/
	USHORT   ihSize;			/**< Screen horizonal size used as the standard of
										"Grid Information".							*/
	UGridLineWidth width;	/**< Grid line width informatin.					*/
	TIconColor  rgba;		/**< Line color.
								a(Alpha) : 0 :  25%
										   1 :  50%
										   2 :  75%
										   3 : 100% 								*/
}
修改前 T_INVERSE_GAMMA_TBL	
{
USHORT*   r_anti;	/**< Pointer of R data anti gamma table.
						 Please specify the address of the array of USHORT[256]<br>
						 If NULL is specified, this setting is skipped.<br>			*/
 USHORT*   g_anti;	/**< Pointer of G data anti gamma table.
						 Please specify the address of the array of USHORT[256]<br>
						 If NULL is specified, this setting is skipped.<br>			*/
 USHORT*   b_anti;	/**< Pointer of B data anti gamma table.
						 Please specify the address of the array of USHORT[256]<br>
						 If NULL is specified, this setting is skipped.<br>			*/
}		
	
修改后 TInverseGammaTbl
{
USHORT*   rAnti;	/**< Pointer of R data anti gamma table.
						 Please specify the address of the array of USHORT[256]<br>
						 If NULL is specified, this setting is skipped.<br>			*/
 USHORT*   gAnti;	/**< Pointer of G data anti gamma table.
						 Please specify the address of the array of USHORT[256]<br>
						 If NULL is specified, this setting is skipped.<br>			*/
 USHORT*   bAnti;	/**< Pointer of B data anti gamma table.
						 Please specify the address of the array of USHORT[256]<br>
						 If NULL is specified, this setting is skipped.<br>			*/
}

修改前 T_GAMMA_TBL	
{
USHORT*   r_data;			/**< Pointer of R data gamma table(Full)<br>
								 Please specify the address of the array of USHORT[128]<br>
								 If NULL is specified, this setting is skipped.<br>			*/
 USHORT*   g_data;			/**< Pointer of G data gamma table(Full)<br>
								 Please specify the address of the array of USHORT[128]<br>
								 If NULL is specified, this setting is skipped.<br>			*/
 USHORT*   b_data;			/**< Pointer of B data gamma table(Full)<br>
								 Please specify the address of the array of USHORT[128]<br>
								 If NULL is specified, this setting is skipped.<br>			*/
}				
修改后 TGammaTbl
{
USHORT*   rData;			/**< Pointer of R data gamma table(Full)<br>
								 Please specify the address of the array of USHORT[128]<br>
								 If NULL is specified, this setting is skipped.<br>			*/
 USHORT*   gData;			/**< Pointer of G data gamma table(Full)<br>
								 Please specify the address of the array of USHORT[128]<br>
								 If NULL is specified, this setting is skipped.<br>			*/
 USHORT*   bData;			/**< Pointer of B data gamma table(Full)<br>
								 Please specify the address of the array of USHORT[128]<br>
								 If NULL is specified, this setting is skipped.<br>			*/
}

 T_TBL_ACCESS_SET		 TTblAccessSet
FJ_T_OSD_ADDR_YCC					FjtOsdAddrYcc

修改前 FJ_LINE_COORDINATES	
{
TPos	startPos;/**< Start point */
	TPos	end_pos;/**< End point */
}		

修改后 FjLineCoordinates
{
TPos	startPos;/**< Start point */
	TPos	endPos;/**< End point */
}
修改前 FJ_OSD_BRIGHT_WARN_INFO		
{
USHORT	high_threshold;								/**< High level threshold value.					*/
	USHORT	low_threshold;								/**< Low level threshold value.						*/
	FjosdBrightWarnMethodSel	high_warn_method;	/**< High level brightness warning method selection	*/
	FjosdBrightWarnMethodSel	low_warn_method;	/**< Low level brightness warning method selection	*/
	USHORT	high_y_color;								/**< High level Y data of warning color.(0~255)		*/
	USHORT	high_cb_color;								/**< High level Cb data of warning color.(0~255)	*/
	USHORT	high_cr_color;								/**< High level Cr data of warning color.(0~255)	*/
	USHORT	low_y_color;								/**< Low level Y data of warning color.(0~255)		*/
	USHORT	low_cb_color;								/**< Low level Cb data of warning color.(0~255)		*/
	USHORT	low_cr_color;								/**< Low level Cr data of warning color.(0~255)		*/
	USHORT	warn_show_frame_cnt;						/**< Warning show period.(1~64)						*/
	USHORT	warn_hide_frame_cnt;						/**< Warning hide period.(1~64)						*/
}		
修改后 FjosdBrightWarnInfo
{
	USHORT	highThreshold;								/**< High level threshold value.					*/
	USHORT	lowThreshold;								/**< Low level threshold value.						*/
	FjosdBrightWarnMethodSel	highWarnMethod;	/**< High level brightness warning method selection	*/
	FjosdBrightWarnMethodSel	lowWarnMethod;	/**< Low level brightness warning method selection	*/
	USHORT	highYColor;								/**< High level Y data of warning color.(0~255)		*/
	USHORT	highCbColor;								/**< High level Cb data of warning color.(0~255)	*/
	USHORT	highCrColor;								/**< High level Cr data of warning color.(0~255)	*/
	USHORT	lowYColor;								/**< Low level Y data of warning color.(0~255)		*/
	USHORT	lowCbColor;								/**< Low level Cb data of warning color.(0~255)		*/
	USHORT	lowCrColor;								/**< Low level Cr data of warning color.(0~255)		*/
	USHORT	warnShowFrame_cnt;						/**< Warning show period.(1~64)						*/
	USHORT	warnHideFrameCnt;						/**< Warning hide period.(1~64)						*/
}
修改前  FJ_OSD_COMM_FLUSH_DARA_AREA_INFO		
{
EOsdLayer	flush_layers;						/**< Flush layer. See @ref EOsdLayer.		*/
	USHORT	flush_showing_area;						/**< It's a showing area's bit map No.<br>
													e.g. flush_showing_area = 0x11 means the showing area<br>
													No. 0 and No. 4 would be flush.<br>
													It don't care if @ref flush_layers is not XXX_OSDx	*/
	USHORT	Is_Copy_flush_showing_area;				/**< Copy flag. It's a showing area's bit map No. <br>
													if the  @ref flush_layers is XXX_OSDx.<br>
													e.g. Is_Copy_flush_showing_area = 0x11 and flush_showing_area = 0x11 means the showing area<br>
													No. 0 and No. 4 would be copy to next buffer after it's flushed.<br>
													Is_Copy_flush_showing_area = 0x01 and flush_showing_area = 0x11 means the showing area<br>
													No. 0 only would be copy to next buffer after it's flushed.<br>
													 It's a 0 or 1 if the  @ref flush_layers is not XXX_OSDx.<br>
													*/
}
修改后 FjosdCommflushDaraAreainfo
{
EOsdLayer	flushLayers;						/**< Flush layer. See @ref EOsdLayer.		*/
	USHORT	flushShowingArea;						/**< It's a showing area's bit map No.<br>
													e.g. flushShowingArea = 0x11 means the showing area<br>
													No. 0 and No. 4 would be flush.<br>
													It don't care if @ref flushLayers is not XXX_OSDx	*/
	USHORT	isCopyFlushShowingArea;				/**< Copy flag. It's a showing area's bit map No. <br>
													if the  @ref flushLayers is XXX_OSDx.<br>
													e.g. isCopyFlushShowingArea = 0x11 and flushShowingArea = 0x11 means the showing area<br>
													No. 0 and No. 4 would be copy to next buffer after it's flushed.<br>
													isCopyFlushShowingArea = 0x01 and flushShowingArea = 0x11 means the showing area<br>
													No. 0 only would be copy to next buffer after it's flushed.<br>
													 It's a 0 or 1 if the  @ref flushLayers is not XXX_OSDx.<br>
													*/
}
修改前 T_OSD_TEXT_OUT_BY_ASCII_TABLE_INFO
{
TRect obj_wnd;			/**< the output rectangle in which there is
								 coordinate and size. See @ref TRect. 	*/
	UCHAR* prt_str;			/**< the pointer that point to a buffer in
								 which there are texts output.			*/
	UINT32 formatFlag;		/**< formatFlag is alignment of output as following:
									@ref FjDispE_FJ_LEFT : left in X
									@ref FjDispE_FJ_RIGHT : right in X
									@ref FjDispE_FJ_CENTER : Center in X
									@ref FjDispE_FJ_TOP : top in Y<br>
									@ref FjDispE_FJ_BOTTOM : bottom in Y
									@ref FjDispE_FJ_VCENTER : Center in Y	*/
	SHORT* asciiTbl;		/**< an array of string ID indexed by ascii value. */
	SHORT tblSize;			/**< the size of the ascii table we pass in.*/

	EDrawMode DrawMode;	/**< DrawMode is a set draw mode. See @ref EDrawMode.
									@ref FjDispD_E_DrawMode_Speed_Optimized :
											Write drawing data directly.
									@ref FjDispD_E_DrawMode_Effect_Optimized :
											Blend drawing data with the
											color of the place drawn to.*/
	BYTE alpha;				/**< alpha is attribute level for blending
								 when a icon is drawn. It's valid when
								 DrawMode is @ref FjDispD_E_DrawMode_Effect_Optimized only.
								 And it's valid on GR layer only. It can be set 0~255.
								 e.g.) It's set to 255 if the writting data 100% will be adopted.
									   There are not any changed if it's set 0.
									   The writting icon will be  blended with
									   destination color by 50%-50% if it is set to 128.*/
	BYTE drawAreaNum;		/**< number of Area[0-9]. 					*/
}         	
修改后 TosdtextOutasciiTableinfo
{
TRect objWnd;			/**< the output rectangle in which there is
								 coordinate and size. See @ref TRect. 	*/
	UCHAR* prtStr;			/**< the pointer that point to a buffer in
								 which there are texts output.			*/
	UINT32 formatFlag;		/**< formatFlag is alignment of output as following:
									@ref FjDispE_FJ_LEFT : left in X
									@ref FjDispE_FJ_RIGHT : right in X
									@ref FjDispE_FJ_CENTER : Center in X
									@ref FjDispE_FJ_TOP : top in Y<br>
									@ref FjDispE_FJ_BOTTOM : bottom in Y
									@ref FjDispE_FJ_VCENTER : Center in Y	*/
	SHORT* asciiTbl;		/**< an array of string ID indexed by ascii value. */
	SHORT tblSize;			/**< the size of the ascii table we pass in.*/

	EDrawMode DrawMode;	/**< DrawMode is a set draw mode. See @ref EDrawMode.
									@ref FjDispD_E_DrawMode_Speed_Optimized :
											Write drawing data directly.
									@ref FjDispD_E_DrawMode_Effect_Optimized :
											Blend drawing data with the
											color of the place drawn to.*/
	BYTE alpha;				/**< alpha is attribute level for blending
								 when a icon is drawn. It's valid when
								 DrawMode is @ref FjDispD_E_DrawMode_Effect_Optimized only.
								 And it's valid on GR layer only. It can be set 0~255.
								 e.g.) It's set to 255 if the writting data 100% will be adopted.
									   There are not any changed if it's set 0.
									   The writting icon will be  blended with
									   destination color by 50%-50% if it is set to 128.*/
	BYTE drawAreaNum;		/**< number of Area[0-9]. 					*/
}

共用体
typedef union
FJ_HDMI_FC_ACTSPC_HDLR_CFG			FjHdmifcActspcHdlrcfg
U_RGB_COLOR									URgbColor	
U_GRID_LINE_WIDTH					UGridLineWidth

枚举
修改前 typedef enum
FJ_GR_FILE_TYPE
{
FJ_GR_FILE_JPEG = 0x00,			/**< JPEG Main			*/
	FJ_GR_FILE_JPEG_THUMBNAIL,		/**< JPEG Thumbnail		*/
	FJ_GR_FILE_JPEG_QVGA,			/**< JPEG Screennail	*/
	FJ_GR_FILE_AVI,					/**< Not used			*/
	FJ_GR_FILE_ICON,				/**< OSD/HDMI OSD Menu ICON		*/
	FJ_GR_FILE_TIFF,				/**< Not used			*/
	FJ_GR_FILE_TIFF_THUMBNAIL,		/**< Not used			*/
	FJ_GR_FILE_MPEG4,				/**< Not used			*/
	FJ_GR_FILE_TIFF_QVGA,			/**< Not used			*/
	FJ_GR_FILE_SCREENNAIL,			/**< JPEG Screennail	*/
	FJ_GR_FILE_PHOTOFRAME,			/**< PhotoFrame(RGBA8888 format file) that compressed		*/
	FJ_GR_FILE_COMPRESS,			/**< RGBA8888 format file) that compressed		*/
	FJ_GR_FILE_RGBA8888				/**< RGBA8888 format file		*/
}					
修改后 FjGrFileType
{
FjDispD_FJ_GR_FILE_JPEG = 0x00,			/**< JPEG Main			*/
	FjDispD_FJ_GR_FILE_JPEG_THUMBNAIL,		/**< JPEG Thumbnail		*/
	FjDispD_FJ_GR_FILE_JPEG_QVGA,			/**< JPEG Screennail	*/
	FjDispD_FJ_GR_FILE_AVI,					/**< Not used			*/
	FjDispD_FJ_GR_FILE_ICON,				/**< OSD/HDMI OSD Menu ICON		*/
	FjDispD_FJ_GR_FILE_TIFF,				/**< Not used			*/
	FjDispD_FJ_GR_FILE_TIFF_THUMBNAIL,		/**< Not used			*/
	FjDispD_FJ_GR_FILE_MPEG4,				/**< Not used			*/
	FjDispD_FJ_GR_FILE_TIFF_QVGA,			/**< Not used			*/
	FjDispD_FJ_GR_FILE_SCREENNAIL,			/**< JPEG Screennail	*/
	FjDispD_FJ_GR_FILE_PHOTOFRAME,			/**< PhotoFrame(RGBA8888 format file) that compressed		*/
	FjDispD_FJ_GR_FILE_COMPRESS,			/**< RGBA8888 format file) that compressed		*/
	FjDispD_FJ_GR_FILE_RGBA8888				/**< RGBA8888 format file		*/
}
修改前  E_OSDLayer							
{
E_OSDLayer_LCD					= 0x4000,							/**< LCD layer									*/
	 E_OSDLayer_LCD_MAIN			= 0x4001,							/**< LCD Main layer								*/
	 E_OSDLayer_LCD_OSD0			= 0x4002,							/**< LCD OSD-0 layer							*/
	 E_OSDLayer_LCD_OSD1			= 0x4004,							/**< LCD OSD-1 layer							*/
	 E_OSDLayer_LCD_GRID			= 0x4008,							/**< LCD Grid line layer						*/
	 E_OSDLayer_LCD_FACE			= 0x4010,							/**< LCD Face frame layer						*/
	 E_OSDLayer_LCD_COLOR_BAR		= 0x4020,							/**< LCD Color bar layer						*/
	 E_OSDLayer_LCD_OSD				= (E_OSDLayer_LCD_OSD0 |
	 								   E_OSDLayer_LCD_OSD1),			/**< LCD OSD layer (OSD-0 and OSD-1)			*/
	 E_OSDLayer_LCD_MAIN_OSD		= (E_OSDLayer_LCD_OSD |
	 								   E_OSDLayer_LCD_MAIN),			/**< LCD OSD and Mian layer (OSD-0/1 and Main)	*/
	 E_OSDLayer_LCD_IMAGE			= (E_OSDLayer_LCD_MAIN |
	 								   E_OSDLayer_LCD_OSD  |
	 								   E_OSDLayer_LCD_GRID |
	 								   E_OSDLayer_LCD_FACE),			/**< LCD Image layer (except Color bar)			*/
	 E_OSDLayer_LCD_ALL				= (E_OSDLayer_LCD_IMAGE |
	 								   E_OSDLayer_LCD_COLOR_BAR),		/**< LCD All layer								*/
	 E_OSDLayer_HDMI				= 0x8000,							/**< HDMI layer									*/
	 E_OSDLayer_HDMI_MAIN			= 0x8080,							/**< HDMI Main layer							*/
	 E_OSDLayer_HDMI_OSD0			= 0x8100,							/**< HDMI OSD-0 layer							*/
	 E_OSDLayer_HDMI_OSD1			= 0x8200,							/**< HDMI OSD-1 layer							*/
	 E_OSDLayer_HDMI_GRID			= 0x8400,							/**< HDMI Grid line layer						*/
	 E_OSDLayer_HDMI_FACE			= 0x8800,							/**< HDMI Face frame layer						*/
	 E_OSDLayer_HDMI_COLOR_BAR		= 0x9000,							/**< HDMI Color bar layer						*/
	 E_OSDLayer_HDMI_OSD			= (E_OSDLayer_HDMI_OSD0 |
	 								   E_OSDLayer_HDMI_OSD1),			/**< HDMI OSD layer (OSD-0 and OSD-1)			*/
	 E_OSDLayer_HDMI_MAIN_OSD		= (E_OSDLayer_HDMI_OSD |
	 								   E_OSDLayer_HDMI_MAIN),			/**< HDMI OSD nad Mian layer (OSD-0/1 and Main)	*/
	 E_OSDLayer_HDMI_IMAGE			= (E_OSDLayer_HDMI_MAIN |
	 								   E_OSDLayer_HDMI_OSD  |
	 								   E_OSDLayer_HDMI_GRID |
	 								   E_OSDLayer_HDMI_FACE),			/**< HDMI Image layer (except Color bar)		*/
	 E_OSDLayer_HDMI_ALL			= (E_OSDLayer_HDMI_IMAGE |
	 								   E_OSDLayer_HDMI_COLOR_BAR),		/**< HDMI All layer								*/
	 E_OSDLayer_ALL_OSD0			= (E_OSDLayer_LCD_OSD0 |
									   E_OSDLayer_HDMI_OSD0),			/**< All LCD/HDMI's OSD-0 layer					*/
	 E_OSDLayer_ALL_OSD1			= (E_OSDLayer_LCD_OSD1 |
									   E_OSDLayer_HDMI_OSD1),			/**< All LCD/HDMI's OSD-1 layer					*/
	 E_OSDLayer_ALL_OSD				= (E_OSDLayer_LCD_OSD |
									   E_OSDLayer_HDMI_OSD),			/**< All LCD/HDMI's OSD layer (OSD-0 and OSD-1)	*/
	 E_OSDLayer_ALL_MAIN			= (E_OSDLayer_LCD_MAIN |
									   E_OSDLayer_HDMI_MAIN),			/**< All LCD/HDMI's MAIN layer					*/
	 E_OSDLayer_ALL_MAIN_OSD		= (E_OSDLayer_LCD_MAIN_OSD |
									   E_OSDLayer_HDMI_MAIN_OSD),		/**< All LCD/HDMI's Main and OSD layer			*/
}
修改后 EOsdLayer
{
 FjDispD_E_OSDLayer_LCD					= 0x4000,							/**< LCD layer									*/
	 FjDispD_E_OSDLayer_LCD_MAIN			= 0x4001,							/**< LCD Main layer								*/
	 FjDispD_E_OSDLayer_LCD_OSD0			= 0x4002,							/**< LCD OSD-0 layer							*/
	 FjDispD_E_OSDLayer_LCD_OSD1			= 0x4004,							/**< LCD OSD-1 layer							*/
	 FjDispD_E_OSDLayer_LCD_GRID			= 0x4008,							/**< LCD Grid line layer						*/
	 FjDispD_E_OSDLayer_LCD_FACE			= 0x4010,							/**< LCD Face frame layer						*/
	 FjDispD_E_OSDLayer_LCD_COLOR_BAR		= 0x4020,							/**< LCD Color bar layer						*/
	 FjDispD_E_OSDLayer_LCD_OSD				= (FjDispD_E_OSDLayer_LCD_OSD0 |
	 								   FjDispD_E_OSDLayer_LCD_OSD1),			/**< LCD OSD layer (OSD-0 and OSD-1)			*/
	 FjDispD_E_OSDLayer_LCD_MAIN_OSD		= (FjDispD_E_OSDLayer_LCD_OSD |
	 								   FjDispD_E_OSDLayer_LCD_MAIN),			/**< LCD OSD and Mian layer (OSD-0/1 and Main)	*/
	 FjDispD_E_OSDLayer_LCD_IMAGE			= (FjDispD_E_OSDLayer_LCD_MAIN |
	 								   FjDispD_E_OSDLayer_LCD_OSD  |
	 								   FjDispD_E_OSDLayer_LCD_GRID |
	 								   FjDispD_E_OSDLayer_LCD_FACE),			/**< LCD Image layer (except Color bar)			*/
	 FjDispD_E_OSDLayer_LCD_ALL				= (FjDispD_E_OSDLayer_LCD_IMAGE |
	 								   FjDispD_E_OSDLayer_LCD_COLOR_BAR),		/**< LCD All layer								*/
	 FjDispD_E_OSDLayer_HDMI				= 0x8000,							/**< HDMI layer									*/
	 FjDispD_E_OSDLayer_HDMI_MAIN			= 0x8080,							/**< HDMI Main layer							*/
	 FjDispD_E_OSDLayer_HDMI_OSD0			= 0x8100,							/**< HDMI OSD-0 layer							*/
	 FjDispD_E_OSDLayer_HDMI_OSD1			= 0x8200,							/**< HDMI OSD-1 layer							*/
	 FjDispD_E_OSDLayer_HDMI_GRID			= 0x8400,							/**< HDMI Grid line layer						*/
	 FjDispD_E_OSDLayer_HDMI_FACE			= 0x8800,							/**< HDMI Face frame layer						*/
	 FjDispD_E_OSDLayer_HDMI_COLOR_BAR		= 0x9000,							/**< HDMI Color bar layer						*/
	 FjDispD_E_OSDLayer_HDMI_OSD			= (FjDispD_E_OSDLayer_HDMI_OSD0 |
	 								   FjDispD_E_OSDLayer_HDMI_OSD1),			/**< HDMI OSD layer (OSD-0 and OSD-1)			*/
	 FjDispD_E_OSDLayer_HDMI_MAIN_OSD		= (FjDispD_E_OSDLayer_HDMI_OSD |
	 								   FjDispD_E_OSDLayer_HDMI_MAIN),			/**< HDMI OSD nad Mian layer (OSD-0/1 and Main)	*/
	 FjDispD_E_OSDLayer_HDMI_IMAGE			= (FjDispD_E_OSDLayer_HDMI_MAIN |
	 								   FjDispD_E_OSDLayer_HDMI_OSD  |
	 								   FjDispD_E_OSDLayer_HDMI_GRID |
	 								   FjDispD_E_OSDLayer_HDMI_FACE),			/**< HDMI Image layer (except Color bar)		*/
	 FjDispD_E_OSDLayer_HDMI_ALL			= (FjDispD_E_OSDLayer_HDMI_IMAGE |
	 								   FjDispD_E_OSDLayer_HDMI_COLOR_BAR),		/**< HDMI All layer								*/
	 FjDispD_E_OSDLayer_ALL_OSD0			= (FjDispD_E_OSDLayer_LCD_OSD0 |
									   FjDispD_E_OSDLayer_HDMI_OSD0),			/**< All LCD/HDMI's OSD-0 layer					*/
	 FjDispD_E_OSDLayer_ALL_OSD1			= (FjDispD_E_OSDLayer_LCD_OSD1 |
									   FjDispD_E_OSDLayer_HDMI_OSD1),			/**< All LCD/HDMI's OSD-1 layer					*/
	 FjDispD_E_OSDLayer_ALL_OSD				= (FjDispD_E_OSDLayer_LCD_OSD |
									   FjDispD_E_OSDLayer_HDMI_OSD),			/**< All LCD/HDMI's OSD layer (OSD-0 and OSD-1)	*/
	 FjDispD_E_OSDLayer_ALL_MAIN			= (FjDispD_E_OSDLayer_LCD_MAIN |
									   FjDispD_E_OSDLayer_HDMI_MAIN),			/**< All LCD/HDMI's MAIN layer					*/
	 FjDispD_E_OSDLayer_ALL_MAIN_OSD		= (FjDispD_E_OSDLayer_LCD_MAIN_OSD |
									   FjDispD_E_OSDLayer_HDMI_MAIN_OSD),		/**< All LCD/HDMI's Main and OSD layer			*/
}
修改前 E_FJ_OSD_SUCCESSION	
{
E_FJ_OSD_SUCCESSION_NONE = 0,										/**< No any succession from LCD to TV. */
	E_FJ_OSD_SUCCESSION_MAIN = (~FjDispD_E_OSDLayer_LCD) & FjDispD_E_OSDLayer_LCD_MAIN,	/**< Succession main layer from LCD to TV. */
	E_FJ_OSD_SUCCESSION_OSD0 = (~FjDispD_E_OSDLayer_LCD) & FjDispD_E_OSDLayer_LCD_OSD0,	/**< Succession OSD0 layer from LCD to TV. */
	E_FJ_OSD_SUCCESSION_OSD1 = (~FjDispD_E_OSDLayer_LCD) & FjDispD_E_OSDLayer_LCD_OSD1,	/**< Succession OSD1 layer from LCD to TV. */
	E_FJ_OSD_SUCCESSION_MAIN_OSD0 = E_FJ_OSD_SUCCESSION_MAIN | E_FJ_OSD_SUCCESSION_OSD0,	/**< Succession OSD0 and main layer from LCD to TV. */
	E_FJ_OSD_SUCCESSION_MAIN_OSD1 = E_FJ_OSD_SUCCESSION_MAIN | E_FJ_OSD_SUCCESSION_OSD1,	/**< Succession OSD1 and main layer from LCD to TV. */
	E_FJ_OSD_SUCCESSION_OSD01 = E_FJ_OSD_SUCCESSION_OSD0 | E_FJ_OSD_SUCCESSION_OSD1,	/**< Succession OSD0 and OSD1 layer from LCD to TV. */
	E_FJ_OSD_SUCCESSION_ALL = E_FJ_OSD_SUCCESSION_MAIN | E_FJ_OSD_SUCCESSION_OSD0 | E_FJ_OSD_SUCCESSION_OSD1,	/**< Succession All layer from LCD to TV. */
}			
修改后 EFjOsdSuccession
{
FjDispD_E_FJ_OSD_SUCCESSION_NONE = 0,										/**< No any succession from LCD to TV. */
	FjDispD_E_FJ_OSD_SUCCESSION_MAIN = (~FjDispD_E_OSDLayer_LCD) & FjDispD_E_OSDLayer_LCD_MAIN,	/**< Succession main layer from LCD to TV. */
	FjDispD_E_FJ_OSD_SUCCESSION_OSD0 = (~FjDispD_E_OSDLayer_LCD) & FjDispD_E_OSDLayer_LCD_OSD0,	/**< Succession OSD0 layer from LCD to TV. */
	FjDispD_E_FJ_OSD_SUCCESSION_OSD1 = (~FjDispD_E_OSDLayer_LCD) & FjDispD_E_OSDLayer_LCD_OSD1,	/**< Succession OSD1 layer from LCD to TV. */
	FjDispD_E_FJ_OSD_SUCCESSION_OSD1 = FjDispD_E_FJ_OSD_SUCCESSION_MAIN | FjDispD_E_FJ_OSD_SUCCESSION_OSD0,	/**< Succession OSD0 and main layer from LCD to TV. */
	FjDispD_E_FJ_OSD_SUCCESSION_MAIN_OSD1 = FjDispD_E_FJ_OSD_SUCCESSION_MAIN | FjDispD_E_FJ_OSD_SUCCESSION_OSD1,	/**< Succession OSD1 and main layer from LCD to TV. */
	FjDispD_E_FJ_OSD_SUCCESSION_OSD01 = FjDispD_E_FJ_OSD_SUCCESSION_OSD0 | FjDispD_E_FJ_OSD_SUCCESSION_OSD1,	/**< Succession OSD0 and OSD1 layer from LCD to TV. */
	FjDispD_E_FJ_OSD_SUCCESSION_ALL = FjDispD_E_FJ_OSD_SUCCESSION_MAIN | FjDispD_E_FJ_OSD_SUCCESSION_OSD0 | FjDispD_E_FJ_OSD_SUCCESSION_OSD1,	/**< Succession All layer from LCD to TV. */
}
修改前 FJ_E_OSD_SHAPE_TYPE				
{
FJ_E_OSD_SHAPE_TYPE_RECT_FRAME_2_COLOR = 13		/**< Double frame line of two colors. */
}
修改后 FjeOsdShapeType
{
FjDispD_FJ_E_OSD_SHAPE_TYPE_RECT_FRAME_2_COLOR = 13		/**< Double frame line of two colors. */
}
修改前 E_FJ_OSD_SHAPE_TYPE	
{
E_FJ_OSD_SHAPE_TYPE_RECT = 0,						/**< Rectangle no frame												*/
	E_FJ_OSD_SHAPE_TYPE_RECT_FRAME,						/**< Rectangle  frame only											*/
	E_FJ_OSD_SHAPE_TYPE_FILLED_RECT_FRAME,				/**< Rectangle with frame and body									*/
	E_FJ_OSD_SHAPE_TYPE_CIRCLE,							/**< Circle frame only												*/
	E_FJ_OSD_SHAPE_TYPE_FILLED_CIRCLE,					/**< Circel with frame and body										*/
	E_FJ_OSD_SHAPE_TYPE_ROUND_FRAME,					/**< Round rectangle frame only										*/
	E_FJ_OSD_SHAPE_TYPE_FILLED_ROUND_FRAME,				/**< Round rectanele with frame and body							*/
	E_FJ_OSD_SHAPE_TYPE_DONUT_RECT_FRAME,				/**< Frame thickness is 1 rectangle frame only						*/
	E_FJ_OSD_SHAPE_TYPE_TRIANGLE_DIR_LT,				/**< Triangle(Position of right angle is "Left-Top")				*/
	E_FJ_OSD_SHAPE_TYPE_TRIANGLE_DIR_RT,				/**< Triangle(Position of right angle is "Right-Top")				*/
	E_FJ_OSD_SHAPE_TYPE_TRIANGLE_DIR_LB,				/**< Triangle(Position of right angle is "Left-Bottom")				*/
	E_FJ_OSD_SHAPE_TYPE_TRIANGLE_DIR_RB					/**< Triangle(Position of right angle is "Right-Bottom")			*/
}			
修改后EfjOsdShapeType
{
FjDispD_E_FJ_OSD_SHAPE_TYPE_RECT = 0,						/**< Rectangle no frame												*/
	FjDispD_E_FJ_OSD_SHAPE_TYPE_RECT_FRAME,						/**< Rectangle  frame only											*/
	FjDispD_E_FJ_OSD_SHAPE_TYPE_FILLED_RECT_FRAME,				/**< Rectangle with frame and body									*/
	FjDispD_E_FJ_OSD_SHAPE_TYPE_CIRCLE,							/**< Circle frame only												*/
	FjDispD_E_FJ_OSD_SHAPE_TYPE_FILLED_CIRCLE,					/**< Circel with frame and body										*/
	FjDispD_E_FJ_OSD_SHAPE_TYPE_ROUND_FRAME,					/**< Round rectangle frame only										*/
	FjDispD_E_FJ_OSD_SHAPE_TYPE_FILLED_ROUND_FRAME,				/**< Round rectanele with frame and body							*/
	FjDispD_E_FJ_OSD_SHAPE_TYPE_DONUT_RECT_FRAME,				/**< Frame thickness is 1 rectangle frame only						*/
	FjDispD_E_FJ_OSD_SHAPE_TYPE_TRIANGLE_DIR_LT,				/**< Triangle(Position of right angle is "Left-Top")				*/
	FjDispD_E_FJ_OSD_SHAPE_TYPE_TRIANGLE_DIR_RT,				/**< Triangle(Position of right angle is "Right-Top")				*/
	FjDispD_E_FJ_OSD_SHAPE_TYPE_TRIANGLE_DIR_LB,				/**< Triangle(Position of right angle is "Left-Bottom")				*/
	FjDispD_E_FJ_OSD_SHAPE_TYPE_TRIANGLE_DIR_RB					/**< Triangle(Position of right angle is "Right-Bottom")			*/
}
修改前 E_DrawMode		
{
E_DrawMode_Effect_Optimized = 0,	/**< The drawing data will be re-set by what the position's data when icon is drawn		*/
	E_DrawMode_Speed_Optimized			/**< The drawing data will be set no matter what the position's data when icon is drawn	*/
}					
修改后 EDrawMode
{
FjDispD_E_DrawMode_Effect_Optimized = 0,	/**< The drawing data will be re-set by what the position's data when icon is drawn		*/
	FjDispD_E_DrawMode_Speed_Optimized			/**< The drawing data will be set no matter what the position's data when icon is drawn	*/
}
修改前 E_FJ_OSD_ATTR_TYPE			
{

E_FJ_OSD_ATTR_SHOW = 0,					/**< Not use */
	E_FJ_OSD_ATTR_CENTER,					/**< Set OSD display left-top's coordinate */
	E_FJ_OSD_ATTR_DO_FLIP,					/**< Not use */
	E_FJ_OSD_ATTR_FLIPPING, 				/**< Not use */
	E_FJ_OSD_ATTR_TEXT_COLOR,				/**< Not use */
	E_FJ_OSD_ATTR_TEXT_CLUT,				/**< Not use */
	E_FJ_OSD_ATTR_HISTO_PEN_COLOR,			/**< Set histogram's box frame color */
	E_FJ_OSD_ATTR_TEXT_SIZE,				/**< Text size used at none-MADE */
	E_FJ_OSD_ATTR_BK_MODE,					/**< Not use */
	E_FJ_OSD_ATTR_BRUSH_COLOR,				/**< Set shape's body color */
	E_FJ_OSD_ATTR_FRAME_THICKNESS,			/**< Set shape's frame thickness */
	E_FJ_OSD_ATTR_PROPORTIONAL_MODE,		/**< Not use */
	E_FJ_OSD_ATTR_TEXT_SPACE,				/**< Set the space between the icons */
	E_FJ_OSD_ATTR_BITMAP_COLOR, 			/**< Not use */
	E_FJ_OSD_ATTR_PEN_COLOR,				/**< Set shape's frame color */
	E_FJ_OSD_ATTR_VIRTUAL_MODE, 			/**< Not use */
	E_FJ_OSD_ATTR_INVISIBLE_FRAME,			/**< Not use */
	E_FJ_OSD_ATTR_HISTO_GRAF_COLOR, 		/**< Set histogram's color */
	E_FJ_OSD_ATTR_HISTO_GRAF_BACK_COLOR,	/**< Set histogram's background color */
	E_FJ_OSD_ATTR_REPLACE_COLOR,			/**< Set replace color use to GR icon drawing used */
	E_FJ_OSD_ATTR_ROUND_RECT_RADIUS,		/**< Round rectangle's corner's radius */
	E_FJ_OSD_ATTR_DONUT_FRAME_SIZE,			/**< Specify the donut rectangle's frame size. <br>*/
	E_FJ_OSD_ATTR_IMG_BACK_COLOR			/**< Set background color at the time of drawing image to image layer.<br> */
}		
修改后EfjOsdAttrType
{
FjDispD_E_FJ_OSD_ATTR_SHOW = 0,					/**< Not use */
	FjDispD_E_FJ_OSD_ATTR_CENTER,					/**< Set OSD display left-top's coordinate */
	FjDispD_E_FJ_OSD_ATTR_DO_FLIP,					/**< Not use */
	FjDispD_E_FJ_OSD_ATTR_FLIPPING, 				/**< Not use */
	FjDispD_E_FJ_OSD_ATTR_TEXT_COLOR,				/**< Not use */
	FjDispD_E_FJ_OSD_ATTR_TEXT_CLUT,				/**< Not use */
	FjDispD_E_FJ_OSD_ATTR_HISTO_PEN_COLOR,			/**< Set histogram's box frame color */
	FjDispD_E_FJ_OSD_ATTR_TEXT_SIZE,				/**< Text size used at none-MADE */
	FjDispD_E_FJ_OSD_ATTR_BK_MODE,					/**< Not use */
	FjDispD_E_FJ_OSD_ATTR_BRUSH_COLOR,				/**< Set shape's body color */
	FjDispD_E_FJ_OSD_ATTR_FRAME_THICKNESS,			/**< Set shape's frame thickness */
	FjDispD_E_FJ_OSD_ATTR_PROPORTIONAL_MODE,		/**< Not use */
	FjDispD_E_FJ_OSD_ATTR_TEXT_SPACE,				/**< Set the space between the icons */
	FjDispD_E_FJ_OSD_ATTR_BITMAP_COLOR, 			/**< Not use */
	FjDispD_E_FJ_OSD_ATTR_PEN_COLOR,				/**< Set shape's frame color */
	FjDispD_E_FJ_OSD_ATTR_VIRTUAL_MODE, 			/**< Not use */
	FjDispD_E_FJ_OSD_ATTR_INVISIBLE_FRAME,			/**< Not use */
	FjDispD_E_FJ_OSD_ATTR_HISTO_GRAF_COLOR, 		/**< Set histogram's color */
	FjDispD_E_FJ_OSD_ATTR_HISTO_GRAF_BACK_COLOR,	/**< Set histogram's background color */
	FjDispD_E_FJ_OSD_ATTR_REPLACE_COLOR,			/**< Set replace color use to GR icon drawing used */
	FjDispD_E_FJ_OSD_ATTR_ROUND_RECT_RADIUS,		/**< Round rectangle's corner's radius */
	FjDispD_E_FJ_OSD_ATTR_DONUT_FRAME_SIZE,			/**< Specify the donut rectangle's frame size. <br>*/
	FjDispD_E_FJ_OSD_ATTR_IMG_BACK_COLOR			/**< Set background color at the time of drawing image to image layer.<br> */
}
修改前 FJ_E_OSD_GDA_ATTR_TYPE	
{
FJ_E_OSD_GDA_ATTR_CENTER		= FjDispD_E_FJ_OSD_ATTR_CENTER,			/**< Set image display left-top's coordinate.	*/
	FJ_E_OSD_GDA_ATTR_BRUSH_COLOR	= FjDispD_E_FJ_OSD_ATTR_BRUSH_COLOR,	/**< Set shape's body color.					*/
	FJ_E_OSD_GDA_ATTR_PEN_COLOR		= FjDispD_E_FJ_OSD_ATTR_PEN_COLOR		/**< Set shape's frame color.	
}			
修改后 FjeosdGdaAttrType
{
FjDispD_FJ_E_OSD_GDA_ATTR_CENTER		= FjDispD_E_FJ_OSD_ATTR_CENTER,			/**< Set image display left-top's coordinate.	*/
	FjDispD_FJ_E_OSD_GDA_ATTR_BRUSH_COLOR	= FjDispD_E_FJ_OSD_ATTR_BRUSH_COLOR,	/**< Set shape's body color.					*/
	FjDispD_FJ_E_OSD_GDA_ATTR_PEN_COLOR		= FjDispD_E_FJ_OSD_ATTR_PEN_COLOR		/**< Set shape's frame color.					*/
}

 修改前 E_ALPHA_LEVEL		
 {
 E_ALPHA_LEVEL_0 = 0,			/**< Level 0	*/
	E_ALPHA_LEVEL_1,				/**< Level 1	*/
	E_ALPHA_LEVEL_2,				/**< Level 2	*/
	E_ALPHA_LEVEL_3,				/**< Level 3	*/
	E_ALPHA_LEVEL_4,				/**< Level 4	*/
	E_ALPHA_LEVEL_THE_END			/**< The End Flag */
 }			
 修改后EAlphaLEvel
 {
 FjDispD_E_ALPHA_LEVEL_0 = 0,			/**< Level 0	*/
	FjDispD_E_ALPHA_LEVEL_1,				/**< Level 1	*/
	FjDispD_E_ALPHA_LEVEL_2,				/**< Level 2	*/
	FjDispD_E_ALPHA_LEVEL_3,				/**< Level 3	*/
	FjDispD_E_ALPHA_LEVEL_4,				/**< Level 4	*/
	FjDispD_E_ALPHA_LEVEL_THE_END			/**< The End Flag */
 }
修改前 E_OSD_VIEW_FREEZE
{
E_OSD_VIEW_FREEZE_OFF = 0,		/**< Set view to unfreeze	*/
	E_OSD_VIEW_FREEZE_ON  = 1		/**< Set view to freeze	*/
}					
修改后 EOsdViewFreeze
{
FjDispD_E_OSD_VIEW_FREEZE_OFF = 0,		/**< Set view to unfreeze	*/
	FjDispD_E_OSD_VIEW_FREEZE_ON  = 1		/**< Set view to freeze	*/
}
修改前 E_HD_RESOLUTION
{
E_HD_RESOLUTION_720P_60HZ = 0,	/**< HD:1280*720,60HZ		*/
	E_HD_RESOLUTION_720P_50HZ,		/**< HD:1280*720,50HZ		*/
	E_HD_RESOLUTION_1080I_60H,		/**< Full HD:1920*1080,60HZ	*/
	E_HD_RESOLUTION_1080I_50H,		/**< Full HD:1920*1080,50HZ	*/
	E_HD_RESOLUTION_480P_60HZ,		/**< 720*480P,59.94Hz		*/
	E_HD_RESOLUTION_576P_50HZ,		/**< 720*576P,50HZ			*/
	E_HD_RESOLUTION_1080P_30H,		/**< Full HD:1920*1080,30HZ	*/
	E_HD_RESOLUTION_1080P_25H,		/**< Full HD:1920*1080,25HZ	*/
	E_HD_RESOLUTION_1080P_60H,		/**< Full HD:1920*1080,60HZ	*/
	E_HD_RESOLUTION_1080P_50H,		/**< Full HD:1920*1080,50HZ	*/
	E_HD_RESOLUTION_720P_30HZ,		/**< HD:1280*720,30HZ		*/
	E_HD_RESOLUTION_720P_25HZ,		/**< HD:1280*720,25HZ		*/
	E_HD_RESOLUTION_2160P_25H,		/**< 4Kx2K:3840*2160P@25Hz	*/
	E_HD_RESOLUTION_2160P_30H,		/**< 4Kx2K:3840*2160P@30Hz	*/
	E_HD_RESOLUTION_2160P_60H,		/**< 4Kx2K:3840*2160P@60Hz	*/
	E_HD_RESOLUTION_OTHER,			/**< Other					*/
	E_HD_RESOLUTION_THE_END 		/**< The end				*/
}				
修改后EHdResolutiion
{
FjDispD_E_HD_RESOLUTION_720P_60HZ = 0,	/**< HD:1280*720,60HZ		*/
	FjDispD_E_HD_RESOLUTION_720P_50HZ,		/**< HD:1280*720,50HZ		*/
	FjDispD_E_HD_RESOLUTION_1080I_60H,		/**< Full HD:1920*1080,60HZ	*/
	FjDispD_E_HD_RESOLUTION_1080I_50H,		/**< Full HD:1920*1080,50HZ	*/
	FjDispD_E_HD_RESOLUTION_480P_60HZ,		/**< 720*480P,59.94Hz		*/
	FjDispD_E_HD_RESOLUTION_576P_50HZ,		/**< 720*576P,50HZ			*/
	FjDispD_E_HD_RESOLUTION_1080P_30H,		/**< Full HD:1920*1080,30HZ	*/
	FjDispD_E_HD_RESOLUTION_1080P_25H,		/**< Full HD:1920*1080,25HZ	*/
	FjDispD_E_HD_RESOLUTION_1080P_60H,		/**< Full HD:1920*1080,60HZ	*/
	FjDispD_E_HD_RESOLUTION_1080P_50H,		/**< Full HD:1920*1080,50HZ	*/
	FjDispD_E_HD_RESOLUTION_720P_30HZ,		/**< HD:1280*720,30HZ		*/
	FjDispD_E_HD_RESOLUTION_720P_25HZ,		/**< HD:1280*720,25HZ		*/
	FjDispD_E_HD_RESOLUTION_2160P_25H,		/**< 4Kx2K:3840*2160P@25Hz	*/
	FjDispD_E_HD_RESOLUTION_2160P_30H,		/**< 4Kx2K:3840*2160P@30Hz	*/
	FjDispD_E_HD_RESOLUTION_2160P_60H,		/**< 4Kx2K:3840*2160P@60Hz	*/
	FjDispD_E_HD_RESOLUTION_OTHER,			/**< Other					*/
	FjDispD_E_HD_RESOLUTION_THE_END 		/**< The end				*/
}
修改前 E_HDMI_FLAG_BIT_MAP		
{
E_HDMI_FLAG_BIT_MAP_HSYNC     = 0x02,	/**< H-sync polarity	*/
	E_HDMI_FLAG_BIT_MAP_VSYNC     = 0x04,	/**< V-sync polarity	*/
	E_HDMI_FLAG_BIT_MAP_INTERLACE = 0x80,	/**< Interlace flag		*/
}	
修改后 EHdmiFlagBitMap
{
FjDispD_E_HDMI_FLAG_BIT_MAP_HSYNC     = 0x02,	/**< H-sync polarity	*/
	FjDispD_E_HDMI_FLAG_BIT_MAP_VSYNC     = 0x04,	/**< V-sync polarity	*/
	FjDispD_E_HDMI_FLAG_BIT_MAP_INTERLACE = 0x80,	/**< Interlace flag		*/
}
修改前 E_OUTPUT_MODE	
{
E_OUTPUT_MODE_RGB888_24BIT = 0,		/**< RGB888 24bit				*/
	E_OUTPUT_MODE_RGB888_8BIT_1,		/**< RGB888 8bit 1				*/
	E_OUTPUT_MODE_RGB888_8BIT_2,		/**< RGB888 8bit 2				*/
	E_OUTPUT_MODE_RGB888_8BIT_3,		/**< RGB888 8bit 3				*/
	E_OUTPUT_MODE_RGB888_16BIT_1,		/**< RGB888 16bit 1				*/
	E_OUTPUT_MODE_RGB888_16BIT_2,		/**< RGB888 16bit 2				*/
	E_OUTPUT_MODE_RGB565_8BIT,			/**< RGB565 8bit				*/
	E_OUTPUT_MODE_RGB565_16BIT,			/**< RGB565 16bit				*/
	E_OUTPUT_MODE_YCC422_8BIT,			/**< YCbCr422 8bit				*/
	E_OUTPUT_MODE_YCC422_16BIT,			/**< YCbCr422 16bit				*/
	E_OUTPUT_MODE_YCC422_24BIT,			/**< YCbCr444 24bit				*/
	E_OUTPUT_MODE_DEEP_YCC444_30BIT,	/**< Deep Color YCbCr444 30bit	*/
	E_OUTPUT_MODE_DEEP_YCC444_36BIT,	/**< Deep Color YCbCr444 36bit	*/
	E_OUTPUT_MODE_DUAL_YCC444_12BIT,	/**< Dual Edge YCbCr444 12bit	*/
	E_OUTPUT_MODE_GENERAL_8BIT,			/**< General purpose 8bit		*/
	E_OUTPUT_MODE_GENERAL_16BIT			/**< General purpose 16bit		*/
}				
修改后EOutputMode
{
FjDispD_E_OUTPUT_MODE_RGB888_24BIT = 0,		/**< RGB888 24bit				*/
	FjDispD_E_OUTPUT_MODE_RGB888_8BIT_1,		/**< RGB888 8bit 1				*/
	FjDispD_E_OUTPUT_MODE_RGB888_8BIT_2,		/**< RGB888 8bit 2				*/
	FjDispD_E_OUTPUT_MODE_RGB888_8BIT_3,		/**< RGB888 8bit 3				*/
	FjDispD_E_OUTPUT_MODE_RGB888_16BIT_1,		/**< RGB888 16bit 1				*/
	FjDispD_E_OUTPUT_MODE_RGB888_16BIT_2,		/**< RGB888 16bit 2				*/
	FjDispD_E_OUTPUT_MODE_RGB565_8BIT,			/**< RGB565 8bit				*/
	FjDispD_E_OUTPUT_MODE_RGB565_16BIT,			/**< RGB565 16bit				*/
	FjDispD_E_OUTPUT_MODE_YCC422_8BIT,			/**< YCbCr422 8bit				*/
	FjDispD_E_OUTPUT_MODE_YCC422_16BIT,			/**< YCbCr422 16bit				*/
	FjDispD_E_OUTPUT_MODE_YCC422_24BIT,			/**< YCbCr444 24bit				*/
	FjDispD_E_OUTPUT_MODE_DEEP_YCC444_30BIT,	/**< Deep Color YCbCr444 30bit	*/
	FjDispD_E_OUTPUT_MODE_DEEP_YCC444_36BIT,	/**< Deep Color YCbCr444 36bit	*/
	FjDispD_E_OUTPUT_MODE_DUAL_YCC444_12BIT,	/**< Dual Edge YCbCr444 12bit	*/
	FjDispD_E_OUTPUT_MODE_GENERAL_8BIT,			/**< General purpose 8bit		*/
	FjDispD_E_OUTPUT_MODE_GENERAL_16BIT			/**< General purpose 16bit		*/
}
修改前  E_TC_RESOLUTION	
{
FjDispD_E_TC_RESOLUTION_256 = 0,	/**< 256 gradations			*/
	FjDispD_E_TC_RESOLUTION_128,		/**< 128 gradations			*/
	FjDispD_E_TC_RESOLUTION_64,			/**< 64 gradations			*/
	FjDispD_E_TC_RESOLUTION_OFF			/**< TC Setting prohibit	*/
}
修改后 ETcResolution
{
FjDispD_E_TC_RESOLUTION_256 = 0,	/**< 256 gradations			*/
	FjDispD_E_TC_RESOLUTION_128,		/**< 128 gradations			*/
	FjDispD_E_TC_RESOLUTION_64,			/**< 64 gradations			*/
	FjDispD_E_TC_RESOLUTION_OFF			/**< TC Setting prohibit	*/
}
修改前 E_CORRECT_SELECT	
{
E_CORRECT_SELECT_IN_INVERSE_GAMMA,		/**< Anti gamma IN	*/
	E_CORRECT_SELECT_IN_GAMMA,				/**< Gamma IN		*/
	E_CORRECT_SELECT_OUT_GAMMA,				/**< Gamma OUT		*/
	E_CORRECT_SELECT_OUT_LUMINANCE,			/**< Luminance OUT	*/
	E_CORRECT_SELECT_OUT_CHROMA				/**< Chroma OUT		*/
}		
修改后 ECorrectSelect
{
FjDispD_E_CORRECT_SELECT_IN_INVERSE_GAMMA,		/**< Anti gamma IN	*/
	FjDispD_E_CORRECT_SELECT_IN_GAMMA,				/**< Gamma IN		*/
	FjDispD_E_CORRECT_SELECT_OUT_GAMMA,				/**< Gamma OUT		*/
	FjDispD_E_CORRECT_SELECT_OUT_LUMINANCE,			/**< Luminance OUT	*/
	FjDispD_E_CORRECT_SELECT_OUT_CHROMA				/**< Chroma OUT		*/
}
修改前 E_TABLE_ACCESS
{
E_TABLE_ACCESS_DISABLE = 0,	/**< Table access disable */
	E_TABLE_ACCESS_ENABLE		/**< Table access enable */
}
修改后 ETableAccess
{
FjDispD_FjDispD_E_TABLE_ACCESS_DISABLE = 0,	/**< Table access disable */
	FjDispD_FjDispD_E_TABLE_ACCESS_ENABLE		/**< Table access enable */
}

修改前 E_CORRECT_PROC		
{
FjDispD_E_TABLE_ACCESS_DISABLE = 0,	/**< Table access disable */
	FjDispD_E_TABLE_ACCESS_ENABLE		/**< Table access enable */
}			
修改后 ECorrectProc
{
FjDispD_FjDispD_E_TABLE_ACCESS_DISABLE = 0,	/**< Table access disable */
	FjDispD_FjDispD_E_TABLE_ACCESS_ENABLE		/**< Table access enable */
}

修改前 FJ_OSD_PRINT_COLOR	
{
E_CORRECT_PROC_DISABLE = 0,	/**< Processing disable */
	E_CORRECT_PROC_ENABLE		/**< Processing enable */
}			
修改后 FjOsdPrintColor
{
	FjDispD_E_CORRECT_PROC_DISABLE = 0,	/**< Processing disable */
	FjDispD_E_CORRECT_PROC_ENABLE		/**< Processing enable */
}
修改前 FJ_OSD_PRINT_COLOR_INDEX		
{
FJ_OSD_PRINT_COLOR_TRANSPARENCY = 252,		/**< Palette index of Transparency	*/
	FJ_OSD_PRINT_COLOR_BLACK,					/**< Palette index of Black			*/
	FJ_OSD_PRINT_COLOR_RED,						/**< Palette index of Red			*/
	FJ_OSD_PRINT_COLOR_YELLOW					/**< Palette index of Yellow		*/
}	
修改后 FjosdPrintColorIndex
{
FjDispD_FJ_OSD_PRINT_COLOR_TRANSPARENCY = 252,		/**< Palette index of Transparency	*/
	FjDispD_FJ_OSD_PRINT_COLOR_BLACK,					/**< Palette index of Black			*/
	FjDispD_FJ_OSD_PRINT_COLOR_RED,						/**< Palette index of Red			*/
	FjDispD_FJ_OSD_PRINT_COLOR_YELLOW					/**< Palette index of Yellow		*/
}
修改前 FJ_OSD_MATRIX_KIND
{
FJ_OSD_PRINT_COLOR_INDEX_BACK = 0,		/**< Background index	*/
	FJ_OSD_PRINT_COLOR_INDEX_TEXT,			/**< Text index			*/
	FJ_OSD_PRINT_COLOR_INDEX_END			/**< End flag			*/
}					
修改后 FjOsdMatrixKind
{
FjDispD_FJ_OSD_PRINT_COLOR_INDEX_BACK = 0,		/**< Background index	*/
	FjDispD_FJ_OSD_PRINT_COLOR_INDEX_TEXT,			/**< Text index			*/
	FjDispD_FJ_OSD_PRINT_COLOR_INDEX_END			/**< End flag			*/
}
修改前 FJ_OSD_BRIGHT_WARN_KIND_SEL	
{
FJ_OSD_BRIGHT_WARN_KIND_SEL_HIGH,	/**< High-intensity warning.	*/
	FJ_OSD_BRIGHT_WARN_KIND_SEL_LOW,	/**< Low-intensity warning.		*/
	FJ_OSD_BRIGHT_WARN_KIND_SEL_ALL		/**< High and Low-intensity warning. */
修改后		FjosdBrightWarnKindsel
{
FjDispD_FJ_OSD_BRIGHT_WARN_KIND_SEL_HIGH,	/**< High-intensity warning.	*/
	FjDispD_FJ_OSD_BRIGHT_WARN_KIND_SEL_LOW,	/**< Low-intensity warning.		*/
	FjDispD_FJ_OSD_BRIGHT_WARN_KIND_SEL_ALL		/**< High and Low-intensity warning. */
}
修改前 FJ_OSD_BRIGHT_WARN_METHOD_SEL
{
FJ_OSD_BRIGHT_WARN_METHOD_SEL_REVERSE_Y,	/**< Reversed Y data.		*/
	FJ_OSD_BRIGHT_WARN_METHOD_SEL_YCC			/**< Specified YCC data.	*/
} 	

修改后 FjosdBrightWarnMethodSel
{
FjDispD_FJ_OSD_BRIGHT_WARN_METHOD_SEL_REVERSE_Y,	/**< Reversed Y data.		*/
	FjDispD_FJ_OSD_BRIGHT_WARN_METHOD_SEL_YCC			/**< Specified YCC data.	*/
}

修改前 E_FJ_OSD_AREA				
{
E_FJ_OSD_AREA0 = 0x0001,	/**< Draw area 0 = 0x0001	*/
	E_FJ_OSD_AREA1 = 0x0002,	/**< Draw area 1 = 0x0002	*/
	E_FJ_OSD_AREA2 = 0x0004,	/**< Draw area 2 = 0x0004	*/
	E_FJ_OSD_AREA3 = 0x0008,	/**< Draw area 3 = 0x0008	*/
	E_FJ_OSD_AREA4 = 0x0010,	/**< Draw area 4 = 0x0010	*/
	E_FJ_OSD_AREA5 = 0x0020,	/**< Draw area 5 = 0x0020	*/
	E_FJ_OSD_AREA6 = 0x0040,	/**< Draw area 6 = 0x0040	*/
	E_FJ_OSD_AREA7 = 0x0080,	/**< Draw area 7 = 0x0080	*/
	E_FJ_OSD_AREA7 = 0x0100,	/**< Draw area 8 = 0x0100	*/
	E_FJ_OSD_AREA9 = 0x0200		/**< Draw area 9 = 0x0200	*
}	
	
修改后 EFjOsdArea
{
FjDispD_E_FJ_OSD_AREA0 = 0x0001,	/**< Draw area 0 = 0x0001	*/
	FjDispD_E_FJ_OSD_AREA1 = 0x0002,	/**< Draw area 1 = 0x0002	*/
	FjDispD_E_FJ_OSD_AREA2 = 0x0004,	/**< Draw area 2 = 0x0004	*/
	FjDispD_E_FJ_OSD_AREA3 = 0x0008,	/**< Draw area 3 = 0x0008	*/
	FjDispD_E_FJ_OSD_AREA4 = 0x0010,	/**< Draw area 4 = 0x0010	*/
	FjDispD_E_FJ_OSD_AREA5 = 0x0020,	/**< Draw area 5 = 0x0020	*/
	FjDispD_E_FJ_OSD_AREA6 = 0x0040,	/**< Draw area 6 = 0x0040	*/
	FjDispD_E_FJ_OSD_AREA7 = 0x0080,	/**< Draw area 7 = 0x0080	*/
	FjDispD_E_FJ_OSD_AREA7 = 0x0100,	/**< Draw area 8 = 0x0100	*/
	FjDispD_E_FJ_OSD_AREA9 = 0x0200		/**< Draw area 9 = 0x0200	*
}

修改前  E_ORDER_LAYER	
{
E_ORDER_BOTTOM = 0,			/**< The bottom layer	*/
	E_ORDER_SECOND,				/**< The second layer	*/
	E_ORDER_THIRD,				/**< The third layer	*/
	E_ORDER_TOP,				/**< The top layer		*/
	E_ORDER_NUM_OF_LAYER,		/**< end of enum		*/
}				

修改后EOrderLayer
{
FjDispD_E_ORDER_BOTTOM = 0,			/**< The bottom layer	*/
	FjDispD_E_ORDER_SECOND,				/**< The second layer	*/
	FjDispD_E_ORDER_THIRD,				/**< The third layer	*/
	FjDispD_E_ORDER_TOP,				/**< The top layer		*/
	FjDispD_E_ORDER_NUM_OF_LAYER,		/**< end of enum		*/
}

修改前 E_Draw_Type	
{
E_Draw_Type_OSD_Common_ICON = 0,		/**< OSD common icon	*/
	E_Draw_Type_OSD_Reload_ICON,			/**< OSD reload icon	*/
	E_Draw_Type_HDMI_Common_ICON,			/**< HDMI common icon	*/
	E_Draw_Type_HDMI_Common_ICON,			/**< HDMI reload icon	*/
	E_Draw_Type_DRAW_FILE,					/**< Draw file			*/
	E_Draw_Type_End	= FjDispD_E_Draw_Type_DRAW_FILE	/**< End flag			*/
}		
		
修改后  EDrawType
{
FjDispD_E_Draw_Type_OSD_Common_ICON = 0,		/**< OSD common icon	*/
	FjDispD_E_Draw_Type_OSD_Reload_ICON,			/**< OSD reload icon	*/
	FjDispD_E_Draw_Type_HDMI_Common_ICON,			/**< HDMI common icon	*/
	FjDispD_E_Draw_Type_HDMI_Common_ICON,			/**< HDMI reload icon	*/
	FjDispD_E_Draw_Type_DRAW_FILE,					/**< Draw file			*/
	FjDispD_E_Draw_Type_End	= FjDispD_E_Draw_Type_DRAW_FILE	/**< End flag			*/
}

修改前 E_FJ_OSD_ICON_BOOT				
{
E_FJ_OSD_ICON_COMM_GR = 0,				/**< None */
#if 0
	E_FJ_OSD_ICON_COMM_PREVIEW_MENU,		/**< preview */
	E_FJ_OSD_ICON_COMM_PLAYBACK_MENU, 		/**< playback */
	E_FJ_OSD_ICON_COMM_MOVIE_MENU, 			/**< movie */
	E_FJ_OSD_ICON_COMM_SETUP_MENU, 			/**< setup */
	E_FJ_OSD_ICON_COMM_USB_MENU, 			/**< usb */
	E_FJ_OSD_ICON_COMM_MESSAGE_MENU,		/**< message */
#endif
	E_FJ_OSD_ICON_COMM_MAX					/**< MAX */
}

修改后 EfjOsdIconBoot
{
FjDispD_E_FJ_OSD_ICON_COMM_GR = 0,				/**< None */
#if 0
	FjDispD_E_FJ_OSD_ICON_COMM_PREVIEW_MENU,		/**< preview */
	FjDispD_E_FJ_OSD_ICON_COMM_PLAYBACK_MENU, 		/**< playback */
	FjDispD_E_FJ_OSD_ICON_COMM_MOVIE_MENU, 			/**< movie */
	FjDispD_E_FJ_OSD_ICON_COMM_SETUP_MENU, 			/**< setup */
	FjDispD_E_FJ_OSD_ICON_COMM_USB_MENU, 			/**< usb */
	FjDispD_E_FJ_OSD_ICON_COMM_MESSAGE_MENU,		/**< message */
#endif
	FjDispD_E_FJ_OSD_ICON_COMM_MAX					/**< MAX */
}

修改前 E_FJ_IMAGE_SIZE	
{
E_FJ_IMAGE_SIZE_4K2K = 0,		/**< 3940X2160 or 4096X2048	*/
	E_FJ_IMAGE_SIZE_FHD,			/**< 1920X1080	*/
	E_FJ_IMAGE_SIZE_HD ,			/**< 1280X720	*/
	E_FJ_IMAGE_SIZE_SXVGA ,			/**< 1280X960	*/
	E_FJ_IMAGE_SIZE_HVGAW  ,		/**< 640X368	*/
	E_FJ_IMAGE_SIZE_QVGA  ,			/**< 320X240	*/
	E_FJ_IMAGE_SIZE_QVGA_16_9,		/**< 320X180	*/
	E_FJ_IMAGE_SIZE_VGA,			/**< 640X480	*/
	E_FJ_IMAGE_SIZE_HVGA,			/**< 480x320	*/
	E_FJ_IMAGE_SIZE_FHD_4_3,		/**< 1440X1080	*/
	E_FJ_IMAGE_SIZE_3M,				/**< 2048X1536	*/
}

修改后 EFjImageSize
{
FjDispD_E_FJ_IMAGE_SIZE_4K2K = 0,		/**< 3940X2160 or 4096X2048	*/
	FjDispD_E_FJ_IMAGE_SIZE_FHD,			/**< 1920X1080	*/
	FjDispD_E_FJ_IMAGE_SIZE_HD ,			/**< 1280X720	*/
	FjDispD_E_FJ_IMAGE_SIZE_SXVGA ,			/**< 1280X960	*/
	FjDispD_E_FJ_IMAGE_SIZE_HVGAW  ,		/**< 640X368	*/
	FjDispD_E_FJ_IMAGE_SIZE_QVGA  ,			/**< 320X240	*/
	FjDispD_E_FJ_IMAGE_SIZE_QVGA_16_9,		/**< 320X180	*/
	FjDispD_E_FJ_IMAGE_SIZE_VGA,			/**< 640X480	*/
	FjDispD_E_FJ_IMAGE_SIZE_HVGA,			/**< 480x320	*/
	FjDispD_E_FJ_IMAGE_SIZE_FHD_4_3,		/**< 1440X1080	*/
	FjDispD_E_FJ_IMAGE_SIZE_3M,				/**< 2048X1536	*/
}

修改前 E_FJ_IMAGE_FORMAT			
{
E_FJ_IMAGE_FORMAT_422 = 0,				/**< YCbCr422 respect point 8bit format.			*/
	E_FJ_IMAGE_FORMAT_YCC422_RP_12BIT_PACK,	/**< YCbCr422 respect point 12bit format.			*/
	E_FJ_IMAGE_FORMAT_YCC422_RP_10BIT_PACK,	/**< YCbCr422 respect point 10bit format.			*/
	E_FJ_IMAGE_FORMAT_420,					/**< YCbCr420 respect point 8bit format.			*/
	E_FJ_IMAGE_FORMAT_YCC420_RP_10BIT_PACK,	/**< YCbCr420 respect point 10bit format.			*/
	E_FJ_IMAGE_FORMAT_GENERAL_10BIT,		/**< General purpose 10bit input data.				*/
	E_FJ_IMAGE_FORMAT_GENERAL_10BITx2,		/**< General purpose 10bit input data (10bitx2).	*/
	E_FJ_IMAGE_FORMAT_VIDEO,				/**< Video format	
}	
	
修改后 EFjImageFormat
{
FjDispD_E_FJ_IMAGE_FORMAT_422 = 0,				/**< YCbCr422 respect point 8bit format.			*/
	FjDispD_E_FJ_IMAGE_FORMAT_YCC422_RP_12BIT_PACK,	/**< YCbCr422 respect point 12bit format.			*/
	FjDispD_E_FJ_IMAGE_FORMAT_YCC422_RP_10BIT_PACK,	/**< YCbCr422 respect point 10bit format.			*/
	FjDispD_E_FJ_IMAGE_FORMAT_420,					/**< YCbCr420 respect point 8bit format.			*/
	FjDispD_E_FJ_IMAGE_FORMAT_YCC420_RP_10BIT_PACK,	/**< YCbCr420 respect point 10bit format.			*/
	FjDispD_E_FJ_IMAGE_FORMAT_GENERAL_10BIT,		/**< General purpose 10bit input data.				*/
	FjDispD_E_FJ_IMAGE_FORMAT_GENERAL_10BITx2,		/**< General purpose 10bit input data (10bitx2).	*/
	FjDispD_E_FJ_IMAGE_FORMAT_VIDEO,				/**< Video format	
}

修改前E_DISP_DEV	
{
E_DISP_DEV_LCD = 0x00,		/**< LCD	*/
	E_DISP_DEV_HDMI,			/**< HDMI	*/
}

修改后EDispDev
{
FjDispD_E_DISP_DEV_LCD = 0x00,		/**< LCD	*/
	FjDispD_E_DISP_DEV_HDMI,			/**< HDMI	*/
}

修改前 E_FJ_DISP_COMM_BLOCK		
{
E_FJ_DISP_COMM_BLOCK_0 = 0,		/**< common block 0(for HDMI block) */
	E_FJ_DISP_COMM_BLOCK_1,			/**< common block 1(for LCD  block) */
	E_FJ_DISP_COMM_BLOCK_NUM,		/**< common block number            */
}	
	
修改后 EfjDispCommBlock
{
FjDispD_E_FJ_DISP_COMM_BLOCK_0 = 0,		/**< common block 0(for HDMI block) */
	FjDispD_E_FJ_DISP_COMM_BLOCK_1,			/**< common block 1(for LCD  block) */
	FjDispD_E_FJ_DISP_COMM_BLOCK_NUM,		/**< common block number            */
}
修改前  E_FJ_RESOURCE_TYPE	
{
E_FJ_RESOURCE_TYPE_GR_ICON				= 0,	/**< icon			*/
	E_FJ_RESOURCE_TYPE_GR_STRING,					/**< icon			*/
#if 0
	E_FJ_RESOURCE_TYPE_PREVIEW_MENU,				/**< preview menu	*/
	E_FJ_RESOURCE_TYPE_PREVIEW_MENU_STRING,			/**< preview menu	*/
	E_FJ_RESOURCE_TYPE_PLAYBACK_MENU,				/**< playback menu	*/
	E_FJ_RESOURCE_TYPE_PLAYBACK_MENU_STRING,		/**< playback menu	*/
	E_FJ_RESOURCE_TYPE_MOVIE_MENU,					/**< movie menu 	*/
	E_FJ_RESOURCE_TYPE_MOVIE_MENU_STRING,			/**< movie menu 	*/
	E_FJ_RESOURCE_TYPE_SETUP_MENU,					/**< setup menu 	*/
	E_FJ_RESOURCE_TYPE_SETUP_MENU_STRING,			/**< setup menu 	*/
	E_FJ_RESOURCE_TYPE_USB_MENU, 					/**< usb menu		*/
	E_FJ_RESOURCE_TYPE_USB_MENU_STRING, 			/**< usb menu		*/
	E_FJ_RESOURCE_TYPE_MESSAGE,						/**< message		*/
	E_FJ_RESOURCE_TYPE_MESSAGE_STRING,				/**< message		*/
#endif
	E_FJ_RESOURCE_TYPE_MAX,
}		
		
修改后  EFjResourceType
{
FjDispD_E_FJ_RESOURCE_TYPE_GR_ICON				= 0,	/**< icon			*/
	FjDispD_E_FJ_RESOURCE_TYPE_GR_STRING,					/**< icon			*/
#if 0
	FjDispD_E_FJ_RESOURCE_TYPE_PREVIEW_MENU,				/**< preview menu	*/
	FjDispD_E_FJ_RESOURCE_TYPE_PREVIEW_MENU_STRING,			/**< preview menu	*/
	FjDispD_E_FJ_RESOURCE_TYPE_PLAYBACK_MENU,				/**< playback menu	*/
	FjDispD_E_FJ_RESOURCE_TYPE_PLAYBACK_MENU_STRING,		/**< playback menu	*/
	FjDispD_E_FJ_RESOURCE_TYPE_MOVIE_MENU,					/**< movie menu 	*/
	FjDispD_E_FJ_RESOURCE_TYPE_MOVIE_MENU_STRING,			/**< movie menu 	*/
	FjDispD_E_FJ_RESOURCE_TYPE_SETUP_MENU,					/**< setup menu 	*/
	FjDispD_E_FJ_RESOURCE_TYPE_SETUP_MENU_STRING,			/**< setup menu 	*/
	FjDispD_E_FJ_RESOURCE_TYPE_USB_MENU, 					/**< usb menu		*/
	FjDispD_E_FJ_RESOURCE_TYPE_USB_MENU_STRING, 			/**< usb menu		*/
	FjDispD_E_FJ_RESOURCE_TYPE_MESSAGE,						/**< message		*/
	FjDispD_E_FJ_RESOURCE_TYPE_MESSAGE_STRING,				/**< message		*/
#endif
	FjDispD_E_FJ_RESOURCE_TYPE_MAX,
}


由fj_disp.h拆分的fjdispe.h
原宏定义：																			

#define FJ_DISP_HDMI_AUDIO_32000HZ	32000		/**< 32kHz   */
#define FJ_DISP_HDMI_AUDIO_48000HZ	48000		/**< 48kHz   */
#define FJ_DISP_HDMI_AUDIO_44100HZ	44100		/**< 44.1kHz */
#define FJ_DISP_HDMI_AUDIO_96000HZ	96000		/**< 96kHz   */
#define FJ_DISP_HDMI_FREQ_CTRL_INACTIVE		0	/**< Inactive   */
#define FJ_DISP_HDMI_FREQ_CTRL_ACTIVE		1	/**< Acvive (The frequency generated by the PLL05 and PLL05A to 1000/1001.) */
#define FJ_DISP_MIPI_FREQ_CTRL_INACTIVE		0	/**< Inactive   */
#define FJ_DISP_MIPI_FREQ_CTRL_ACTIVE		1	/**< Acvive (The frequency generated by the PLL05 and PLL05A to 1000/1001.) */
#define FJ_DISP_MIPI_MODE_VIDEO				0	/**< Set the operation mode to video mode	*/
#define FJ_DISP_MIPI_MODE_CMD				1	/**< Set the operation mode to command Mode	*/
#define FJ_HDMI_EDID_TAG_FLAG_AUDIO		(0x01)	/**< EDID Tag AUDIO			*/
#define FJ_HDMI_EDID_TAG_FLAG_VIDEO		(0x02)	/**< EDID Tag VIDEO			*/
#define FJ_HDMI_EDID_TAG_FLAG_VENDOR	(0x04)	/**< EDID Tag VENDOR		*/
#define FJ_HDMI_EDID_TAG_FLAG_SPEAKER	(0x08)	/**< EDID Tag SPEAKER		*/
#define FJ_HDMI_EDID_TAG_FLAG_VESA		(0x10)	/**< EDID Tag VESA			*/
#define FJ_HDMI_EDID_TAG_FLAG_EXTENDED	(0x20)	/**< EDID Tag EXTENDED		*/
#define FJ_HDMI_EDID_TAG_FLAG_ALL		(0x3F)	/**< EDID All Tags 			*/
#define FJ_HDMI_AUDIO_32000HZ	32000		/**< 32kHz   */
#define FJ_HDMI_AUDIO_48000HZ	48000		/**< 48kHz   */
#define FJ_HDMI_AUDIO_44100HZ	44100		/**< 44.1kHz */
#define FJ_HDMI_AUDIO_96000HZ	96000		/**< 96kHz   */
#define FJ_HDMI_1280x720p60Hz_16_9		(0x80001)	/**< 1280x720p 60Hz	 16:9 */
#define FJ_HDMI_1280x720p50Hz_16_9		(0x80002)	/**< 1280x720p 50Hz	 16:9 */
#define FJ_HDMI_1920x1080i60Hz_16_9		(0x80004)	/**< 1920x1080i 60Hz 16:9 */
#define FJ_HDMI_1920x1080i50Hz_16_9		(0x80008)	/**< 1920x1080i 50Hz 16:9 */
#define FJ_HDMI_720x480p60Hz_4_3		(0x80010)	/**< 720x480p 60Hz	  4:3 */
#define FJ_HDMI_720x576p50Hz_4_3		(0x80020)	/**< 720x576p 50Hz	  4:3 */
#define FJ_HDMI_1920x1080p30Hz_16_9		(0x80040)	/**< 1920x1080p 30Hz 16:9 */
#define FJ_HDMI_1920x1080p25Hz_16_9		(0x80080)	/**< 1920x1080p 25Hz 16:9 */
#define FJ_HDMI_1920x1080p60Hz_16_9		(0x80100)	/**< 1920x1080p 60Hz 16:9 */
#define FJ_HDMI_1920x1080p50Hz_16_9		(0x80200)	/**< 1920x1080p 50Hz 16:9 */
#define FJ_HDMI_1280x720p25Hz_16_9		(0x80400)	/**< 1280x720p 25Hz	 16:9 */
#define FJ_HDMI_1280x720p30Hz_16_9		(0x80800)	/**< 1280x720p 25Hz	 16:9 */
#define FJ_HDMI_3840x2160p25Hz_16_9		(0x81000)	/**< 3840x2160p 25Hz 16:9 */
#define FJ_HDMI_3840x2160p30Hz_16_9		(0x82000)	/**< 3840x2160p 30Hz 16:9 */
#define FJ_HDMI_3840x2160p60Hz_16_9		(0x84000)	/**< 3840x2160p 60Hz 16:9 */
#define FJ_HDMI_DVI_MONITOR				(0x40000)	/**< DVI				  */
#define FJ_HDMI_FORMAT_NO				(0x80000)	/**< format base		  */
#define FJ_HDMI_OUT_RGB			(0x00)		/**< RGB */
#define FJ_HDMI_OUT_YCC422		(0x20)		/**< YCbCr422 */
#define FJ_HDMI_OUT_YCC444		(0x40)		/**< YCbCr444 */
#define FJ_HDMI_ASPECT_4_3		(0x01)		/**< Aspect type 4:3	*/
#define FJ_HDMI_ASPECT_16_9		(0x02)		/**< Aspect type 16:9	*/
#define FJ_HDMI_SCAN_OVER		(0x01)		/**< over scan */
#define FJ_HDMI_SCAN_UNDER		(0x02)		/**< under scan */
#define FJ_HDMI_VSYNC_NEG		(0x00)		/**< negative V sync */
#define FJ_HDMI_VSYNC_POS		(0x04)		/**< positive V sinc */
#define FJ_HDMI_HSYNC_NEG		(0x00)		/**< negative V sync */
#define FJ_HDMI_HSYNC_POS		(0x02)		/**< positive V sinc */
#define FJ_HDMI_INTERLACE		(0x80)		/**< interlace */
#define FJ_HDMI_NON_INTERLACE	(0x00)		/**< non interlace */
#define FJ_HDMI_FORCE_CLEAR			(0x00)			/**< not force setting	*/
#define FJ_HDMI_FORCE_YCC422		(0x01)			/**< YCbCr422			*/
#define FJ_HDMI_FORCE_YCC444		(0x02)			/**< YCbCr444			*/
#define FJ_HDMI_PD_DOWN					(0)			/**< SYS_CTRL1.PD Register<br> TMDS core is powerd down and interrupts are in power-down mode*/
#define FJ_HDMI_PD_NORMAL				(1)			/**< SYS_CTRL1.PD Register<br> Normal operation			*/
#define FJ_HDMI_EDGE_FALLING			(0)			/**< SYS_CTRL1.EDGE Register<br> Latch input on Falling Edge	*/
#define FJ_HDMI_EDGE_RISING				(1)			/**< SYS_CTRL1.EDGE Register<br> Latch input on Rising Edge		*/
#define FJ_HDMI_HEN_FIXEDLOW			(0)			/**< SYS_CTRL1.HEN Register<br> Fixed LOW						*/
#define FJ_HDMI_HEN_INPUT				(1)			/**< SYS_CTRL1.HEN Register<br> Follow HSYNC input				*/
#define FJ_HDMI_VEN_FIXEDLOW			(0)			/**< SYS_CTRL1.VEN Register<br> Fixed LOW						*/
#define FJ_HDMI_VEN_INPUT				(1)			/**< SYS_CTRL1.VEN Register<br> Follow VSYNC input				*/
#define FJ_HDMI_VSYNC_ACTIVE			(0)			/**< SYS_CTRL1.VSYNC Register<br> VSYNC active					*/
#define FJ_HDMI_VSYNC_DEACTIVE			(1)			/**< SYS_CTRL1.VSYNC Register<br> VSYNC deactive				*/
#define FJ_HDMI_HDCP_SEL_UNENCRYPTED	(0)			/**< DCTL.hdcpSel Register<br> Send unencrypted data	*/
#define FJ_HDMI_HDCP_SEL_ENCRYPTED		(1)			/**< DCTL.hdcpSel Register<br> Send encrypted data		*/
#define FJ_HDMI_AUD_MUTE_NORMAL			(0)			/**< DCTL.audMute Register<br> Do not send zeros in audio packet	*/
#define FJ_HDMI_AUD_MUTE_SEND_ZERO		(1)			/**< DCTL.audMute Register<br> Send zeros in audio packet			*/
#define FJ_HDMI_VID_BLANK_NORMAL		(0)			/**< DCTL.vidBank Register<br> Normal operation				*/
#define FJ_HDMI_VID_BLANK_BLANKED		(1)			/**< DCTL.vidBank Register<br> Video output is blanked			*/
#define FJ_HDMI_VID_CTRL_ICLK_NOTREP	(0)			/**< VID_CTRL.ICLK Register<br> Pixel data is not replicated				*/
#define FJ_HDMI_VID_CTRL_ICLK_ONCE		(1)			/**< VID_CTRL.ICLK Register<br> Pixels are replicated once(each sent twice)	*/
#define FJ_HDMI_VID_CTRL_ICLK_4TIMES	(3)			/**< VID_CTRL.ICLK Register<br> Pixels are replicated 4 times(each sent four times)	*/
#define FJ_HDMI_POLARITY_HIGH			(0)			/**< INT_CTRL.POLARITY Register<br> Assert HIGH		*/
#define FJ_HDMI_POLARITY_LOW			(1)			/**< INT_CTRL.POLARITY Register<br> Assert LOW		*/
#define FJ_HDMI_SOFT_INTR_CLEAR			(0)			/**< INT_CTRL.SOFT_INTR Register<br> Clear interrupt	*/
#define FJ_HDMI_SOFT_INTR_SET			(1)			/**< INT_CTRL.SOFT_INTR Register<br> Set interrupt		*/
#define FJ_HDMI_NCTSPKT_EN_DISABLE		(0)			/**< ACR_CTRL.NCTSPKT_EN Register<br> N/CTS packet disabled	*/
#define FJ_HDMI_NCTSPKT_EN_ENABLE		(1)			/**< ACR_CTRL.NCTSPKT_EN Register<br> N/CTS packet enabled	*/
#define FJ_HDMI_AUD_EN_DISABLE			(0)			/**< AUD_MODE.AUD_EN Register<br> Audio input stream disabled	*/
#define FJ_HDMI_AUD_EN_ENABLE			(1)			/**< AUD_MODE.AUD_EN Register<br> Audio input stream enabled	*/
#define FJ_HDMI_SPDIF_EN_DISABLE		(0)			/**< AUD_MODE.SPDIF_EN Register<br> S/PDIF input stream disabled	*/
#define FJ_HDMI_SPDIF_EN_ENABLE			(1)			/**< AUD_MODE.SPDIF_EN Register<br> S/PDIF input stream enabled		*/
#define FJ_HDMI_SD0_EN_DISABLE			(0)			/**< AUD_MODE.SD0_EN Register<br> I2S input channel #0 disable	*/
#define FJ_HDMI_SD0_EN_ENABLE			(1)			/**< AUD_MODE.SD0_EN Register<br> I2S input channel #0 enable	*/
#define FJ_HDMI_I2S_FIFO_MAP_SD0		(0)			/**< I2S_IN_MAP.FIFOx_MAP Register<br> Map SD0 to FIFO		*/
#define FJ_HDMI_I2S_FIFO_MAP_SD1		(1)			/**< I2S_IN_MAP.FIFOx_MAP Register<br> Map SD1 to FIFO		*/
#define FJ_HDMI_I2S_FIFO_MAP_SD2		(2)			/**< I2S_IN_MAP.FIFOx_MAP Register<br> Map SD2 to FIFO		*/
#define FJ_HDMI_I2S_FIFO_MAP_SD3		(3)			/**< I2S_IN_MAP.FIFOx_MAP Register<br> Map SD3 to FIFO		*/
#define FJ_HDMI_I2S_SHIFT_FIRSTBIT		(0)			/**< I2S_CONTROL.I2S_SHIFT Register<br> First bit shift		*/
#define FJ_HDMI_I2S_SHIFT_NO			(1)			/**< I2S_CONTROL.I2S_SHIFT Register<br> No shift			*/
#define FJ_HDMI_I2S_DIR_MSB				(0)			/**< I2S_CONTROL.I2S_DIR Register<br> MSB shifted first		*/
#define FJ_HDMI_I2S_JUST_LEFT			(0)			/**< I2S_CONTROL.I2S_JUST Register<br> Data is left-justified		*/
#define FJ_HDMI_I2S_JUST_RIGHT			(1)			/**< I2S_CONTROL.I2S_JUST Register<br> Data is right-justified		*/
#define FJ_HDMI_I2S_WS_LOW				(0)			/**< I2S_CONTROL.I2S_WS Register<br> Left polarity when WS is LOW	*/
#define FJ_HDMI_I2S_WS_HIGH				(1)			/**< I2S_CONTROL.I2S_WS Register<br> Left polarity when WS is HIGH	*/
#define FJ_HDMI_VBIT_PCM				(0)			/**< I2S_CONTROL.VBIT Register<br> PCM						*/
#define FJ_HDMI_VBIT_COMPRESSED			(1)			/**< I2S_CONTROL.VBIT Register<br> Compressed				*/
#define FJ_HDMI_SCK_EDGE_RISING			(1)			/**< I2S_CONTROL.SCK_EDGE Register<br> Sample clock is rising		*/
#define FJ_HDMI_HBRA_NOT_HIGH			(0)			/**< I2S_CONTROL.HBRA_ON Register<br> Input stream is not high bit rate	*/
#define FJ_HDMI_HBRA_HIGH				(1)			/**< I2S_CONTROL.HBRA_ON Register<br> Input stream is high bit rate		*/
#define FJ_HDMI_SW_SPDIF_FS_44100HZ		(0)			/**< I2S_CHST4.SW_SPDIF_FS Register<br> 44.1kHz				*/
#define FJ_HDMI_SW_SPDIF_FS_48000HZ		(2)			/**< I2S_CHST4.SW_SPDIF_FS Register<br> 48.0kHz				*/
#define FJ_HDMI_SW_SPDIF_FS_32000HZ		(3)			/**< I2S_CHST4.SW_SPDIF_FS Register<br> 32.0kHz				*/
#define FJ_HDMI_CLK_ACCUR_0				(0)			/**< I2S_CHST4.CLK_ACCUR Register<br> 0x0					*/
#define FJ_HDMI_I2S_MAXLEN_20BIT		(0)			/**< I2S_CHST5.I2S_MAXLEN Register<br> 20bit				*/
#define FJ_HDMI_I2S_MAXLEN_24BIT		(1)			/**< I2S_CHST5.I2S_MAXLEN Register<br> 24bit				*/
#define FJ_HDMI_I2S_LEN_16OR20BIT		(0)			/**< I2S_CHST5.I2S_LEN Register<br> 16word(I2S_MAXLEN=20bit)*/
#define FJ_HDMI_I2S_LEN_20OR24BIT		(5)			/**< I2S_CHST5.I2S_LEN Register<br> 24word(I2S_MAXLEN=24bit)*/
#define FJ_HDMI_SRC_EN_DISABLE			(0)			/**< ASRC.SRC_EN Register<br> Audio sample rate conversion disabled	*/
#define FJ_HDMI_SRC_EN_ENABLE			(1)			/**< ASRC.SRC_EN Register<br> Audio sample rate conversion enabled	*/
#define FJ_HDMI_RATIO_2TO1				(0)			/**< ASRC.RATIO Register<br> Down-sample 2-to-1 when SRC_EN is set to 1	*/
#define FJ_HDMI_RATIO_4TO1				(1)			/**< ASRC.RATIO Register<br> Down-sample 4-to-1 when SRC_EN is set to 1	*/
#define FJ_HDMI_IN_LENGTH_16BIT			(0x2)		/**< I2S_IN_LEN.IN_LENGTH Register<br> 16bit				*/
#define FJ_HDMI_IN_LENGTH_24BIT			(0xB)		/**< I2S_IN_LEN.IN_LENGTH Register<br> 24bit				*/
#define FJ_HDMI_HDMI_MODE_DISABLE		(0)			/**< HDMI_CTRL.HDMI_MODE Register<br> Disabled				*/
#define FJ_HDMI_HDMI_MODE_ENABLE		(1)			/**< HDMI_CTRL.HDMI_MODE Register<br> Enabled				*/
#define FJ_HDMI_LAYOUT_0				(0)			/**< HDMI_CTRL.LAYOUT Register<br> Layout 0 (2-channel)			*/
#define FJ_HDMI_LAYOUT_1				(1)			/**< HDMI_CTRL.LAYOUT Register<br> Layout 1 (up to 8 channels)	*/
#define FJ_HDMI_PACKET_MODE_24BPP		(4)			/**< HDMI_CTRL.PACKET_MODE Register<br> 24bits per pixel(8bits per pixel; no packing)		*/
#define FJ_HDMI_PACKET_MODE_30BPP		(5)			/**< HDMI_CTRL.PACKET_MODE Register<br> 30bits per pixel(10bits per pixel; pack to 8bits)	*/
#define FJ_HDMI_PACKET_MODE_36BPP		(6)			/**< HDMI_CTRL.PACKET_MODE Register<br> 36bits per pixel(12bits per pixel; pack to 8bits)	*/
#define FJ_HDMI_PDTOT_RSEN				(0)			/**< DPD.PDTOT Register<br> Power down everything;INT source is RSEN	*/
#define FJ_HDMI_PDTOT_NORMAL			(1)			/**< DPD.PDTOT Register<br> Normal operation							*/
#define FJ_HDMI_PDOSC_PD				(0)			/**< DPD.PDOSC Register<br> Power down									*/
#define FJ_HDMI_PDOSC_NORMAL			(1)			/**< DPD.PDOSC Register<br> Normal operation							*/
#define FJ_HDMI_PDIDCKE_PD				(0)			/**< DPD.PDIDCKE Register<br> Power down; gate off IDCK signal to disable all IDCK-based logic	*/
#define FJ_HDMI_PDIDCKE_NORMAL			(1)			/**< DPD.PDIDCKE Register<br> Normal operation													*/
#define FJ_HDMI_TCLKPHZ_180_DEGREES		(0)			/**< DPD.TCLKPHZ Register<br> Invert TCLK; change the phase 180 degrees		*/
#define FJ_HDMI_TCLKPHZ_SAME_TMDS		(1)			/**< DPD.TCLKPHZ Register<br> Default phase; the same as TMDS core			*/
#define FJ_HDMI_PROCESS_OK				(0)			/**< HDMI async process OK							*/
#define FJ_HDMI_PROCESS_ERR				(1)			/**< HDMI async process ERR							*/
#define FJ_OSD_COMM_RGBAXXXX	(4)		/**< RGBA8888: 4 RGBA4444: 2				*/
#define MAX_ICON_NUM_IN_1STRING (50)	/**< max icon num in a 1 string				*/
#define FJ_LEFT					(1)		/**< Display position(Left)					*/
#define FJ_RIGHT				(2)		/**< Display position(Right)				*/
#define FJ_CENTER				(4)		/**< Display position(Horizontal center)	*/
#define FJ_TOP					(0x10)	/**< Display position(Top)					*/
#define FJ_BOTTOM				(0x20)	/**< Display position(Bottom)				*/
#define FJ_VCENTER				(0x40)	/**< Display position(Vertical center)		*/
#define OSD_DRAW_AREA_NUM		(10)	/**< The maximum number to divide the drawing area					*/
#define OSD_DRAW_FACE_NUM		(16)	/**< The maximum number to face frame								*/
#define OSD_COLOR_BAR_NUM		(16)	/**< The maximum number to color bars								*/
#define VALIDMODECATEGORY_BOOT	(D_BF_MODE_BASE_CODE | D_BF_MODE_CATEGORY_ALL)						/** Check mode option of boot	*/
#define VALIDMODECATEGORY_COMM	(D_BF_MODE_VIEW_CODE | D_BF_MODE_PB_CODE | D_BF_MODE_CATEGORY_ALL)	/** Check mode option of common	*/
#define VALIDMODECATEGORY_VIEW	(D_BF_MODE_VIEW_CODE | D_BF_MODE_CATEGORY_ALL)						/** Check mode option of view	*/
#define FJ_D_OSD_COMM_LINE_TERMINATOR_TYPE_CIRCLE		(0x11)	/**< Both side are circle.*/
#define FJ_D_OSD_COMM_LINE_TERMINATOR_TYPE_RECT			(0x22)	/**< Both side are rectangle.*/
#define FJ_D_OSD_COMM_LINE_TERMINATOR_TYPE_CIRCLE_RECT	(0x12)	/**< Start is circle and end is rectangle.*/
#define FJ_D_OSD_COMM_LINE_TERMINATOR_TYPE_RECT_CIRCLE	(0x21)	/**< Start is circle and end is rectangle.*/
#define FJ_OSD_COMM_GET_DISP_OSD_BANK( osd_draw_area)	(((osd_draw_area) > 0) ? (E_IM_DISP_OSD_SA_BANK_NO)((osd_draw_area) + E_IM_DISP_OSD_SA_BANK_NO_0_3) :  (E_IM_DISP_OSD_SA_BANK_NO)(osd_draw_area)) /**< Get DISP's OSD draw area's bank No. See E_IM_DISP_OSD_SA_BANK_NO*/

修改后在fjdispe.h的宏定义

#define FjDispE_FJ_DISP_HDMI_AUDIO_32000HZ	32000		/**< 32kHz   */
#define FjDispE_FJ_DISP_HDMI_AUDIO_48000HZ	48000		/**< 48kHz   */
#define FjDispE_FJ_DISP_HDMI_AUDIO_44100HZ	44100		/**< 44.1kHz */
#define FjDispE_FJ_DISP_HDMI_AUDIO_96000HZ	96000		/**< 96kHz   */
#define FjDispE_FJ_DISP_HDMI_FREQ_CTRL_INACTIVE		0	/**< Inactive   */
#define FjDispE_FJ_DISP_HDMI_FREQ_CTRL_ACTIVE		1	/**< Acvive (The frequency generated by the PLL05 and PLL05A to 1000/1001.) */
#define FjDispE_FJ_DISP_MIPI_FREQ_CTRL_INACTIVE		0	/**< Inactive   */
#define FjDispE_FJ_DISP_MIPI_FREQ_CTRL_ACTIVE		1	/**< Acvive (The frequency generated by the PLL05 and PLL05A to 1000/1001.) */
#define FjDispE_FJ_DISP_MIPI_MODE_VIDEO				0	/**< Set the operation mode to video mode	*/
#define FjDispE_FJ_DISP_MIPI_MODE_CMD				1	/**< Set the operation mode to command Mode	*/
#define FjDispE_FJ_HDMI_EDID_TAG_FLAG_AUDIO		(0x01)	/**< EDID Tag AUDIO			*/
#define FjDispE_FJ_HDMI_EDID_TAG_FLAG_VIDEO		(0x02)	/**< EDID Tag VIDEO			*/
#define FjDispE_FJ_HDMI_EDID_TAG_FLAG_VENDOR	(0x04)	/**< EDID Tag VENDOR		*/
#define FjDispE_FJ_HDMI_EDID_TAG_FLAG_SPEAKER	(0x08)	/**< EDID Tag SPEAKER		*/
#define FjDispE_FJ_HDMI_EDID_TAG_FLAG_VESA		(0x10)	/**< EDID Tag VESA			*/
#define FjDispE_FJ_HDMI_EDID_TAG_FLAG_EXTENDED	(0x20)	/**< EDID Tag EXTENDED		*/
#define FjDispE_FJ_HDMI_EDID_TAG_FLAG_ALL		(0x3F)	/**< EDID All Tags 			*/
#define FjDispE_FJ_HDMI_AUDIO_32000HZ 32000		/**< 32kHz   */
#define FjDispE_FJ_HDMI_AUDIO_48000HZ	 48000		/**< 48kHz   */
#define FjDispE_FJ_HDMI_AUDIO_44100HZ	 44100		/**< 44.1kHz */
#define FjDispE_FJ_HDMI_AUDIO_96000HZ	 96000		/**< 96kHz   */
#define FjDispE_FJ_HDMI_1280x720p60Hz_16_9		(0x80001)	/**< 1280x720p 60Hz	 16:9 */
#define FjDispE_FJ_HDMI_1280x720p50Hz_16_9		(0x80002)	/**< 1280x720p 50Hz	 16:9 */
#define FjDispE_FJ_HDMI_1920x1080i60Hz_16_9		(0x80004)	/**< 1920x1080i 60Hz 16:9 */
#define FjDispE_FJ_HDMI_1920x1080i50Hz_16_9		(0x80008)	/**< 1920x1080i 50Hz 16:9 */
#define FjDispE_FJ_HDMI_720x480p60Hz_4_3		(0x80010)	/**< 720x480p 60Hz	  4:3 */
#define FjDispE_FJ_HDMI_720x576p50Hz_4_3		(0x80020)	/**< 720x576p 50Hz	  4:3 */
#define FjDispE_FJ_HDMI_1920x1080p30Hz_16_9		(0x80040)	/**< 1920x1080p 30Hz 16:9 */
#define FjDispE_FJ_HDMI_1920x1080p25Hz_16_9		(0x80080)	/**< 1920x1080p 25Hz 16:9 */
#define FjDispE_FJ_HDMI_1920x1080p60Hz_16_9		(0x80100)	/**< 1920x1080p 60Hz 16:9 */
#define FjDispE_FJ_HDMI_1920x1080p50Hz_16_9		(0x80200)	/**< 1920x1080p 50Hz 16:9 */
#define FjDispE_FJ_HDMI_1280x720p25Hz_16_9		(0x80400)	/**< 1280x720p 25Hz	 16:9 */
#define FjDispE_FJ_HDMI_1280x720p30Hz_16_9		(0x80800)	/**< 1280x720p 25Hz	 16:9 */
#define FjDispE_FJ_HDMI_3840x2160p25Hz_16_9		(0x81000)	/**< 3840x2160p 25Hz 16:9 */
#define FjDispE_FJ_HDMI_3840x2160p30Hz_16_9		(0x82000)	/**< 3840x2160p 30Hz 16:9 */
#define FjDispE_FJ_HDMI_3840x2160p60Hz_16_9		(0x84000)	/**< 3840x2160p 60Hz 16:9 */
#define FjDispE_FJ_HDMI_DVI_MONITOR				(0x40000)	/**< DVI				  */
#define FjDispE_FJ_HDMI_FORMAT_NO				(0x80000)	/**< format base		  */
#define FjDispE_FJ_HDMI_OUT_RGB			(0x00)		/**< RGB */
#define FjDispE_FJ_HDMI_OUT_YCC422		(0x20)		/**< YCbCr422 */
#define FjDispE_FJ_HDMI_OUT_YCC444		(0x40)		/**< YCbCr444 */
#define FjDispE_FJ_HDMI_ASPECT_4_3		(0x01)		/**< Aspect type 4:3	*/
#define FjDispE_FJ_HDMI_ASPECT_16_9		(0x02)		/**< Aspect type 16:9	*/
#define FjDispE_FJ_HDMI_SCAN_OVER		(0x01)		/**< over scan */
#define FjDispE_FJ_HDMI_SCAN_UNDER		(0x02)		/**< under scan */
#define FjDispE_FJ_HDMI_VSYNC_NEG		(0x00)		/**< negative V sync */
#define FjDispE_FJ_HDMI_VSYNC_POS		(0x04)		/**< positive V sinc */
#define FjDispE_FJ_HDMI_HSYNC_NEG		(0x00)		/**< negative V sync */
#define FjDispE_FJ_HDMI_HSYNC_POS		(0x02)		/**< positive V sinc */
#define FjDispE_FJ_HDMI_INTERLACE		(0x80)		/**< interlace */
#define FjDispE_FJ_HDMI_NON_INTERLACE	(0x00)		/**< non interlace */
#define FjDispE_FJ_HDMI_FORCE_CLEAR			(0x00)			/**< not force setting	*/
#define FjDispE_FJ_HDMI_FORCE_YCC422		(0x01)			/**< YCbCr422			*/
#define FjDispE_FJ_HDMI_FORCE_YCC444		(0x02)			/**< YCbCr444			*/
#define FjDispE_FJ_HDMI_PD_DOWN					(0)			/**< SYS_CTRL1.PD Register<br> TMDS core is powerd down and interrupts are in power-down mode*/
#define FjDispE_FJ_HDMI_PD_NORMAL				(1)			/**< SYS_CTRL1.PD Register<br> Normal operation			*/
#define FjDispE_FJ_HDMI_EDGE_FALLING			(0)			/**< SYS_CTRL1.EDGE Register<br> Latch input on Falling Edge	*/
#define FjDispE_FJ_HDMI_EDGE_RISING				(1)			/**< SYS_CTRL1.EDGE Register<br> Latch input on Rising Edge		*/
#define FjDispE_FJ_HDMI_HEN_FIXEDLOW			(0)			/**< SYS_CTRL1.HEN Register<br> Fixed LOW						*/
#define FjDispE_FJ_HDMI_HEN_INPUT				(1)			/**< SYS_CTRL1.HEN Register<br> Follow HSYNC input				*/
#define FjDispE_FJ_HDMI_VEN_FIXEDLOW			(0)			/**< SYS_CTRL1.VEN Register<br> Fixed LOW						*/
#define FjDispE_FJ_HDMI_VEN_INPUT				(1)			/**< SYS_CTRL1.VEN Register<br> Follow VSYNC input				*/
#define FjDispE_FJ_HDMI_VSYNC_ACTIVE			(0)			/**< SYS_CTRL1.VSYNC Register<br> VSYNC active					*/
#define FjDispE_FJ_HDMI_VSYNC_DEACTIVE			(1)			/**< SYS_CTRL1.VSYNC Register<br> VSYNC deactive				*/
#define FjDispE_FJ_HDMI_HDCP_SEL_UNENCRYPTED	(0)			/**< DCTL.hdcpSel Register<br> Send unencrypted data	*/
#define FjDispE_FJ_HDMI_HDCP_SEL_ENCRYPTED		(1)			/**< DCTL.hdcpSel Register<br> Send encrypted data		*/
#define FjDispE_FJ_HDMI_AUD_MUTE_NORMAL			(0)			/**< DCTL.audMute Register<br> Do not send zeros in audio packet	*/
#define FjDispE_FJ_HDMI_AUD_MUTE_SEND_ZERO		(1)			/**< DCTL.audMute Register<br> Send zeros in audio packet			*/
#define FjDispE_FJ_HDMI_VID_BLANK_NORMAL		(0)			/**< DCTL.vidBank Register<br> Normal operation				*/
#define FjDispE_FJ_HDMI_VID_BLANK_BLANKED		(1)			/**< DCTL.vidBank Register<br> Video output is blanked			*/
#define FjDispE_FJ_HDMI_VID_CTRL_ICLK_NOTREP	(0)			/**< VID_CTRL.ICLK Register<br> Pixel data is not replicated				*/
#define FjDispE_FJ_HDMI_VID_CTRL_ICLK_ONCE		(1)			/**< VID_CTRL.ICLK Register<br> Pixels are replicated once(each sent twice)	*/
#define FjDispE_FJ_HDMI_VID_CTRL_ICLK_4TIMES	(3)			/**< VID_CTRL.ICLK Register<br> Pixels are replicated 4 times(each sent four times)	*/
#define FjDispE_FJ_HDMI_POLARITY_HIGH			(0)			/**< INT_CTRL.POLARITY Register<br> Assert HIGH		*/
#define FjDispE_FJ_HDMI_POLARITY_LOW			(1)			/**< INT_CTRL.POLARITY Register<br> Assert LOW		*/
#define FjDispE_FJ_HDMI_SOFT_INTR_CLEAR			(0)			/**< INT_CTRL.SOFT_INTR Register<br> Clear interrupt	*/
#define FjDispE_FJ_HDMI_SOFT_INTR_SET			(1)			/**< INT_CTRL.SOFT_INTR Register<br> Set interrupt		*/
#define FjDispE_FJ_HDMI_NCTSPKT_EN_DISABLE		(0)			/**< ACR_CTRL.NCTSPKT_EN Register<br> N/CTS packet disabled	*/
#define FjDispE_FJ_HDMI_NCTSPKT_EN_ENABLE		(1)			/**< ACR_CTRL.NCTSPKT_EN Register<br> N/CTS packet enabled	*/
#define FjDispE_FJ_HDMI_AUD_EN_DISABLE			(0)			/**< AUD_MODE.AUD_EN Register<br> Audio input stream disabled	*/
#define FjDispE_FJ_HDMI_AUD_EN_ENABLE			(1)			/**< AUD_MODE.AUD_EN Register<br> Audio input stream enabled	*/
#define FjDispE_FJ_HDMI_SPDIF_EN_DISABLE		(0)			/**< AUD_MODE.SPDIF_EN Register<br> S/PDIF input stream disabled	*/
#define FjDispE_FJ_HDMI_SPDIF_EN_ENABLE			(1)			/**< AUD_MODE.SPDIF_EN Register<br> S/PDIF input stream enabled		*/
#define FjDispE_FJ_HDMI_SD0_EN_DISABLE			(0)			/**< AUD_MODE.SD0_EN Register<br> I2S input channel #0 disable	*/
#define FjDispE_FJ_HDMI_SD0_EN_ENABLE			(1)			/**< AUD_MODE.SD0_EN Register<br> I2S input channel #0 enable	*/
#define FjDispE_FJ_HDMI_I2S_FIFO_MAP_SD0		(0)			/**< I2S_IN_MAP.FIFOx_MAP Register<br> Map SD0 to FIFO		*/
#define FjDispE_FJ_HDMI_I2S_FIFO_MAP_SD1		(1)			/**< I2S_IN_MAP.FIFOx_MAP Register<br> Map SD1 to FIFO		*/
#define FjDispE_FJ_HDMI_I2S_FIFO_MAP_SD2		(2)			/**< I2S_IN_MAP.FIFOx_MAP Register<br> Map SD2 to FIFO		*/
#define FjDispE_FJ_HDMI_I2S_FIFO_MAP_SD3		(3)			/**< I2S_IN_MAP.FIFOx_MAP Register<br> Map SD3 to FIFO		*/
#define FjDispE_FJ_HDMI_I2S_SHIFT_FIRSTBIT		(0)			/**< I2S_CONTROL.I2S_SHIFT Register<br> First bit shift		*/
#define FjDispE_FJ_HDMI_I2S_SHIFT_NO			(1)			/**< I2S_CONTROL.I2S_SHIFT Register<br> No shift			*/
#define FjDispE_FJ_HDMI_I2S_DIR_MSB				(0)			/**< I2S_CONTROL.I2S_DIR Register<br> MSB shifted first		*/
#define FjDispE_FJ_HDMI_I2S_JUST_LEFT			(0)			/**< I2S_CONTROL.I2S_JUST Register<br> Data is left-justified		*/
#define FjDispE_FJ_HDMI_I2S_JUST_RIGHT			(1)			/**< I2S_CONTROL.I2S_JUST Register<br> Data is right-justified		*/
#define FjDispE_FJ_HDMI_I2S_WS_LOW				(0)			/**< I2S_CONTROL.I2S_WS Register<br> Left polarity when WS is LOW	*/
#define FjDispE_FJ_HDMI_I2S_WS_HIGH				(1)			/**< I2S_CONTROL.I2S_WS Register<br> Left polarity when WS is HIGH	*/
#define FjDispE_FJ_HDMI_VBIT_PCM				(0)			/**< I2S_CONTROL.VBIT Register<br> PCM						*/
#define FjDispE_FJ_HDMI_VBIT_COMPRESSED			(1)			/**< I2S_CONTROL.VBIT Register<br> Compressed				*/
#define FjDispE_FJ_HDMI_SCK_EDGE_RISING			(1)			/**< I2S_CONTROL.SCK_EDGE Register<br> Sample clock is rising		*/
#define FjDispE_FJ_HDMI_HBRA_NOT_HIGH			(0)			/**< I2S_CONTROL.HBRA_ON Register<br> Input stream is not high bit rate	*/
#define FjDispE_FJ_HDMI_HBRA_HIGH				(1)			/**< I2S_CONTROL.HBRA_ON Register<br> Input stream is high bit rate		*/
#define FjDispE_FJ_HDMI_SW_SPDIF_FS_44100HZ		(0)			/**< I2S_CHST4.SW_SPDIF_FS Register<br> 44.1kHz				*/
#define FjDispE_FJ_HDMI_SW_SPDIF_FS_48000HZ		(2)			/**< I2S_CHST4.SW_SPDIF_FS Register<br> 48.0kHz				*/
#define FjDispE_FJ_HDMI_SW_SPDIF_FS_32000HZ		(3)			/**< I2S_CHST4.SW_SPDIF_FS Register<br> 32.0kHz				*/
#define FjDispE_FJ_HDMI_CLK_ACCUR_0				(0)			/**< I2S_CHST4.CLK_ACCUR Register<br> 0x0					*/
#define FjDispE_FJ_HDMI_I2S_MAXLEN_20BIT		(0)			/**< I2S_CHST5.I2S_MAXLEN Register<br> 20bit				*/
#define FjDispE_FJ_HDMI_I2S_MAXLEN_24BIT		(1)			/**< I2S_CHST5.I2S_MAXLEN Register<br> 24bit				*/
#define FjDispE_FJ_HDMI_I2S_LEN_16OR20BIT		(0)			/**< I2S_CHST5.I2S_LEN Register<br> 16word(I2S_MAXLEN=20bit)*/
#define FjDispE_FJ_HDMI_I2S_LEN_20OR24BIT		(5)			/**< I2S_CHST5.I2S_LEN Register<br> 24word(I2S_MAXLEN=24bit)*/
#define FjDispE_FJ_HDMI_SRC_EN_DISABLE			(0)			/**< ASRC.SRC_EN Register<br> Audio sample rate conversion disabled	*/
#define FjDispE_FJ_HDMI_SRC_EN_ENABLE			(1)			/**< ASRC.SRC_EN Register<br> Audio sample rate conversion enabled	*/
#define FjDispE_FJ_HDMI_RATIO_2TO1				(0)			/**< ASRC.RATIO Register<br> Down-sample 2-to-1 when SRC_EN is set to 1	*/
#define FjDispE_FJ_HDMI_RATIO_4TO1				(1)			/**< ASRC.RATIO Register<br> Down-sample 4-to-1 when SRC_EN is set to 1	*/
#define FjDispE_FJ_HDMI_IN_LENGTH_16BIT			(0x2)		/**< I2S_IN_LEN.IN_LENGTH Register<br> 16bit				*/
#define FjDispE_FJ_HDMI_IN_LENGTH_24BIT			(0xB)		/**< I2S_IN_LEN.IN_LENGTH Register<br> 24bit				*/
#define FjDispE_FJ_HDMI_HDMI_MODE_DISABLE		(0)			/**< HDMI_CTRL.HDMI_MODE Register<br> Disabled				*/
#define FjDispE_FJ_HDMI_HDMI_MODE_ENABLE		(1)			/**< HDMI_CTRL.HDMI_MODE Register<br> Enabled				*/
#define FjDispE_FJ_HDMI_LAYOUT_0				(0)			/**< HDMI_CTRL.LAYOUT Register<br> Layout 0 (2-channel)			*/
#define FjDispE_FJ_HDMI_LAYOUT_1				(1)			/**< HDMI_CTRL.LAYOUT Register<br> Layout 1 (up to 8 channels)	*/
#define FjDispE_FJ_HDMI_PACKET_MODE_24BPP		(4)			/**< HDMI_CTRL.PACKET_MODE Register<br> 24bits per pixel(8bits per pixel; no packing)		*/
#define FjDispE_FJ_HDMI_PACKET_MODE_30BPP		(5)			/**< HDMI_CTRL.PACKET_MODE Register<br> 30bits per pixel(10bits per pixel; pack to 8bits)	*/
#define FjDispE_FJ_HDMI_PACKET_MODE_36BPP		(6)			/**< HDMI_CTRL.PACKET_MODE Register<br> 36bits per pixel(12bits per pixel; pack to 8bits)	*/
#define FjDispE_FJ_HDMI_PDTOT_RSEN				(0)			/**< DPD.PDTOT Register<br> Power down everything;INT source is RSEN	*/
#define FjDispE_FJ_HDMI_PDTOT_NORMAL			(1)			/**< DPD.PDTOT Register<br> Normal operation							*/
#define FjDispE_FJ_HDMI_PDOSC_PD				(0)			/**< DPD.PDOSC Register<br> Power down									*/
#define FjDispE_FJ_HDMI_PDOSC_NORMAL			(1)			/**< DPD.PDOSC Register<br> Normal operation							*/
#define FjDispE_FJ_HDMI_PDIDCKE_PD				(0)			/**< DPD.PDIDCKE Register<br> Power down; gate off IDCK signal to disable all IDCK-based logic	*/
#define FjDispE_FJ_HDMI_PDIDCKE_NORMAL			(1)			/**< DPD.PDIDCKE Register<br> Normal operation													*/
#define FjDispE_FJ_HDMI_TCLKPHZ_180_DEGREES		(0)			/**< DPD.TCLKPHZ Register<br> Invert TCLK; change the phase 180 degrees		*/
#define FjDispE_FJ_HDMI_TCLKPHZ_SAME_TMDS		(1)			/**< DPD.TCLKPHZ Register<br> Default phase; the same as TMDS core			*/
#define FjDispE_FJ_HDMI_PROCESS_OK				(0)			/**< HDMI async process OK							*/
#define FjDispE_FJ_HDMI_PROCESS_ERR				(1)			/**< HDMI async process ERR							*/
#define FjDispE_FJ_OSD_COMM_RGBAXXXX	(4)		/**< RGBA8888: 4 RGBA4444: 2				*/
#define FjDispE_MAX_ICON_NUM_IN_1STRING (50)	/**< max icon num in a 1 string				*/
#define FjDispE_FJ_LEFT					(1)		/**< Display position(Left)					*/
#define FjDispE_FJ_RIGHT				(2)		/**< Display position(Right)				*/
#define FjDispE_FJ_CENTER				(4)		/**< Display position(Horizontal center)	*/
#define FjDispE_FJ_TOP					(0x10)	/**< Display position(Top)					*/
#define FjDispE_FJ_BOTTOM				(0x20)	/**< Display position(Bottom)				*/
#define FjDispE_FJ_VCENTER				(0x40)	/**< Display position(Vertical center)		*/
#define FjDispE_OSD_DRAW_AREA_NUM		(10)	/**< The maximum number to divide the drawing area					*/
#define FjDispE_OSD_DRAW_FACE_NUM		(16)	/**< The maximum number to face frame								*/
#define FjDispE_OSD_COLOR_BAR_NUM		(16)	/**< The maximum number to color bars								*/
#define FjDispE_VALIDMODECATEGORY_BOOT	(D_BF_MODE_BASE_CODE | D_BF_MODE_CATEGORY_ALL)						/** Check mode option of boot	*/
#define FjDispE_VALIDMODECATEGORY_COMM	(D_BF_MODE_VIEW_CODE | D_BF_MODE_PB_CODE | D_BF_MODE_CATEGORY_ALL)	/** Check mode option of common	*/
#define FjDispE_VALIDMODECATEGORY_VIEW	(D_BF_MODE_VIEW_CODE | D_BF_MODE_CATEGORY_ALL)						/** Check mode option of view	*/
#define FjDispE_FJ_D_OSD_COMM_LINE_TERMINATOR_TYPE_CIRCLE		(0x11)	/**< Both side are circle.*/
#define FjDispE_FJ_D_OSD_COMM_LINE_TERMINATOR_TYPE_RECT			(0x22)	/**< Both side are rectangle.*/
#define FjDispE_FJ_D_OSD_COMM_LINE_TERMINATOR_TYPE_CIRCLE_RECT	(0x12)	/**< Start is circle and end is rectangle.*/
#define FjDispE_FJ_D_OSD_COMM_LINE_TERMINATOR_TYPE_RECT_CIRCLE	(0x21)	/**< Start is circle and end is rectangle.*/
#define FjDispE_FJ_OSD_COMM_GET_DISP_OSD_BANK( osd_draw_area)	(((osd_draw_area) > 0) ? (E_IM_DISP_OSD_SA_BANK_NO)((osd_draw_area) + E_IM_DISP_OSD_SA_BANK_NO_0_3) :  (E_IM_DISP_OSD_SA_BANK_NO)(osd_draw_area)) /**< Get DISP's OSD draw area's bank No. See E_IM_DISP_OSD_SA_BANK_NO*/


fj_common.c               	fjcommon.c     并删掉fj_common.h
对应的fjcommon.h     
原结构体 												更改后			
typedef struct 
T_FJ_COMMON_DATE_TIME					TfjCommonDateTime

